-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Thresholding_Batch_1_Thresholding_Batcmb6_rom is 
    generic(
             DWIDTH     : integer := 19; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Thresholding_Batch_1_Thresholding_Batcmb6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000001000011010010", 1 => "0000010010101001101", 
    2 => "0000001110111001110", 3 => "0000010110111000000", 
    4 => "0000011000000001100", 5 => "0000010001000111010", 
    6 => "1111111100111111100", 7 => "0000000100101100111", 
    8 => "1111110001110101011", 9 => "1111101100011000001", 
    10 => "0000100000011010000", 11 => "0000001110000010110", 
    12 => "0000001000001111000", 13 => "1111111110010000111", 
    14 => "0000011000010110100", 15 => "1111101010101111001", 
    16 => "1111110011110101010", 17 => "0000010101001100001", 
    18 => "0000010001011100100", 19 => "0000001111010010010", 
    20 => "1111100100111010110", 21 => "0001010010111100100", 
    22 => "1111001011110100011", 23 => "1111101110010011010", 
    24 => "0000011111110001110", 25 => "0000010010010000101", 
    26 => "1111111001000110100", 27 => "0000111010100110110", 
    28 => "1111100010111000111", 29 => "0000010001111001110", 
    30 => "1111100010100001110", 31 => "1111111101111101011", 
    32 => "1011000100011110111", 33 => "1111111001110110111", 
    34 => "1111110000111100111", 35 => "1111110000110110101", 
    36 => "1111100010000111010", 37 => "1111111000000011111", 
    38 => "1111101101001010101", 39 => "1111111001101111001", 
    40 => "1111110011010011001", 41 => "1111111001000110100", 
    42 => "1111110100011111100", 43 => "0000000110010011001", 
    44 => "0000011110101111110", 45 => "1111011011101010110", 
    46 => "1111011011100001100", 47 => "1111101011110100110", 
    48 => "0000011011001010111", 49 => "0000001011110110100", 
    50 => "1111011011011101010", 51 => "0000001101110010011", 
    52 => "0000011001011000101", 53 => "0010000010111100000", 
    54 => "0001000101100110101", 55 => "0000100110011001011", 
    56 => "1111101001111100010", 57 => "0000011110010000001", 
    58 => "1111111100011011000", 59 => "1111110001000011001", 
    60 => "1111110101100000101", 61 => "0000101001001100001", 
    62 => "1111110100000101110", 63 => "0010100000111101100", 
    64 => "0000010010000101111", 65 => "0000100010011111001", 
    66 => "1111110101001110001", 67 => "0000001000000000100", 
    68 => "0001111110010000110", 69 => "1111101111110111111", 
    70 => "1100010101100010111", 71 => "0000100100011000001", 
    72 => "0000010010011101101", 73 => "0000011110011111000", 
    74 => "0000000111011111101", 75 => "1111101100001000110", 
    76 => "0000100111110011011", 77 => "0000010010010111011", 
    78 => "1111111001110010100", 79 => "1111110001011111001", 
    80 => "0000001001111111111", 81 => "1111111111101101001", 
    82 => "1111100111001011011", 83 => "1111001101100000011", 
    84 => "1111110000000110011", 85 => "1111111111111101000", 
    86 => "0000001111010001101", 87 => "1111110010101010000", 
    88 => "1111110101110110011", 89 => "1111110110101001001", 
    90 => "1111111000001011111", 91 => "1111011011100011011", 
    92 => "0000001001010100010", 93 => "0000001001001100111", 
    94 => "1111110101011001111", 95 => "1111110100101100000", 
    96 => "1111111110101000101", 97 => "1111111010001011100", 
    98 => "1111111000000010001", 99 => "1111111001011111010", 
    100 => "0000011000010011111", 101 => "0000101111001000111", 
    102 => "1111110100000000010", 103 => "1111011010101010100", 
    104 => "0000000011101010100", 105 => "1111101111000110111", 
    106 => "0000110110101101001", 107 => "0000001111101010010", 
    108 => "1111101000100101011", 109 => "1111000000010000011", 
    110 => "0000001101101101110", 111 => "0000111100010100110", 
    112 => "1111110011010001111", 113 => "1111110110001000111", 
    114 => "0010110011100001000", 115 => "1111110101111101111", 
    116 => "1111111100111110001", 117 => "1111110010101001010", 
    118 => "0000010011000100000", 119 => "0000010100000000100", 
    120 => "1111110101111010110", 121 => "1111110000111000011", 
    122 => "0000011101010111110", 123 => "0000010111011011101", 
    124 => "1111101010111100011", 125 => "1111001011001000100", 
    126 => "0000110110110101011", 127 => "1111110010110111001" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Thresholding_Batch_1_Thresholding_Batcmb6 is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Thresholding_Batch_1_Thresholding_Batcmb6 is
    component Thresholding_Batch_1_Thresholding_Batcmb6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Thresholding_Batch_1_Thresholding_Batcmb6_rom_U :  component Thresholding_Batch_1_Thresholding_Batcmb6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


