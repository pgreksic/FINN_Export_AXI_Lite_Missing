-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Thresholding_Batch_1_Thresholding_Batcg8j_rom is 
    generic(
             DWIDTH     : integer := 19; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Thresholding_Batch_1_Thresholding_Batcg8j_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000110000110010", 1 => "0000001111111110100", 
    2 => "0000001101110101100", 3 => "0000010101100011110", 
    4 => "0000010010000001111", 5 => "0000001101001100110", 
    6 => "1111111011011001100", 7 => "0000000001111001111", 
    8 => "1111101001100100000", 9 => "1111101010111110011", 
    10 => "0000011100001010101", 11 => "0000001101010000010", 
    12 => "0000000111000100101", 13 => "1111111100100100111", 
    14 => "0000010010000111111", 15 => "1111100100110111110", 
    16 => "1111110010011101100", 17 => "0000010011001011001", 
    18 => "0000010000001010010", 19 => "0000001101101100111", 
    20 => "1111011100101001100", 21 => "0000110000110100010", 
    22 => "1111000000111001111", 23 => "1111101011011111111", 
    24 => "0000010010101111011", 25 => "0000001111101011110", 
    26 => "1111110111100101100", 27 => "0000110101110010011", 
    28 => "1111011110110011111", 29 => "0000010001001101101", 
    30 => "1111010001001000001", 31 => "1111111101000011000", 
    32 => "1010000110110010111", 33 => "1111110110110110101", 
    34 => "1111101110100111100", 35 => "1111101110000101001", 
    36 => "1111011100001000011", 37 => "1111110101100110100", 
    38 => "1111101011011010100", 39 => "1111110111110010111", 
    40 => "1111110010000001111", 41 => "1111110111101110001", 
    42 => "1111110010101100110", 43 => "0000000011011110110", 
    44 => "0000010010110100011", 45 => "1111010101100000001", 
    46 => "1111011000111010110", 47 => "1111101000001100000", 
    48 => "0000010111010011011", 49 => "0000001001000110000", 
    50 => "1111010101100110110", 51 => "0000001100110011110", 
    52 => "0000010111101110011", 53 => "0001001101111010110", 
    54 => "0000111111000100001", 55 => "0000100011110100100", 
    56 => "1111100101101010101", 57 => "0000010100001111010", 
    58 => "1111111001101100000", 59 => "1111101110001110101", 
    60 => "1111110010000101110", 61 => "0000100110100010100", 
    62 => "1111110000100001000", 63 => "0001110100101110011", 
    64 => "0000001111101100110", 65 => "0000011001110100100", 
    66 => "1111110011110010100", 67 => "0000000111010010101", 
    68 => "0001101100101000100", 69 => "1111101101110101111", 
    70 => "1011100101001010100", 71 => "0000010110001101111", 
    72 => "0000001100101111100", 73 => "0000011100101010000", 
    74 => "0000000100011010101", 75 => "1111101000010110010", 
    76 => "0000100100010001011", 77 => "0000010001011111101", 
    78 => "1111110111011110001", 79 => "1111101111000110000", 
    80 => "0000001001001000101", 81 => "1111111110000111101", 
    82 => "1111100010000111010", 83 => "1111000111001101110", 
    84 => "1111101011011000101", 85 => "1111111101010010010", 
    86 => "0000001101011001101", 87 => "1111110001010110001", 
    88 => "1111110011001101001", 89 => "1111110101110001011", 
    90 => "1111110110101101001", 91 => "1111010010011101010", 
    92 => "0000000110011100101", 93 => "0000000111101001000", 
    94 => "1111110011110100001", 95 => "1111110010100110010", 
    96 => "1111111100100000010", 97 => "1111110111000010100", 
    98 => "1111110101000110100", 99 => "1111111000000110101", 
    100 => "0000010101101111000", 101 => "0000011100101001101", 
    102 => "1111110010000000011", 103 => "1111010011000110001", 
    104 => "0000000001011011101", 105 => "1111101011101001011", 
    106 => "0000100011000000101", 107 => "0000001110100110001", 
    108 => "1111100110001101100", 109 => "1110100111101011111", 
    110 => "0000001011100110101", 111 => "0000101011101011011", 
    112 => "1111110001000000011", 113 => "1111101110011011100", 
    114 => "0001111011001011010", 115 => "1111110011100111100", 
    116 => "1111111010111100000", 117 => "1111101110011110110", 
    118 => "0000010000111110100", 119 => "0000010000101101010", 
    120 => "1111110011011000100", 121 => "1111101110000011000", 
    122 => "0000011011010111001", 123 => "0000001111100000111", 
    124 => "1111101000010101011", 125 => "1111000010100010010", 
    126 => "0000100101110111010", 127 => "1111101011100011010" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Thresholding_Batch_1_Thresholding_Batcg8j is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Thresholding_Batch_1_Thresholding_Batcg8j is
    component Thresholding_Batch_1_Thresholding_Batcg8j_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Thresholding_Batch_1_Thresholding_Batcg8j_rom_U :  component Thresholding_Batch_1_Thresholding_Batcg8j_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


