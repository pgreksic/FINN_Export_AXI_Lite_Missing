-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Thresholding_Batch_1_Thresholding_BatcdEe_rom is 
    generic(
             DWIDTH     : integer := 19; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Thresholding_Batch_1_Thresholding_BatcdEe_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000100111100011", 1 => "0000001110101001000", 
    2 => "0000001101010011011", 3 => "0000010100111001110", 
    4 => "0000001111000010001", 5 => "0000001011001111011", 
    6 => "1111111010100110100", 7 => "0000000000100000011", 
    8 => "1111100101011011011", 9 => "1111101010010001100", 
    10 => "0000011010000010111", 11 => "0000001100110111000", 
    12 => "0000000110011111100", 13 => "1111111011101110111", 
    14 => "0000001111000000100", 15 => "1111100001111100001", 
    16 => "1111110001110001101", 17 => "0000010010001010101", 
    18 => "0000001111100001001", 19 => "0000001100111010001", 
    20 => "1111011000100001000", 21 => "0000011111110000001", 
    22 => "1110111011011100101", 23 => "1111101010000110010", 
    24 => "0000001100001110010", 25 => "0000001110011001011", 
    26 => "1111110110110101000", 27 => "0000110011011000001", 
    28 => "1111011100110001011", 29 => "0000010000110111101", 
    30 => "1111001000011011011", 31 => "1111111100100101110", 
    32 => "1001100111111100111", 33 => "1111110101010110100", 
    34 => "1111101101011100110", 35 => "1111101100101100100", 
    36 => "1111011001001000111", 37 => "1111110100010111110", 
    38 => "1111101010100010100", 39 => "1111110110110100110", 
    40 => "1111110001011001010", 41 => "1111110111000010000", 
    42 => "1111110001110011011", 43 => "0000000010000100101", 
    44 => "0000001100110110110", 45 => "1111010010011010110", 
    46 => "1111010111100111011", 47 => "1111100110010111101", 
    48 => "0000010101010111101", 49 => "0000000111101101110", 
    50 => "1111010010101011011", 51 => "0000001100010100011", 
    52 => "0000010110111001010", 53 => "0000110011011010001", 
    54 => "0000111011110010111", 55 => "0000100010100010000", 
    56 => "1111100011100001110", 57 => "0000001111001110110", 
    58 => "1111111000010100100", 59 => "1111101100110100011", 
    60 => "1111110000011000011", 61 => "0000100101001101110", 
    62 => "1111101110101110101", 63 => "0001011110100110111", 
    64 => "0000001110100000010", 65 => "0000010101011111001", 
    66 => "1111110011000100110", 67 => "0000000110111011110", 
    68 => "0001100011110100011", 69 => "1111101100110101000", 
    70 => "1011001100111110011", 71 => "0000001111001000111", 
    72 => "0000001001111000011", 73 => "0000011011101111100", 
    74 => "0000000010111000001", 75 => "1111100110011101000", 
    76 => "0000100010100000011", 77 => "0000010001000011111", 
    78 => "1111110110010100000", 79 => "1111101101111001100", 
    80 => "0000001000101101000", 81 => "1111111101010100111", 
    82 => "1111011111100101010", 83 => "1111000100000100100", 
    84 => "1111101001000001110", 85 => "1111111011111100110", 
    86 => "0000001100011101100", 87 => "1111110000101100010", 
    88 => "1111110001111000011", 89 => "1111110101010101100", 
    90 => "1111110101111101110", 91 => "1111001101111010001", 
    92 => "0000000101000000111", 93 => "0000000110110111001", 
    94 => "1111110011000001010", 95 => "1111110001100011011", 
    96 => "1111111011011100001", 97 => "1111110101011110000", 
    98 => "1111110011101000110", 99 => "1111110111011010010", 
    100 => "0000010100011100101", 101 => "0000010011011001111", 
    102 => "1111110001000000011", 103 => "1111001111010011111", 
    104 => "0000000000010100010", 105 => "1111101001111010101", 
    106 => "0000011001001010100", 107 => "0000001110000100000", 
    108 => "1111100101000001101", 109 => "1110011011011001101", 
    110 => "0000001010100011000", 111 => "0000100011010110101", 
    112 => "1111101111110111101", 113 => "1111101010100100111", 
    114 => "0001011111000000011", 115 => "1111110010011100010", 
    116 => "1111111001111010111", 117 => "1111101100011001101", 
    118 => "0000001111111011110", 119 => "0000001111000011101", 
    120 => "1111110010000111011", 121 => "1111101100101000011", 
    122 => "0000011010010110110", 123 => "0000001011100011100", 
    124 => "1111100111000010000", 125 => "1110111110001111010", 
    126 => "0000011101011000001", 127 => "1111100111111001011" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Thresholding_Batch_1_Thresholding_BatcdEe is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Thresholding_Batch_1_Thresholding_BatcdEe is
    component Thresholding_Batch_1_Thresholding_BatcdEe_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Thresholding_Batch_1_Thresholding_BatcdEe_rom_U :  component Thresholding_Batch_1_Thresholding_BatcdEe_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


