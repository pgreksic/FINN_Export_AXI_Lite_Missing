-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Thresholding_Batch_1_Thresholding_BatckbM_rom is 
    generic(
             DWIDTH     : integer := 19; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Thresholding_Batch_1_Thresholding_BatckbM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000111101000111", 1 => "0000010001110000101", 
    2 => "0000001110100011000", 3 => "0000010110011011111", 
    4 => "0000010110000001101", 5 => "0000001111110011110", 
    6 => "1111111100011101100", 7 => "0000000011110001010", 
    8 => "1111101111000100111", 9 => "1111101011111010010", 
    10 => "0000011110111111100", 11 => "0000001101110001111", 
    12 => "0000000111110110010", 13 => "1111111101101100111", 
    14 => "0000010110010001101", 15 => "1111101000110010000", 
    16 => "1111110011011000000", 17 => "0000010100100001001", 
    18 => "0000010001000001001", 19 => "0000001110110000100", 
    20 => "1111100010001010011", 21 => "0001000111100100011", 
    22 => "1111001000001011100", 23 => "1111101101010111100", 
    24 => "0000011011011011101", 25 => "0000010001011001101", 
    26 => "1111111000100110001", 27 => "0000111001000000000", 
    28 => "1111100001100001111", 29 => "0000010001101011001", 
    30 => "1111011100101110100", 31 => "1111111101101001111", 
    32 => "1010101111111010111", 33 => "1111111000110110110", 
    34 => "1111110000001011001", 35 => "1111101111111011100", 
    36 => "1111100000000111101", 37 => "1111110111001111011", 
    38 => "1111101100100101010", 39 => "1111111001000101110", 
    40 => "1111110010111000001", 41 => "1111111000101001000", 
    42 => "1111110011111001010", 43 => "0000000101010111000", 
    44 => "0000011010110001010", 45 => "1111011001100111010", 
    46 => "1111011010101001111", 47 => "1111101010100111010", 
    48 => "0000011001111000011", 49 => "0000001010111011101", 
    50 => "1111011001100000011", 51 => "0000001101011101100", 
    52 => "0000011000110101010", 53 => "0001110001010000111", 
    54 => "0001000011011011001", 55 => "0000100101100010100", 
    56 => "1111101000100001001", 57 => "0000011010111010100", 
    58 => "1111111011100000110", 59 => "1111110000000110111", 
    60 => "1111110100010111101", 61 => "0000101000010011100", 
    62 => "1111110010111001100", 63 => "0010010010001101111", 
    64 => "0000010001010010111", 65 => "0000011111100110010", 
    66 => "1111110100101111100", 67 => "0000000111110001010", 
    68 => "0001111000011000110", 69 => "1111101111001100101", 
    70 => "1100000101011010110", 71 => "0000011111101010000", 
    72 => "0000010000100011101", 73 => "0000011101111000000", 
    74 => "0000000110011110000", 75 => "1111101010111000000", 
    76 => "0000100110101000001", 77 => "0000010010000100111", 
    78 => "1111111001000001000", 79 => "1111110000101100001", 
    80 => "0000001001101101100", 81 => "1111111111001011010", 
    82 => "1111100101011111011", 83 => "1111001011011010010", 
    84 => "1111101110100001111", 85 => "1111111111000100001", 
    86 => "0000001110101001101", 87 => "1111110010001110000", 
    88 => "1111110100111110000", 89 => "1111110110010110100", 
    90 => "1111110111101100010", 91 => "1111011000100001011", 
    92 => "0000001000010111000", 93 => "0000001000101011101", 
    94 => "1111110100111000000", 95 => "1111110011111111011", 
    96 => "1111111101111011001", 97 => "1111111001001000100", 
    98 => "1111110111000011100", 99 => "1111111001000001101", 
    100 => "0000010111011100111", 101 => "0000101000111110100", 
    102 => "1111110011010101101", 103 => "1111011000001001000", 
    104 => "0000000010111010111", 105 => "1111101101111101001", 
    106 => "0000110000001001000", 107 => "0000001111010011101", 
    108 => "1111100111110010110", 109 => "1110111000000100010", 
    110 => "0000001101000000110", 111 => "0000110110110001101", 
    112 => "1111110010100001011", 113 => "1111110011100100011", 
    114 => "0010100000101111001", 115 => "1111110101001011110", 
    116 => "1111111100010010110", 117 => "1111110001010000011", 
    118 => "0000010010010111100", 119 => "0000010010111010001", 
    120 => "1111110101000100101", 121 => "1111101111111011111", 
    122 => "0000011100101100111", 123 => "0000010100110010110", 
    124 => "1111101010000100110", 125 => "1111001000010001001", 
    126 => "0000110001001011011", 127 => "1111110000011011001" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Thresholding_Batch_1_Thresholding_BatckbM is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Thresholding_Batch_1_Thresholding_BatckbM is
    component Thresholding_Batch_1_Thresholding_BatckbM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Thresholding_Batch_1_Thresholding_BatckbM_rom_U :  component Thresholding_Batch_1_Thresholding_BatckbM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


