-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Thresholding_Batch_1_Thresholding_Batcibs_rom is 
    generic(
             DWIDTH     : integer := 19; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Thresholding_Batch_1_Thresholding_Batcibs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000110110111101", 1 => "0000010000110111101", 
    2 => "0000001110001100010", 3 => "0000010101111111111", 
    4 => "0000010100000001110", 5 => "0000001110100000010", 
    6 => "1111111011111011100", 7 => "0000000010110101100", 
    8 => "1111101100010100100", 9 => "1111101011011100010", 
    10 => "0000011101100101001", 11 => "0000001101100001001", 
    12 => "0000000111011101011", 13 => "1111111101001000111", 
    14 => "0000010100001100110", 15 => "1111100110110100111", 
    16 => "1111110010111010110", 17 => "0000010011110110001", 
    18 => "0000010000100101101", 19 => "0000001110001110101", 
    20 => "1111011111011010000", 21 => "0000111100001100011", 
    22 => "1111000100100010101", 23 => "1111101100011011110", 
    24 => "0000010111000101100", 25 => "0000010000100010110", 
    26 => "1111111000000101111", 27 => "0000110111011001010", 
    28 => "1111100000001010111", 29 => "0000010001011100011", 
    30 => "1111010110111011010", 31 => "1111111101010110011", 
    32 => "1010011011010110111", 33 => "1111110111110110110", 
    34 => "1111101111011001010", 35 => "1111101111000000010", 
    36 => "1111011110001000000", 37 => "1111110110011011000", 
    38 => "1111101011111111111", 39 => "1111111000011100011", 
    40 => "1111110010011101000", 41 => "1111111000001011101", 
    42 => "1111110011010011000", 43 => "0000000100011010111", 
    44 => "0000010110110010111", 45 => "1111010111100011101", 
    46 => "1111011001110010010", 47 => "1111101001011001101", 
    48 => "0000011000100101111", 49 => "0000001010000000111", 
    50 => "1111010111100011100", 51 => "0000001101001000101", 
    52 => "0000011000010001111", 53 => "0001011111100101111", 
    54 => "0001000001001111101", 55 => "0000100100101011100", 
    56 => "1111100111000101111", 57 => "0000010111100100111", 
    58 => "1111111010100110011", 59 => "1111101111001010110", 
    60 => "1111110011001110110", 61 => "0000100111011011000", 
    62 => "1111110001101101010", 63 => "0010000011011110001", 
    64 => "0000010000011111111", 65 => "0000011100101101011", 
    66 => "1111110100010001000", 67 => "0000000111100010000", 
    68 => "0001110010100000101", 69 => "1111101110100001010", 
    70 => "1011110101010010101", 71 => "0000011010111100000", 
    72 => "0000001110101001100", 73 => "0000011101010001000", 
    74 => "0000000101011100010", 75 => "1111101001100111001", 
    76 => "0000100101011100110", 77 => "0000010001110010010", 
    78 => "1111111000001111101", 79 => "1111101111111001000", 
    80 => "0000001001011011001", 81 => "1111111110101001011", 
    82 => "1111100011110011010", 83 => "1111001001010100000", 
    84 => "1111101100111101010", 85 => "1111111110001011001", 
    86 => "0000001110000001101", 87 => "1111110001110010000", 
    88 => "1111110100000101100", 89 => "1111110110000100000", 
    90 => "1111110111001100110", 91 => "1111010101011111010", 
    92 => "0000000111011001111", 93 => "0000001000001010011", 
    94 => "1111110100010110000", 95 => "1111110011010010110", 
    96 => "1111111101001101110", 97 => "1111111000000101100", 
    98 => "1111110110000101000", 99 => "1111111000100100001", 
    100 => "0000010110100110000", 101 => "0000100010110100000", 
    102 => "1111110010101011000", 103 => "1111010101100111100", 
    104 => "0000000010001011010", 105 => "1111101100110011010", 
    106 => "0000101001100100111", 107 => "0000001110111100111", 
    108 => "1111100111000000001", 109 => "1110101111111000001", 
    110 => "0000001100010011101", 111 => "0000110001001110100", 
    112 => "1111110001110000111", 113 => "1111110001000000000", 
    114 => "0010001101111101001", 115 => "1111110100011001101", 
    116 => "1111111011100111011", 117 => "1111101111110111101", 
    118 => "0000010001101011000", 119 => "0000010001110011101", 
    120 => "1111110100001110101", 121 => "1111101110111111100", 
    122 => "0000011100000010000", 123 => "0000010010001001111", 
    124 => "1111101001001101001", 125 => "1111000101011001101", 
    126 => "0000101011100001010", 127 => "1111101101111111010" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Thresholding_Batch_1_Thresholding_Batcibs is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Thresholding_Batch_1_Thresholding_Batcibs is
    component Thresholding_Batch_1_Thresholding_Batcibs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Thresholding_Batch_1_Thresholding_Batcibs_rom_U :  component Thresholding_Batch_1_Thresholding_Batcibs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


