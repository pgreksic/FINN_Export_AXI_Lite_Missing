-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Thresholding_Batch_1_Thresholding_Batch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_V_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_V_V_TVALID : IN STD_LOGIC;
    in_V_V_TREADY : OUT STD_LOGIC;
    out_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_V_TVALID : OUT STD_LOGIC;
    out_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of Thresholding_Batch_1_Thresholding_Batch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_3200 : STD_LOGIC_VECTOR (13 downto 0) := "11001000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal threshs_m_thresholds_13_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_13_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_13_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal threshs_m_thresholds_12_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_12_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_12_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal threshs_m_thresholds_7_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_7_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_7_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal threshs_m_thresholds_6_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_6_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_6_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal threshs_m_thresholds_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_5_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_5_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal threshs_m_thresholds_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_4_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_4_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal threshs_m_thresholds_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_3_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_3_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal threshs_m_thresholds_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_2_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_2_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal threshs_m_thresholds_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_1_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_1_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal threshs_m_thresholds_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal threshs_m_thresholds_11_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_11_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_11_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal threshs_m_thresholds_10_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_10_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_10_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal threshs_m_thresholds_9_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_9_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_9_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal threshs_m_thresholds_8_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal threshs_m_thresholds_8_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_8_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal in_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln221_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln221_reg_720 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_720_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal nf_assign_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_288 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_305_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_1_reg_729 : STD_LOGIC_VECTOR (23 downto 0);
    signal nf_1_fu_341_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln899_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_reg_822 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_2_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_2_reg_832 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_3_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_3_reg_837 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_4_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_4_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_5_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_5_reg_847 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_6_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_6_reg_852 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_7_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_7_reg_857 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_8_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_8_reg_862 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_9_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_9_reg_867 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_10_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_10_reg_872 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_11_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_11_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_12_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_12_reg_882 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_13_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_13_reg_887 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal zext_ln142_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal nf_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln235_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln142_fu_349_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln142_1_fu_358_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln142_2_fu_367_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln142_3_fu_376_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln142_4_fu_385_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln142_5_fu_394_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln142_6_fu_403_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln142_7_fu_412_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln899_7_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln142_8_fu_427_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln899_8_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln142_9_fu_442_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln899_9_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln142_10_fu_457_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln142_11_fu_466_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln142_12_fu_475_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln142_13_fu_484_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln899_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_1_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_2_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_3_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_4_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_5_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_6_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_10_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_11_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_12_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_13_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln142_1_fu_511_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln142_2_fu_520_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_fu_605_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln700_1_fu_611_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln700_fu_498_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln142_3_fu_529_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln142_4_fu_538_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_2_fu_621_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln142_5_fu_547_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln142_6_fu_556_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_3_fu_631_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln700_3_fu_637_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_2_fu_627_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln700_4_fu_641_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_4_fu_647_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_1_fu_615_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln142_8_fu_563_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln142_9_fu_566_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_6_fu_657_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln142_7_fu_560_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_7_fu_663_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln142_10_fu_574_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln142_11_fu_583_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_8_fu_673_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln142_12_fu_592_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln700_fu_601_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_9_fu_683_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln700_7_fu_689_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_6_fu_679_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln700_10_fu_693_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_5_fu_669_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln700_11_fu_699_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_8_fu_705_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_5_fu_651_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_V_fu_709_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Thresholding_Batch_1_Thresholding_Batcbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Thresholding_Batch_1_Thresholding_Batccud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Thresholding_Batch_1_Thresholding_BatcdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Thresholding_Batch_1_Thresholding_BatceOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Thresholding_Batch_1_Thresholding_BatcfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Thresholding_Batch_1_Thresholding_Batcg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Thresholding_Batch_1_Thresholding_Batchbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Thresholding_Batch_1_Thresholding_Batcibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Thresholding_Batch_1_Thresholding_BatcjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Thresholding_Batch_1_Thresholding_BatckbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Thresholding_Batch_1_Thresholding_BatclbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Thresholding_Batch_1_Thresholding_Batcmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Thresholding_Batch_1_Thresholding_Batcncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Thresholding_Batch_1_Thresholding_Batcocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;



begin
    threshs_m_thresholds_13_U : component Thresholding_Batch_1_Thresholding_Batcbkb
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_13_address0,
        ce0 => threshs_m_thresholds_13_ce0,
        q0 => threshs_m_thresholds_13_q0);

    threshs_m_thresholds_12_U : component Thresholding_Batch_1_Thresholding_Batccud
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_12_address0,
        ce0 => threshs_m_thresholds_12_ce0,
        q0 => threshs_m_thresholds_12_q0);

    threshs_m_thresholds_7_U : component Thresholding_Batch_1_Thresholding_BatcdEe
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_7_address0,
        ce0 => threshs_m_thresholds_7_ce0,
        q0 => threshs_m_thresholds_7_q0);

    threshs_m_thresholds_6_U : component Thresholding_Batch_1_Thresholding_BatceOg
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_6_address0,
        ce0 => threshs_m_thresholds_6_ce0,
        q0 => threshs_m_thresholds_6_q0);

    threshs_m_thresholds_5_U : component Thresholding_Batch_1_Thresholding_BatcfYi
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_5_address0,
        ce0 => threshs_m_thresholds_5_ce0,
        q0 => threshs_m_thresholds_5_q0);

    threshs_m_thresholds_4_U : component Thresholding_Batch_1_Thresholding_Batcg8j
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_4_address0,
        ce0 => threshs_m_thresholds_4_ce0,
        q0 => threshs_m_thresholds_4_q0);

    threshs_m_thresholds_3_U : component Thresholding_Batch_1_Thresholding_Batchbi
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_3_address0,
        ce0 => threshs_m_thresholds_3_ce0,
        q0 => threshs_m_thresholds_3_q0);

    threshs_m_thresholds_2_U : component Thresholding_Batch_1_Thresholding_Batcibs
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_2_address0,
        ce0 => threshs_m_thresholds_2_ce0,
        q0 => threshs_m_thresholds_2_q0);

    threshs_m_thresholds_1_U : component Thresholding_Batch_1_Thresholding_BatcjbC
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_1_address0,
        ce0 => threshs_m_thresholds_1_ce0,
        q0 => threshs_m_thresholds_1_q0);

    threshs_m_thresholds_U : component Thresholding_Batch_1_Thresholding_BatckbM
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_address0,
        ce0 => threshs_m_thresholds_ce0,
        q0 => threshs_m_thresholds_q0);

    threshs_m_thresholds_11_U : component Thresholding_Batch_1_Thresholding_BatclbW
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_11_address0,
        ce0 => threshs_m_thresholds_11_ce0,
        q0 => threshs_m_thresholds_11_q0);

    threshs_m_thresholds_10_U : component Thresholding_Batch_1_Thresholding_Batcmb6
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_10_address0,
        ce0 => threshs_m_thresholds_10_ce0,
        q0 => threshs_m_thresholds_10_q0);

    threshs_m_thresholds_9_U : component Thresholding_Batch_1_Thresholding_Batcncg
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_9_address0,
        ce0 => threshs_m_thresholds_9_ce0,
        q0 => threshs_m_thresholds_9_q0);

    threshs_m_thresholds_8_U : component Thresholding_Batch_1_Thresholding_Batcocq
    generic map (
        DataWidth => 19,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_8_address0,
        ce0 => threshs_m_thresholds_8_ce0,
        q0 => threshs_m_thresholds_8_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln221_fu_299_p2 = ap_const_lv1_0))) then 
                i_0_reg_288 <= i_fu_305_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_288 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    nf_assign_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln221_fu_299_p2 = ap_const_lv1_0))) then 
                nf_assign_reg_277 <= nf_1_fu_341_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nf_assign_reg_277 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln221_reg_720 <= icmp_ln221_fu_299_p2;
                icmp_ln221_reg_720_pp0_iter1_reg <= icmp_ln221_reg_720;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln221_reg_720 = ap_const_lv1_0))) then
                icmp_ln899_10_reg_872 <= icmp_ln899_10_fu_461_p2;
                icmp_ln899_11_reg_877 <= icmp_ln899_11_fu_470_p2;
                icmp_ln899_12_reg_882 <= icmp_ln899_12_fu_479_p2;
                icmp_ln899_13_reg_887 <= icmp_ln899_13_fu_488_p2;
                icmp_ln899_1_reg_827 <= icmp_ln899_1_fu_362_p2;
                icmp_ln899_2_reg_832 <= icmp_ln899_2_fu_371_p2;
                icmp_ln899_3_reg_837 <= icmp_ln899_3_fu_380_p2;
                icmp_ln899_4_reg_842 <= icmp_ln899_4_fu_389_p2;
                icmp_ln899_5_reg_847 <= icmp_ln899_5_fu_398_p2;
                icmp_ln899_6_reg_852 <= icmp_ln899_6_fu_407_p2;
                icmp_ln899_reg_822 <= icmp_ln899_fu_353_p2;
                xor_ln899_7_reg_857 <= xor_ln899_7_fu_421_p2;
                xor_ln899_8_reg_862 <= xor_ln899_8_fu_436_p2;
                xor_ln899_9_reg_867 <= xor_ln899_9_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln221_fu_299_p2 = ap_const_lv1_0))) then
                tmp_V_1_reg_729 <= in_V_V_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln221_fu_299_p2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln221_fu_299_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln221_fu_299_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln700_10_fu_693_p2 <= std_logic_vector(unsigned(zext_ln700_7_fu_689_p1) + unsigned(zext_ln700_6_fu_679_p1));
    add_ln700_11_fu_699_p2 <= std_logic_vector(unsigned(add_ln700_10_fu_693_p2) + unsigned(zext_ln700_5_fu_669_p1));
    add_ln700_1_fu_615_p2 <= std_logic_vector(unsigned(zext_ln700_1_fu_611_p1) + unsigned(select_ln700_fu_498_p3));
    add_ln700_2_fu_621_p2 <= std_logic_vector(unsigned(zext_ln142_3_fu_529_p1) + unsigned(zext_ln142_4_fu_538_p1));
    add_ln700_3_fu_631_p2 <= std_logic_vector(unsigned(zext_ln142_5_fu_547_p1) + unsigned(zext_ln142_6_fu_556_p1));
    add_ln700_4_fu_641_p2 <= std_logic_vector(unsigned(zext_ln700_3_fu_637_p1) + unsigned(zext_ln700_2_fu_627_p1));
    add_ln700_5_fu_651_p2 <= std_logic_vector(unsigned(zext_ln700_4_fu_647_p1) + unsigned(add_ln700_1_fu_615_p2));
    add_ln700_6_fu_657_p2 <= std_logic_vector(unsigned(zext_ln142_8_fu_563_p1) + unsigned(zext_ln142_9_fu_566_p1));
    add_ln700_7_fu_663_p2 <= std_logic_vector(unsigned(add_ln700_6_fu_657_p2) + unsigned(zext_ln142_7_fu_560_p1));
    add_ln700_8_fu_673_p2 <= std_logic_vector(unsigned(zext_ln142_10_fu_574_p1) + unsigned(zext_ln142_11_fu_583_p1));
    add_ln700_9_fu_683_p2 <= std_logic_vector(unsigned(zext_ln142_12_fu_592_p1) + unsigned(zext_ln700_fu_601_p1));
    add_ln700_fu_605_p2 <= std_logic_vector(unsigned(zext_ln142_1_fu_511_p1) + unsigned(zext_ln142_2_fu_520_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_TVALID, ap_enable_reg_pp0_iter0, icmp_ln221_fu_299_p2)
    begin
                ap_block_pp0_stage0_01001 <= ((in_V_V_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln221_fu_299_p2 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_TVALID, ap_enable_reg_pp0_iter0, icmp_ln221_fu_299_p2, ap_enable_reg_pp0_iter2, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)) or ((in_V_V_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln221_fu_299_p2 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_TVALID, ap_enable_reg_pp0_iter0, icmp_ln221_fu_299_p2, ap_enable_reg_pp0_iter2, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)) or ((in_V_V_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln221_fu_299_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(in_V_V_TVALID, icmp_ln221_fu_299_p2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((in_V_V_TVALID = ap_const_logic_0) and (icmp_ln221_fu_299_p2 = ap_const_lv1_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(out_V_V_TREADY, icmp_ln221_reg_720_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((out_V_V_TREADY = ap_const_logic_0) and (icmp_ln221_reg_720_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln221_fu_299_p2)
    begin
        if ((icmp_ln221_fu_299_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_305_p2 <= std_logic_vector(unsigned(i_0_reg_288) + unsigned(ap_const_lv14_1));
    icmp_ln221_fu_299_p2 <= "1" when (i_0_reg_288 = ap_const_lv14_3200) else "0";
    icmp_ln235_fu_335_p2 <= "1" when (nf_fu_329_p2 = ap_const_lv32_80) else "0";
    icmp_ln899_10_fu_461_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_10_fu_457_p1)) else "0";
    icmp_ln899_11_fu_470_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_11_fu_466_p1)) else "0";
    icmp_ln899_12_fu_479_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_12_fu_475_p1)) else "0";
    icmp_ln899_13_fu_488_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_13_fu_484_p1)) else "0";
    icmp_ln899_1_fu_362_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_1_fu_358_p1)) else "0";
    icmp_ln899_2_fu_371_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_2_fu_367_p1)) else "0";
    icmp_ln899_3_fu_380_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_3_fu_376_p1)) else "0";
    icmp_ln899_4_fu_389_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_4_fu_385_p1)) else "0";
    icmp_ln899_5_fu_398_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_5_fu_394_p1)) else "0";
    icmp_ln899_6_fu_407_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_6_fu_403_p1)) else "0";
    icmp_ln899_7_fu_416_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_7_fu_412_p1)) else "0";
    icmp_ln899_8_fu_431_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_8_fu_427_p1)) else "0";
    icmp_ln899_9_fu_446_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_9_fu_442_p1)) else "0";
    icmp_ln899_fu_353_p2 <= "1" when (signed(tmp_V_1_reg_729) < signed(sext_ln142_fu_349_p1)) else "0";

    in_V_V_TDATA_blk_n_assign_proc : process(in_V_V_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln221_fu_299_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln221_fu_299_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_V_V_TDATA_blk_n <= in_V_V_TVALID;
        else 
            in_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln221_fu_299_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln221_fu_299_p2 = ap_const_lv1_0))) then 
            in_V_V_TREADY <= ap_const_logic_1;
        else 
            in_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    nf_1_fu_341_p3 <= 
        ap_const_lv32_0 when (icmp_ln235_fu_335_p2(0) = '1') else 
        nf_fu_329_p2;
    nf_fu_329_p2 <= std_logic_vector(unsigned(nf_assign_reg_277) + unsigned(ap_const_lv32_1));
    out_V_V_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_709_p2),8));

    out_V_V_TDATA_blk_n_assign_proc : process(out_V_V_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln221_reg_720_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln221_reg_720_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            out_V_V_TDATA_blk_n <= out_V_V_TREADY;
        else 
            out_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_V_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln221_reg_720_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln221_reg_720_pp0_iter1_reg = ap_const_lv1_0))) then 
            out_V_V_TVALID <= ap_const_logic_1;
        else 
            out_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    select_ln700_fu_498_p3 <= 
        ap_const_lv4_A when (xor_ln899_fu_493_p2(0) = '1') else 
        ap_const_lv4_9;
        sext_ln142_10_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_11_q0),24));

        sext_ln142_11_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_10_q0),24));

        sext_ln142_12_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_9_q0),24));

        sext_ln142_13_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_8_q0),24));

        sext_ln142_1_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_12_q0),24));

        sext_ln142_2_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_7_q0),24));

        sext_ln142_3_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_6_q0),24));

        sext_ln142_4_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_5_q0),24));

        sext_ln142_5_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_4_q0),24));

        sext_ln142_6_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_3_q0),24));

        sext_ln142_7_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_2_q0),24));

        sext_ln142_8_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_1_q0),24));

        sext_ln142_9_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_q0),24));

        sext_ln142_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshs_m_thresholds_13_q0),24));

    threshs_m_thresholds_10_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_10_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_11_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_11_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_12_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_12_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_13_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_13_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_1_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_1_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_2_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_2_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_3_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_3_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_4_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_4_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_5_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_5_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_6_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_6_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_7_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_7_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_8_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_8_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_9_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_9_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_address0 <= zext_ln142_fu_311_p1(7 - 1 downto 0);

    threshs_m_thresholds_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            threshs_m_thresholds_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_V_fu_709_p2 <= std_logic_vector(unsigned(zext_ln700_8_fu_705_p1) + unsigned(add_ln700_5_fu_651_p2));
    xor_ln899_10_fu_569_p2 <= (icmp_ln899_10_reg_872 xor ap_const_lv1_1);
    xor_ln899_11_fu_578_p2 <= (icmp_ln899_11_reg_877 xor ap_const_lv1_1);
    xor_ln899_12_fu_587_p2 <= (icmp_ln899_12_reg_882 xor ap_const_lv1_1);
    xor_ln899_13_fu_596_p2 <= (icmp_ln899_13_reg_887 xor ap_const_lv1_1);
    xor_ln899_1_fu_506_p2 <= (icmp_ln899_1_reg_827 xor ap_const_lv1_1);
    xor_ln899_2_fu_515_p2 <= (icmp_ln899_2_reg_832 xor ap_const_lv1_1);
    xor_ln899_3_fu_524_p2 <= (icmp_ln899_3_reg_837 xor ap_const_lv1_1);
    xor_ln899_4_fu_533_p2 <= (icmp_ln899_4_reg_842 xor ap_const_lv1_1);
    xor_ln899_5_fu_542_p2 <= (icmp_ln899_5_reg_847 xor ap_const_lv1_1);
    xor_ln899_6_fu_551_p2 <= (icmp_ln899_6_reg_852 xor ap_const_lv1_1);
    xor_ln899_7_fu_421_p2 <= (icmp_ln899_7_fu_416_p2 xor ap_const_lv1_1);
    xor_ln899_8_fu_436_p2 <= (icmp_ln899_8_fu_431_p2 xor ap_const_lv1_1);
    xor_ln899_9_fu_451_p2 <= (icmp_ln899_9_fu_446_p2 xor ap_const_lv1_1);
    xor_ln899_fu_493_p2 <= (icmp_ln899_reg_822 xor ap_const_lv1_1);
    zext_ln142_10_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_10_fu_569_p2),2));
    zext_ln142_11_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_11_fu_578_p2),2));
    zext_ln142_12_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_12_fu_587_p2),2));
    zext_ln142_1_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_1_fu_506_p2),2));
    zext_ln142_2_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_2_fu_515_p2),2));
    zext_ln142_3_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_3_fu_524_p2),2));
    zext_ln142_4_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_4_fu_533_p2),2));
    zext_ln142_5_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_5_fu_542_p2),2));
    zext_ln142_6_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_6_fu_551_p2),2));
    zext_ln142_7_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_7_reg_857),2));
    zext_ln142_8_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_8_reg_862),2));
    zext_ln142_9_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_9_reg_867),2));
    zext_ln142_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nf_assign_reg_277),64));
    zext_ln700_1_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_fu_605_p2),4));
    zext_ln700_2_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_2_fu_621_p2),3));
    zext_ln700_3_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_3_fu_631_p2),3));
    zext_ln700_4_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_4_fu_641_p2),4));
    zext_ln700_5_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_7_fu_663_p2),3));
    zext_ln700_6_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_8_fu_673_p2),3));
    zext_ln700_7_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_9_fu_683_p2),3));
    zext_ln700_8_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_11_fu_699_p2),4));
    zext_ln700_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_13_fu_596_p2),2));
end behav;
