-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Thresholding_Batch_1_Thresholding_Batcocq_rom is 
    generic(
             DWIDTH     : integer := 19; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Thresholding_Batch_1_Thresholding_Batcocq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000001001001011100", 1 => "0000010011100010101", 
    2 => "0000001111010000100", 3 => "0000010111010100000", 
    4 => "0000011010000001011", 5 => "0000010010011010110", 
    6 => "1111111101100001100", 7 => "0000000101101000100", 
    8 => "1111110100100101110", 9 => "1111101100110110001", 
    10 => "0000100001110100100", 11 => "0000001110010011100", 
    12 => "0000001000100111110", 13 => "1111111110110100110", 
    14 => "0000011010011011011", 15 => "1111101100101100001", 
    16 => "1111110100010010100", 17 => "0000010101110111001", 
    18 => "0000010001110111111", 19 => "0000001111110100001", 
    20 => "1111100111101011010", 21 => "0001011110010100101", 
    22 => "1111001111011101001", 23 => "1111101111001111001", 
    24 => "0000100100000111111", 25 => "0000010011000111100", 
    26 => "1111111001100110111", 27 => "0000111100001101101", 
    28 => "1111100100001111111", 29 => "0000010010001000100", 
    30 => "1111101000010100111", 31 => "1111111110010000111", 
    32 => "1011011001000010111", 33 => "1111111010110111000", 
    34 => "1111110001101110110", 35 => "1111110001110001110", 
    36 => "1111100100000110111", 37 => "1111111000111000011", 
    38 => "1111101101110000000", 39 => "1111111010011000101", 
    40 => "1111110011101110010", 41 => "1111111001100011111", 
    42 => "1111110101000101110", 43 => "0000000111001111010", 
    44 => "0000100010101110010", 45 => "1111011101101110010", 
    46 => "1111011100011001000", 47 => "1111101101000010011", 
    48 => "0000011100011101100", 49 => "0000001100110001011", 
    50 => "1111011101011010000", 51 => "0000001110000111011", 
    52 => "0000011001111100001", 53 => "0010010100100111001", 
    54 => "0001000111110010001", 55 => "0000100111010000011", 
    56 => "1111101011010111100", 57 => "0000100001100101110", 
    58 => "1111111101010101011", 59 => "1111110001111111010", 
    60 => "1111110110101001100", 61 => "0000101010000100101", 
    62 => "1111110101010010000", 63 => "0010101111101101010", 
    64 => "0000010010111001000", 65 => "0000100101011000000", 
    66 => "1111110101101100101", 67 => "0000001000001111111", 
    68 => "0010000100001000111", 69 => "1111110000100011010", 
    70 => "1100100101101011000", 71 => "0000101001000110001", 
    72 => "0000010100010111110", 73 => "0000011111000110000", 
    74 => "0000001000100001011", 75 => "1111101101011001101", 
    76 => "0000101000111110110", 77 => "0000010010101010000", 
    78 => "1111111010100100000", 79 => "1111110010010010001", 
    80 => "0000001010010010011", 81 => "0000000000001110111", 
    82 => "1111101000110111011", 83 => "1111001111100110101", 
    84 => "1111110001101011000", 85 => "0000000000110101111", 
    86 => "0000001111111001110", 87 => "1111110011000101111", 
    88 => "1111110110101110111", 89 => "1111110110111011101", 
    90 => "1111111000101011100", 91 => "1111011110100101100", 
    92 => "0000001010010001011", 93 => "0000001001101110001", 
    94 => "1111110101111011110", 95 => "1111110101011000100", 
    96 => "1111111111010110000", 97 => "1111111011001110100", 
    98 => "1111111001000000101", 99 => "1111111001111100110", 
    100 => "0000011001001010111", 101 => "0000110101010011011", 
    102 => "1111110100101010111", 103 => "1111011101001100000", 
    104 => "0000000100011010000", 105 => "1111110000010000110", 
    106 => "0000111101010001010", 107 => "0000010000000001000", 
    108 => "1111101001011000000", 109 => "1111001000011100101", 
    110 => "0000001110011010111", 111 => "0001000001110111110", 
    112 => "1111110100000010011", 113 => "1111111000101101011", 
    114 => "0011000110010011000", 115 => "1111110110101111111", 
    116 => "1111111101101001100", 117 => "1111110100000010000", 
    118 => "0000010011110000100", 119 => "0000010101000111000", 
    120 => "1111110110110000111", 121 => "1111110001110100110", 
    122 => "0000011110000010101", 123 => "0000011010000100101", 
    124 => "1111101011110100001", 125 => "1111001101111111111", 
    126 => "0000111100011111100", 127 => "1111110101010011000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Thresholding_Batch_1_Thresholding_Batcocq is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Thresholding_Batch_1_Thresholding_Batcocq is
    component Thresholding_Batch_1_Thresholding_Batcocq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Thresholding_Batch_1_Thresholding_Batcocq_rom_U :  component Thresholding_Batch_1_Thresholding_Batcocq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


