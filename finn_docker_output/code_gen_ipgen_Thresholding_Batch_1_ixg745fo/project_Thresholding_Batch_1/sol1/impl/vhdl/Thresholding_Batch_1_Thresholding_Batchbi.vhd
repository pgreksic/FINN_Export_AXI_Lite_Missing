-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Thresholding_Batch_1_Thresholding_Batchbi_rom is 
    generic(
             DWIDTH     : integer := 19; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Thresholding_Batch_1_Thresholding_Batchbi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000110011111000", 1 => "0000010000011011001", 
    2 => "0000001110000000111", 3 => "0000010101110001111", 
    4 => "0000010011000001111", 5 => "0000001101110110100", 
    6 => "1111111011101010100", 7 => "0000000010010111110", 
    8 => "1111101010111100010", 9 => "1111101011001101011", 
    10 => "0000011100110111111", 11 => "0000001101011000101", 
    12 => "0000000111010001000", 13 => "1111111100110110111", 
    14 => "0000010011001010010", 15 => "1111100101110110011", 
    16 => "1111110010101100001", 17 => "0000010011100000101", 
    18 => "0000010000011000000", 19 => "0000001101111101110", 
    20 => "1111011110000001110", 21 => "0000110110100000010", 
    22 => "1111000010101110010", 23 => "1111101011111101111", 
    24 => "0000010100111010100", 25 => "0000010000000111010", 
    26 => "1111110111110101101", 27 => "0000110110100101110", 
    28 => "1111011111011111011", 29 => "0000010001010101000", 
    30 => "1111010100000001110", 31 => "1111111101001100101", 
    32 => "1010010001000100111", 33 => "1111110111010110101", 
    34 => "1111101111000000011", 35 => "1111101110100010110", 
    36 => "1111011101001000001", 37 => "1111110110000000110", 
    38 => "1111101011101101010", 39 => "1111111000000111101", 
    40 => "1111110010001111011", 41 => "1111110111111100111", 
    42 => "1111110010111111111", 43 => "0000000011111100111", 
    44 => "0000010100110011101", 45 => "1111010110100001111", 
    46 => "1111011001010110100", 47 => "1111101000110010111", 
    48 => "0000010111111100101", 49 => "0000001001100011011", 
    50 => "1111010110100101001", 51 => "0000001100111110001", 
    52 => "0000011000000000001", 53 => "0001010110110000010", 
    54 => "0001000000001001111", 55 => "0000100100010000000", 
    56 => "1111100110011000010", 57 => "0000010101111010000", 
    58 => "1111111010001001001", 59 => "1111101110101100101", 
    60 => "1111110010101010010", 61 => "0000100110111110110", 
    62 => "1111110001000111001", 63 => "0001111100000110010", 
    64 => "0000010000000110010", 65 => "0000011011010000111", 
    66 => "1111110100000001110", 67 => "0000000111011010010", 
    68 => "0001101111100100100", 69 => "1111101110001011101", 
    70 => "1011101101001110101", 71 => "0000011000100101000", 
    72 => "0000001101101100100", 73 => "0000011100111101100", 
    74 => "0000000100111011100", 75 => "1111101000111110110", 
    76 => "0000100100110111001", 77 => "0000010001101001000", 
    78 => "1111110111110110111", 79 => "1111101111011111100", 
    80 => "0000001001010001111", 81 => "1111111110011000100", 
    82 => "1111100010111101010", 83 => "1111001000010000111", 
    84 => "1111101100001011000", 85 => "1111111101101110101", 
    86 => "0000001101101101101", 87 => "1111110001100100001", 
    88 => "1111110011101001010", 89 => "1111110101111010101", 
    90 => "1111110110111100111", 91 => "1111010011111110010", 
    92 => "0000000110111011010", 93 => "0000000111111001110", 
    94 => "1111110100000101000", 95 => "1111110010111100100", 
    96 => "1111111100110111000", 97 => "1111110111100100000", 
    98 => "1111110101100101110", 99 => "1111111000010101011", 
    100 => "0000010110001010100", 101 => "0000011111101110110", 
    102 => "1111110010010101101", 103 => "1111010100010110111", 
    104 => "0000000001110011100", 105 => "1111101100001110011", 
    106 => "0000100110010010110", 107 => "0000001110110001100", 
    108 => "1111100110100110111", 109 => "1110101011110010000", 
    110 => "0000001011111101001", 111 => "0000101110011100111", 
    112 => "1111110001011000101", 113 => "1111101111101101110", 
    114 => "0010000100100100010", 115 => "1111110100000000100", 
    116 => "1111111011010001110", 117 => "1111101111001011001", 
    118 => "0000010001010100110", 119 => "0000010001010000100", 
    120 => "1111110011110011100", 121 => "1111101110100001010", 
    122 => "0000011011101100100", 123 => "0000010000110101011", 
    124 => "1111101000110001010", 125 => "1111000011111110000", 
    126 => "0000101000101100010", 127 => "1111101100110001010" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Thresholding_Batch_1_Thresholding_Batchbi is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Thresholding_Batch_1_Thresholding_Batchbi is
    component Thresholding_Batch_1_Thresholding_Batchbi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Thresholding_Batch_1_Thresholding_Batchbi_rom_U :  component Thresholding_Batch_1_Thresholding_Batchbi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


