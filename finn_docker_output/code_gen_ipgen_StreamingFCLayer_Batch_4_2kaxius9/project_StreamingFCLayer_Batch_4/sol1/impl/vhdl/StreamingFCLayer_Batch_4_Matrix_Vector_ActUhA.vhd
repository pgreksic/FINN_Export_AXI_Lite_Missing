-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActUhA_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActUhA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000001111101", 1 => "1111111000010010", 2 => "1111100101011101", 
    3 => "1111100000110001", 4 => "0000001100100010", 5 => "1111111011101001", 
    6 => "0000011011101100", 7 => "1111111110011011", 8 => "1111111011110001", 
    9 => "1111101001100010", 10 => "1111110000011101", 11 => "1111101100101101", 
    12 => "0000000000010111", 13 => "0000000000101001", 14 => "1111111111010001", 
    15 => "1100001000110000", 16 => "1111111010000111", 17 => "1111111010010110", 
    18 => "0000100110111000", 19 => "1111110010100011", 20 => "1111011101011000", 
    21 => "0000010000001111", 22 => "1111101110110101", 23 => "1011111011100001", 
    24 => "0000011100110000", 25 => "0000000110010000", 26 => "1111110000101011", 
    27 => "0000100000110101", 28 => "1111111111110010", 29 => "0000001000010110", 
    30 => "0111000000000001", 31 => "0000001010110000", 32 => "1111101110110101", 
    33 => "0000001000001110", 34 => "1111111001101001", 35 => "0000011101111111", 
    36 => "0000001101111000", 37 => "1111011101001011", 38 => "1110110000001100", 
    39 => "0111000000000001", 40 => "0000010001010110", 41 => "1111111000101100", 
    42 => "0000101100101001", 43 => "0000001111101000", 44 => "0000001011001001", 
    45 => "0000001100110111", 46 => "0000100010001001", 47 => "0000100111100100", 
    48 => "0000000000100000", 49 => "0000001110011100", 50 => "1111111100111001", 
    51 => "1111111011011111", 52 => "0000000000001011", 53 => "1111010110100111", 
    54 => "0000001010001011", 55 => "0000010010100110", 56 => "1111110011100000", 
    57 => "1111101001010010", 58 => "1111011000010010", 59 => "1111110000000100", 
    60 => "0000001000000010", 61 => "0000100011111110", 62 => "0000001101111010", 
    63 => "0000001001111110", 64 => "0000011101010111", 65 => "1111011111101111", 
    66 => "0000110011110110", 67 => "0000000010100010", 68 => "1111110100100000", 
    69 => "0000000110111001", 70 => "0000100100000111", 71 => "0000000111010010", 
    72 => "0000001010100100", 73 => "1111110110000011", 74 => "1111100110101000", 
    75 => "0000100001011110", 76 => "0000001001111100", 77 => "0000001110110101", 
    78 => "0000100001011010", 79 => "1111111011000001", 80 => "0000001001000001", 
    81 => "0000110000110101", 82 => "0000001000000011", 83 => "0000000010001011", 
    84 => "1111111110101000", 85 => "1111101011101111", 86 => "1111111111000100", 
    87 => "0000001100111010", 88 => "0000010001100011", 89 => "1110100010001010", 
    90 => "0000111010010110", 91 => "0000001100001001", 92 => "0000000000100000", 
    93 => "0000011011110011", 94 => "0000001011010010", 95 => "0001010111101100", 
    96 => "1110111110110110", 97 => "1110111101011010", 98 => "1111110101111100", 
    99 => "1111110011011111", 100 => "0010000010001000", 101 => "1111101001010000", 
    102 => "1111111110111010", 103 => "1111101001101111", 104 => "1111110100110111", 
    105 => "0000010001101010", 106 => "0000011001101110", 107 => "1111110101000000", 
    108 => "1111111111010101", 109 => "1111110100111110", 110 => "0000010101110100", 
    111 => "0000010110110001", 112 => "1111111000000001", 113 => "0000101110011011", 
    114 => "1111111011101111", 115 => "1111111101001011", 116 => "0000000011001000", 
    117 => "0000000000001111", 118 => "1111111111100001", 119 => "1111111111000101", 
    120 => "1111100111100010", 121 => "1111110110111010", 122 => "0000001010100111", 
    123 => "0000001100101100", 124 => "0011001011110100", 125 => "0000000001111000", 
    126 => "0000001101001011", 127 => "1111110110010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActUhA is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActUhA is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActUhA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActUhA_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActUhA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


