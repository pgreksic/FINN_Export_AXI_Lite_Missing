-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActjbC_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActjbC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110110010100100", 1 => "1111111010101011", 2 => "0000000000111101", 
    3 => "1111110000100110", 4 => "1111110000111000", 5 => "1111111001111100", 
    6 => "1111110010110110", 7 => "0000010011011001", 8 => "0000010000010111", 
    9 => "0001101001111010", 10 => "0000111111011001", 11 => "1110001011001000", 
    12 => "1111111111111010", 13 => "1111110010101011", 14 => "1111111000001101", 
    15 => "0000010010011110", 16 => "1111110011010001", 17 => "0000011010000111", 
    18 => "0000010001100000", 19 => "1111111101111101", 20 => "1101110010111000", 
    21 => "0000000010100111", 22 => "1110111111001110", 23 => "0001010100000110", 
    24 => "1111100000011101", 25 => "0000010101001010", 26 => "0000000101100000", 
    27 => "0000000110100000", 28 => "1111011110000000", 29 => "1111001101010110", 
    30 => "1111111010100110", 31 => "1111110101000001", 32 => "1111111101011011", 
    33 => "0000000111010100", 34 => "0000001001110101", 35 => "0000001010111111", 
    36 => "0000000001000101", 37 => "1111100011110010", 38 => "0001110101011101", 
    39 => "0000011100000001", 40 => "1111100011101100", 41 => "0000010001001111", 
    42 => "0000001101001111", 43 => "0000010000111100", 44 => "0000001111011111", 
    45 => "0000000001100100", 46 => "1111010011110001", 47 => "0000010100100110", 
    48 => "0010010000010001", 49 => "0000000110101001", 50 => "0000011000110110", 
    51 => "1111111100000010", 52 => "1111101110100111", 53 => "0000000000001101", 
    54 => "0000010011010111", 55 => "0000010100101000", 56 => "1111111110011001", 
    57 => "1111111000100000", 58 => "1111100111110011", 59 => "1111111111110110", 
    60 => "0000010011000110", 61 => "1111100001001001", 62 => "0000010000001000", 
    63 => "0001010010110101", 64 => "1111000000110011", 65 => "0000000001000100", 
    66 => "1111110011111000", 67 => "0000010100100000", 68 => "1111111001011000", 
    69 => "0000001010100011", 70 => "1111111101001111", 71 => "1111100000000000", 
    72 => "0000001110110100", 73 => "1110110000010000", 74 => "1111100100101110", 
    75 => "1111110000110100", 76 => "0000000101011111", 77 => "1111111001000001", 
    78 => "1111110110010000", 79 => "0000000001010010", 80 => "1111111110110011", 
    81 => "0000000111110000", 82 => "1111111111001101", 83 => "1100011001100100", 
    84 => "0000000000101111", 85 => "0000010100100000", 86 => "0001010001001100", 
    87 => "1111111111011101", 88 => "0000001110110000", 89 => "1111111100000001", 
    90 => "1111101110111100", 91 => "1111000100110001", 92 => "1111111110101110", 
    93 => "1111111111000011", 94 => "1111111101100000", 95 => "0000001100010110", 
    96 => "1111110110110001", 97 => "0000000001110010", 98 => "0000000000100101", 
    99 => "1111111001000110", 100 => "1111110101110000", 101 => "0000000101011011", 
    102 => "0000001000011111", 103 => "1111100000011001", 104 => "1111111110001100", 
    105 => "0000001011011000", 106 => "1111111000010110", 107 => "0000001001000010", 
    108 => "1111101100000000", 109 => "0000000101101101", 110 => "1111111101100010", 
    111 => "0000000100101111", 112 => "1111111111001111", 113 => "0001000000010000", 
    114 => "1010111010100101", 115 => "1111100011111111", 116 => "0000111101011011", 
    117 => "1111011000000110", 118 => "0000000100011010", 119 => "1111110011000111", 
    120 => "1111111010001011", 121 => "0000110010111000", 122 => "1111110111001100", 
    123 => "1111111111111000", 124 => "1111100100010111", 125 => "0001110010011111", 
    126 => "0000000100111000", 127 => "0000010100110111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActjbC is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActjbC is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActjbC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActjbC_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActjbC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


