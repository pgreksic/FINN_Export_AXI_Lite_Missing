-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActfYi_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActfYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110101101110101", 1 => "1111111001100000", 2 => "1111111111101000", 
    3 => "1111101111011111", 4 => "1111101111100000", 5 => "1111111001000011", 
    6 => "1111110010000011", 7 => "0000010001111000", 8 => "0000001111011101", 
    9 => "0001100100101101", 10 => "0000111001011001", 11 => "1110000101001110", 
    12 => "1111111110100110", 13 => "1111110000100110", 14 => "1111110111011110", 
    15 => "0000010001011011", 16 => "1111110010001010", 17 => "0000010110110010", 
    18 => "0000010000110100", 19 => "1111111100110011", 20 => "1101010000100010", 
    21 => "0000000001110001", 22 => "1110111010001010", 23 => "0001001111111111", 
    24 => "1111011111011111", 25 => "0000010100001100", 26 => "0000000100100000", 
    27 => "0000000101111100", 28 => "1111011101000111", 29 => "1111001000010001", 
    30 => "1111111001111011", 31 => "1111110011111100", 32 => "1111111100010100", 
    33 => "0000000110011011", 34 => "0000001000011011", 35 => "0000001001111101", 
    36 => "0000000000001101", 37 => "1111100011000000", 38 => "0001101011110100", 
    39 => "0000011011001010", 40 => "1111100010100010", 41 => "0000010000011011", 
    42 => "0000001100000100", 43 => "0000001111110011", 44 => "0000001110010010", 
    45 => "0000000000101101", 46 => "1111010001010001", 47 => "0000010011100110", 
    48 => "0010000100101110", 49 => "0000000101100001", 50 => "0000011000001100", 
    51 => "1111111010110101", 52 => "1111101101001101", 53 => "1111111110111101", 
    54 => "0000010010100101", 55 => "0000010011100011", 56 => "1111111101011101", 
    57 => "1111110111100100", 58 => "1111100111000010", 59 => "1111111111011011", 
    60 => "0000010001110010", 61 => "1111011110100010", 62 => "0000001110100100", 
    63 => "0001001110010010", 64 => "1110111101111110", 65 => "0000000000010100", 
    66 => "1111110010110100", 67 => "0000010100001000", 68 => "1111111000001110", 
    69 => "0000001001100000", 70 => "1111111011101111", 71 => "1111011010011000", 
    72 => "0000001110000001", 73 => "1110101011001001", 74 => "1111100011110011", 
    75 => "1111110000000100", 76 => "0000000100101011", 77 => "1111110111111010", 
    78 => "1111110101000111", 79 => "0000000000011100", 80 => "1111111101110011", 
    81 => "0000000110111011", 82 => "1111111110011111", 83 => "1100000011001000", 
    84 => "1111111111110011", 85 => "0000010011110000", 86 => "0001001001111001", 
    87 => "1111111001110111", 88 => "0000001110001000", 89 => "1111111010101001", 
    90 => "1111101101101100", 91 => "1110111110011011", 92 => "1111111101011010", 
    93 => "1111111101110110", 94 => "1111111011111111", 95 => "0000001011000101", 
    96 => "1111110101111010", 97 => "0000000001000110", 98 => "1111111111011101", 
    99 => "1111111000001010", 100 => "1111110100111111", 101 => "0000000100100001", 
    102 => "0000000111101110", 103 => "1111011111100101", 104 => "1111111101000110", 
    105 => "0000001010100011", 106 => "1111110111011110", 107 => "0000001000010010", 
    108 => "1111101010111101", 109 => "0000000100111101", 110 => "1111111100110001", 
    111 => "0000000011111011", 112 => "1111111110010111", 113 => "0000111101000110", 
    114 => "1010011101001100", 115 => "1111100011000101", 116 => "0000111001010101", 
    117 => "1111010011111011", 118 => "0000000011100001", 119 => "1111110001111100", 
    120 => "1111111001011011", 121 => "0000101111001110", 122 => "1111110110011110", 
    123 => "1111111110110011", 124 => "1111100011010000", 125 => "0001101100000110", 
    126 => "0000000011011111", 127 => "0000010011111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActfYi is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActfYi is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActfYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActfYi_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActfYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


