-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActEe0_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActEe0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101110110100", 1 => "1110101110110101", 2 => "1111111100100101", 
    3 => "1111110010100001", 4 => "1111101101101011", 5 => "0000100001000100", 
    6 => "1111101011010010", 7 => "1111101101001111", 8 => "0000101000000011", 
    9 => "1111101000010110", 10 => "0000100110000011", 11 => "1111100111101101", 
    12 => "0000000111100001", 13 => "1010000111110011", 14 => "0000000011001101", 
    15 => "1111101001100001", 16 => "0000000110100100", 17 => "1111110000011010", 
    18 => "1111100110011001", 19 => "0000001000111101", 20 => "0111000000000001", 
    21 => "1011111010110001", 22 => "1111110001101111", 23 => "1111100110011010", 
    24 => "0000001001000011", 25 => "1111110110011010", 26 => "1110110011010110", 
    27 => "0000100110000110", 28 => "1111111101100010", 29 => "1111110110100111", 
    30 => "1111101011111111", 31 => "1111110100000110", 32 => "0000000010010001", 
    33 => "1111101100100001", 34 => "1111010100100100", 35 => "0000001111011010", 
    36 => "1101101100001111", 37 => "0000000001000000", 38 => "1111111111101000", 
    39 => "1111001111101000", 40 => "0000010111100100", 41 => "1111101110010111", 
    42 => "1111011010000011", 43 => "1111011110000000", 44 => "1111010101100001", 
    45 => "0000000001110100", 46 => "0000100111100101", 47 => "0000010100010111", 
    48 => "1111001000111111", 49 => "0000000001111100", 50 => "0000011110100001", 
    51 => "1111111100000001", 52 => "0001000110110010", 53 => "1111110001100010", 
    54 => "1111110010100000", 55 => "1111101111010111", 56 => "1111101111100000", 
    57 => "0000011110001110", 58 => "1111110111100110", 59 => "0000011100101010", 
    60 => "0000000000011111", 61 => "0000001001001100", 62 => "0000011001100101", 
    63 => "1111101110101011", 64 => "1111111010000011", 65 => "0000000000001001", 
    66 => "1111101011000101", 67 => "1111110111001001", 68 => "0000001110110100", 
    69 => "0000001010011000", 70 => "1111000110111010", 71 => "1111011000010011", 
    72 => "1111110100100100", 73 => "1111101111111101", 74 => "1111001100110110", 
    75 => "1100100100000001", 76 => "1111011000111110", 77 => "0000101100101100", 
    78 => "1111101100000100", 79 => "1111110010111010", 80 => "1111101100100001", 
    81 => "1111111101001010", 82 => "1111111010001000", 83 => "1111110001101010", 
    84 => "1111111001010110", 85 => "0000000001001111", 86 => "0000000101001111", 
    87 => "0000000001100100", 88 => "0000000111010110", 89 => "0000000100011010", 
    90 => "0000000011111101", 91 => "0000001011111011", 92 => "1111100110001010", 
    93 => "0001010011010111", 94 => "0001010101110111", 95 => "0000011000111011", 
    96 => "0001001000110011", 97 => "0000011111001011", 98 => "1111111100101000", 
    99 => "0000000000010001", 100 => "0100111000000101", 101 => "1111100111010111", 
    102 => "0000000001010011", 103 => "1111001001000100", 104 => "1111110111001010", 
    105 => "1111110101001100", 106 => "1111101110001111", 107 => "1111101101100000", 
    108 => "0000001000101101", 109 => "0000001010011110", 110 => "1111011110011001", 
    111 => "1111110111000001", 112 => "1111110101100000", 113 => "1111110001000101", 
    114 => "1111101111011110", 115 => "0000000111001110", 116 => "0000011000011011", 
    117 => "0000001000001110", 118 => "0111000000000001", 119 => "1111110011010100", 
    120 => "1110011111100011", 121 => "0000010011010001", 122 => "1111111000010011", 
    123 => "1111101100011000", 124 => "1111111000011010", 125 => "1111100101001001", 
    126 => "1111101111001011", 127 => "0000100110101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActEe0 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActEe0 is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActEe0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActEe0_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActEe0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


