-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActNgs_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActNgs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111110000100101", 1 => "1111000010010001", 2 => "1111111110000100", 
    3 => "1111110100100111", 4 => "1111101111000001", 5 => "0000100010100110", 
    6 => "1111101100111010", 7 => "1111101110111000", 8 => "0000111010001110", 
    9 => "1111101010101100", 10 => "0000101000000100", 11 => "1111101001110100", 
    12 => "0000001001110100", 13 => "1011001110000100", 14 => "0000000101000100", 
    15 => "1111101011111111", 16 => "0000001000111011", 17 => "1111110010101100", 
    18 => "1111101000010000", 19 => "0000001011101001", 20 => "0111000000000001", 
    21 => "1100101110100010", 22 => "1111110011100000", 23 => "1111101001000000", 
    24 => "0000001010101111", 25 => "1111111000000110", 26 => "1110111000110100", 
    27 => "0000110010100111", 28 => "1111111111100100", 29 => "1111111000000100", 
    30 => "1111101101110011", 31 => "1111110101110110", 32 => "0000000100000110", 
    33 => "1111101110001000", 34 => "1111010110110100", 35 => "0000010001010111", 
    36 => "1110000101001100", 37 => "0000000010101100", 38 => "0000000010101011", 
    39 => "1111011001001010", 40 => "0000011010010010", 41 => "1111110000000111", 
    42 => "1111011100001001", 43 => "1111100000001111", 44 => "1111010111101101", 
    45 => "0000000011011010", 46 => "0000101100001110", 47 => "0000010110000101", 
    48 => "1111010101010000", 49 => "0000000100011010", 50 => "0000100000000001", 
    51 => "1111111101111111", 52 => "0001001100100001", 53 => "1111110011000001", 
    54 => "1111110101100111", 55 => "1111110000110001", 56 => "1111110010110100", 
    57 => "0000100000000110", 58 => "1111111001010001", 59 => "0000100001110111", 
    60 => "0000000010010010", 61 => "0000001010110010", 62 => "0000011100001110", 
    63 => "1111110000110101", 64 => "1111111011111100", 65 => "0000000011010110", 
    66 => "1111101101011101", 67 => "1111111001011101", 68 => "0000010000110100", 
    69 => "0000001100100000", 70 => "1111010010011010", 71 => "1111011010101001", 
    72 => "1111110110001011", 73 => "1111110001111110", 74 => "1111010100010011", 
    75 => "1101010001111001", 76 => "1111011010101100", 77 => "0000110100001001", 
    78 => "1111101101111111", 79 => "1111110101111001", 80 => "1111101110100110", 
    81 => "1111111111011100", 82 => "1111111100011001", 83 => "1111110100000101", 
    84 => "1111111011010001", 85 => "0000000010101010", 86 => "0000001000010000", 
    87 => "0000000010110101", 88 => "0000001010011111", 89 => "0000000110111000", 
    90 => "0000000111000010", 91 => "0000011111010111", 92 => "1111101010110111", 
    93 => "0001011010101100", 94 => "0001100001001011", 95 => "0000011010100011", 
    96 => "0001101100101000", 97 => "0000100001011001", 98 => "1111111101111010", 
    99 => "0000000010011011", 100 => "0110011100110110", 101 => "1111101010001010", 
    102 => "0000000011001000", 103 => "1111001011110011", 104 => "1111111001110001", 
    105 => "1111110111010001", 106 => "1111110001000101", 107 => "1111101111111110", 
    108 => "0000001011011100", 109 => "0000001100010100", 110 => "1111100000111110", 
    111 => "1111111000100011", 112 => "1111110110101011", 113 => "1111110101001000", 
    114 => "1111110001111011", 115 => "0000001001111011", 116 => "0000011010110001", 
    117 => "0000001010111010", 118 => "0111000000000001", 119 => "1111110101011011", 
    120 => "1110101010101000", 121 => "0000010101011010", 122 => "1111111001100010", 
    123 => "1111101101111011", 124 => "1111111010111000", 125 => "1111100111010111", 
    126 => "1111110001101110", 127 => "0000101000110110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActNgs is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActNgs is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActNgs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActNgs_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActNgs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


