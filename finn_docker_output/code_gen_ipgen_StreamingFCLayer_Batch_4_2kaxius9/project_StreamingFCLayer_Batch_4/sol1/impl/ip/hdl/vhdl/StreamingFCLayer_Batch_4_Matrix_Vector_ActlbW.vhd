-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActlbW_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActlbW_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110110100111100", 1 => "1111111011010001", 2 => "0000000001100111", 
    3 => "1111110001001010", 4 => "1111110001100011", 5 => "1111111010011000", 
    6 => "1111110011001111", 7 => "0000010100001001", 8 => "0000010000110100", 
    9 => "0001101100100001", 10 => "0001000010011001", 11 => "1110001110000101", 
    12 => "0000000000100100", 13 => "1111110011101101", 14 => "1111111000100100", 
    15 => "0000010010111111", 16 => "1111110011110100", 17 => "0000011011110001", 
    18 => "0000010001110110", 19 => "1111111110100010", 20 => "1110000100000011", 
    21 => "0000000011000010", 22 => "1111000001101111", 23 => "0001010110001001", 
    24 => "1111100000111100", 25 => "0000010101101001", 26 => "0000000110000001", 
    27 => "0000000110110010", 28 => "1111011110011100", 29 => "1111001111111001", 
    30 => "1111111010111100", 31 => "1111110101100100", 32 => "1111111101111111", 
    33 => "0000000111110001", 34 => "0000001010100010", 35 => "0000001011011111", 
    36 => "0000000001100010", 37 => "1111100100001011", 38 => "0001111010010010", 
    39 => "0000011100011100", 40 => "1111100100010001", 41 => "0000010001101000", 
    42 => "0000001101110100", 43 => "0000010001100000", 44 => "0000010000000101", 
    45 => "0000000010000000", 46 => "1111010101000001", 47 => "0000010101000110", 
    48 => "0010010110000011", 49 => "0000000111001110", 50 => "0000011001001011", 
    51 => "1111111100101001", 52 => "1111101111010100", 53 => "0000000000110101", 
    54 => "0000010011101111", 55 => "0000010101001010", 56 => "1111111110110111", 
    57 => "1111111000111110", 58 => "1111101000001100", 59 => "0000000000000011", 
    60 => "0000010011110000", 61 => "1111100010011101", 62 => "0000010000111010", 
    63 => "0001010101000111", 64 => "1111000010001110", 65 => "0000000001011100", 
    66 => "1111110100011010", 67 => "0000010100101101", 68 => "1111111001111101", 
    69 => "0000001011000100", 70 => "1111111101111111", 71 => "1111100010110100", 
    72 => "0000001111001101", 73 => "1110110010110100", 74 => "1111100101001011", 
    75 => "1111110001001101", 76 => "0000000101111000", 77 => "1111111001100100", 
    78 => "1111110110110100", 79 => "0000000001101101", 80 => "1111111111010011", 
    81 => "0000001000001010", 82 => "1111111111100100", 83 => "1100100100110001", 
    84 => "0000000001001110", 85 => "0000010100111000", 86 => "0001010100110110", 
    87 => "0000000010010000", 88 => "0000001111000100", 89 => "1111111100101101", 
    90 => "1111101111100011", 91 => "1111000111111100", 92 => "1111111111011000", 
    93 => "1111111111101001", 94 => "1111111110010001", 95 => "0000001100111110", 
    96 => "1111110111001100", 97 => "0000000010001000", 98 => "0000000001001001", 
    99 => "1111111001100100", 100 => "1111110110001000", 101 => "0000000101111001", 
    102 => "0000001000110111", 103 => "1111100000110011", 104 => "1111111110110000", 
    105 => "0000001011110010", 106 => "1111111000110001", 107 => "0000001001011010", 
    108 => "1111101100100001", 109 => "0000000110000110", 110 => "1111111101111011", 
    111 => "0000000101001001", 112 => "1111111111101011", 113 => "0001000001110101", 
    114 => "1011001001010001", 115 => "1111100100011100", 116 => "0000111111011101", 
    117 => "1111011010001100", 118 => "0000000100110110", 119 => "1111110011101100", 
    120 => "1111111010100100", 121 => "0000110100101101", 122 => "1111110111100011", 
    123 => "0000000000011011", 124 => "1111100100111011", 125 => "0001110101101100", 
    126 => "0000000101100101", 127 => "0000010101010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActlbW is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActlbW is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActlbW_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActlbW_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActlbW_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


