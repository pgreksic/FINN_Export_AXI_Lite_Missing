-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Act0iy_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Act0iy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000011001100", 1 => "1111111001100010", 2 => "1111100110010111", 
    3 => "1111100010010101", 4 => "0000001101101010", 5 => "1111111101011111", 
    6 => "0000011101100000", 7 => "0000000000001111", 8 => "1111111101011110", 
    9 => "1111101010101011", 10 => "1111110010010010", 11 => "1111101110001010", 
    12 => "0000000001110110", 13 => "0000000001110001", 14 => "0000000000110111", 
    15 => "1100100011001010", 16 => "1111111011001110", 17 => "1111111011011101", 
    18 => "0000101010000000", 19 => "1111110100010001", 20 => "1111011110100110", 
    21 => "0000010001101000", 22 => "1111110000001111", 23 => "1100010010101011", 
    24 => "0000011110100001", 25 => "0000000111010110", 26 => "1111110010000010", 
    27 => "0000101000011101", 28 => "0000000001010110", 29 => "0000001001100101", 
    30 => "0111000000000001", 31 => "0000001100100110", 32 => "1111101111111011", 
    33 => "0000001001101111", 34 => "1111111011100001", 35 => "0000011111010000", 
    36 => "0000001111110000", 37 => "1111011110101011", 38 => "1110110110101000", 
    39 => "0111000000000001", 40 => "0000010010110010", 41 => "1111111010000010", 
    42 => "0000110101011100", 43 => "0000010001010101", 44 => "0000001100011010", 
    45 => "0000001110111001", 46 => "0000100011011110", 47 => "0000101000111010", 
    48 => "0000000001110000", 49 => "0000001111111100", 50 => "1111111110001110", 
    51 => "1111111100111110", 52 => "0000000001101001", 53 => "1111010111110001", 
    54 => "0000001011100110", 55 => "0000010100001010", 56 => "1111110110100100", 
    57 => "1111101010110000", 58 => "1111011100000101", 59 => "1111110001111100", 
    60 => "0000001001010000", 61 => "0000100101001001", 62 => "0000001111101000", 
    63 => "0000001011001011", 64 => "0000011111000000", 65 => "1111101000000011", 
    66 => "0000111011000110", 67 => "0000000011100101", 68 => "1111110101111111", 
    69 => "0000001000100111", 70 => "0000100101010011", 71 => "0000001001100101", 
    72 => "0000001011110110", 73 => "1111110111100000", 74 => "1111101001000101", 
    75 => "0000100010101110", 76 => "0000001100111001", 77 => "0000010110110101", 
    78 => "0000100010011101", 79 => "1111111101001111", 80 => "0000001011000010", 
    81 => "0000110110010011", 82 => "0000001001101001", 83 => "0000000100011110", 
    84 => "1111111111111011", 85 => "1111101101011011", 86 => "0000000000001001", 
    87 => "0000001110010011", 88 => "0000010010100101", 89 => "1110110000010101", 
    90 => "0001000000000100", 91 => "0000001110000000", 92 => "0000000001100101", 
    93 => "0000011101001111", 94 => "0000001100101111", 95 => "0001011111100011", 
    96 => "1111000010111000", 97 => "1111000110101000", 98 => "1111110111100000", 
    99 => "1111110100100111", 100 => "0010010110010111", 101 => "1111101010001100", 
    102 => "1111111111101001", 103 => "1111101011000001", 104 => "1111110110001100", 
    105 => "0000010011000001", 106 => "0000011011001100", 107 => "1111110110101011", 
    108 => "0000000000110100", 109 => "1111110110101101", 110 => "0000010111010101", 
    111 => "0000011000011111", 112 => "1111111001000111", 113 => "0000110010101110", 
    114 => "1111111101110011", 115 => "1111111111100111", 116 => "0000000100011011", 
    117 => "0000000001101001", 118 => "0000000000100101", 119 => "0000000000100111", 
    120 => "1111101000111110", 121 => "1111111001100001", 122 => "0000001100001100", 
    123 => "0000001101111101", 124 => "0100010011101000", 125 => "0000000010111100", 
    126 => "0000001110110101", 127 => "1111110111011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Act0iy is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Act0iy is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Act0iy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Act0iy_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Act0iy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


