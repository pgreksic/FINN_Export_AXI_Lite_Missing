-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActXh4_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActXh4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000010100100", 1 => "1111111000111010", 2 => "1111100101111010", 
    3 => "1111100001100011", 4 => "0000001101000110", 5 => "1111111100100100", 
    6 => "0000011100100110", 7 => "1111111111010101", 8 => "1111111100101000", 
    9 => "1111101010000110", 10 => "1111110001010111", 11 => "1111101101011011", 
    12 => "0000000001000110", 13 => "0000000001001101", 14 => "0000000000000100", 
    15 => "1100010101111101", 16 => "1111111010101010", 17 => "1111111010111010", 
    18 => "0000101000011100", 19 => "1111110011011010", 20 => "1111011101111111", 
    21 => "0000010000111011", 22 => "1111101111100010", 23 => "1100000111000110", 
    24 => "0000011101101000", 25 => "0000000110110011", 26 => "1111110001010111", 
    27 => "0000100100101001", 28 => "0000000000100100", 29 => "0000001000111110", 
    30 => "0111000000000001", 31 => "0000001011101011", 32 => "1111101111011000", 
    33 => "0000001000111110", 34 => "1111111010100101", 35 => "0000011110101000", 
    36 => "0000001110110100", 37 => "1111011101111011", 38 => "1110110011011010", 
    39 => "0111000000000001", 40 => "0000010010000100", 41 => "1111111001010111", 
    42 => "0000110001000011", 43 => "0000010000011111", 44 => "0000001011110001", 
    45 => "0000001101111000", 46 => "0000100010110011", 47 => "0000101000001111", 
    48 => "0000000001001000", 49 => "0000001111001100", 50 => "1111111101100100", 
    51 => "1111111100001110", 52 => "0000000000111010", 53 => "1111010111001100", 
    54 => "0000001010111000", 55 => "0000010011011000", 56 => "1111110101000010", 
    57 => "1111101010000001", 58 => "1111011010001011", 59 => "1111110001000000", 
    60 => "0000001000101001", 61 => "0000100100100100", 62 => "0000001110110001", 
    63 => "0000001010100101", 64 => "0000011110001100", 65 => "1111100011111001", 
    66 => "0000110111011110", 67 => "0000000011000100", 68 => "1111110101010000", 
    69 => "0000000111110000", 70 => "0000100100101101", 71 => "0000001000011100", 
    72 => "0000001011001101", 73 => "1111110110110010", 74 => "1111100111110111", 
    75 => "0000100010000110", 76 => "0000001011011010", 77 => "0000010010110101", 
    78 => "0000100001111011", 79 => "1111111100001000", 80 => "0000001010000001", 
    81 => "0000110011100100", 82 => "0000001000110110", 83 => "0000000011010100", 
    84 => "1111111111010001", 85 => "1111101100100101", 86 => "1111111111100111", 
    87 => "0000001101100111", 88 => "0000010010000100", 89 => "1110101001001111", 
    90 => "0000111101001101", 91 => "0000001101000101", 92 => "0000000001000010", 
    93 => "0000011100100001", 94 => "0000001100000000", 95 => "0001011011100111", 
    96 => "1111000000110111", 97 => "1111000010000001", 98 => "1111110110101110", 
    99 => "1111110100000011", 100 => "0010001100001111", 101 => "1111101001101110", 
    102 => "1111111111010010", 103 => "1111101010011000", 104 => "1111110101100010", 
    105 => "0000010010010101", 106 => "0000011010011101", 107 => "1111110101110110", 
    108 => "0000000000000100", 109 => "1111110101110101", 110 => "0000010110100101", 
    111 => "0000010111101000", 112 => "1111111000100100", 113 => "0000110000100100", 
    114 => "1111111100110001", 115 => "1111111110011001", 116 => "0000000011110001", 
    117 => "0000000000111100", 118 => "0000000000000011", 119 => "1111111111110110", 
    120 => "1111101000010000", 121 => "1111111000001101", 122 => "0000001011011001", 
    123 => "0000001101010101", 124 => "0011101111101110", 125 => "0000000010011010", 
    126 => "0000001110000000", 127 => "1111110110111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActXh4 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActXh4 is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActXh4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActXh4_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActXh4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


