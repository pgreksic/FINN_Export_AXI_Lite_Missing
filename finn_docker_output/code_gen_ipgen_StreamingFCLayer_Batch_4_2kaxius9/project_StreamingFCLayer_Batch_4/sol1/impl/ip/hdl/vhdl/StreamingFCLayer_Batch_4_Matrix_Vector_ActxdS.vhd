-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActxdS_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActxdS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111001111000", 1 => "0001101010000011", 2 => "0011001110001110", 
    3 => "0000011001110011", 4 => "1111011101101010", 5 => "0000000011101000", 
    6 => "1111110110011110", 7 => "1111101011000111", 8 => "1111111000001010", 
    9 => "0000001100010101", 10 => "1111110011011100", 11 => "1111100111100101", 
    12 => "0000011000011011", 13 => "1111110100001011", 14 => "1111111110011011", 
    15 => "0000000111111111", 16 => "0000000110000100", 17 => "1111111011110000", 
    18 => "0000000111000010", 19 => "0000010001101011", 20 => "0000001010100011", 
    21 => "1111011101011001", 22 => "1111110100110110", 23 => "1111110001001101", 
    24 => "0000001010110000", 25 => "0000001110000110", 26 => "0000001010111011", 
    27 => "1111100101001110", 28 => "0000000101111100", 29 => "1100111000001000", 
    30 => "1111100111111000", 31 => "0000001111110110", 32 => "1111110101011000", 
    33 => "1111111110111011", 34 => "1111000010010010", 35 => "1111111001000111", 
    36 => "0000000011100011", 37 => "1110110000011110", 38 => "0000001001000000", 
    39 => "0000000001110101", 40 => "0001001011100000", 41 => "1111000001101011", 
    42 => "0000000001110011", 43 => "1111110101111010", 44 => "0001011101010000", 
    45 => "0000010101001000", 46 => "1111111001100111", 47 => "0000010010001010", 
    48 => "1111111111111111", 49 => "1010101100001110", 50 => "1111100111010101", 
    51 => "1110111110101001", 52 => "1101110001100010", 53 => "1111110101100000", 
    54 => "0000100011001010", 55 => "0000000001101010", 56 => "0000011101101101", 
    57 => "1111100111010001", 58 => "0000000110100000", 59 => "1111101000111011", 
    60 => "1111111110001111", 61 => "1111011011001111", 62 => "0000000111000011", 
    63 => "0000000011011110", 64 => "0000001100100000", 65 => "0000001001010100", 
    66 => "0000001101110000", 67 => "0000011001000110", 68 => "1111110101011011", 
    69 => "0000000110100011", 70 => "0000010011100110", 71 => "0001001001000100", 
    72 => "0000000011000111", 73 => "1111100110001111", 74 => "0000000100001101", 
    75 => "1111111010110111", 76 => "1110110000110001", 77 => "0000000010110101", 
    78 => "1111111010000001", 79 => "1111100110001111", 80 => "0000010110101010", 
    81 => "1111110100001101", 82 => "0000010001110101", 83 => "0000001001011111", 
    84 => "1111111110010101", 85 => "0000001011101100", 86 => "1111011101100010", 
    87 => "0000001110011101", 88 => "0000011010000101", 89 => "0000000000011101", 
    90 => "0000000110011110", 91 => "0000000011001001", 92 => "1111111110001110", 
    93 => "0000000010011010", 94 => "1110110010000101", 95 => "1111110010100000", 
    96 => "1111111010111110", 97 => "1111111010101000", 98 => "1111111000010111", 
    99 => "1111100001111101", 100 => "0000000000000110", 101 => "1111010110001101", 
    102 => "0000000101010010", 103 => "0000100001110101", 104 => "0000000010001010", 
    105 => "1111111110111001", 106 => "0000010100000010", 107 => "0000001010010100", 
    108 => "0000010011011111", 109 => "0000010111010011", 110 => "1110011000101011", 
    111 => "0000000010010110", 112 => "1101111010100000", 113 => "0000001010100111", 
    114 => "0000001010000110", 115 => "0000010100011110", 116 => "1111010001100011", 
    117 => "0100000110101011", 118 => "1111111110101010", 119 => "1111110010110001", 
    120 => "1111111110101010", 121 => "0000000111101000", 122 => "1111100100000000", 
    123 => "1111110010100000", 124 => "0111000000000001", 125 => "0000101111010000", 
    126 => "0001100001011101", 127 => "1111111110010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActxdS is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActxdS is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActxdS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActxdS_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActxdS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


