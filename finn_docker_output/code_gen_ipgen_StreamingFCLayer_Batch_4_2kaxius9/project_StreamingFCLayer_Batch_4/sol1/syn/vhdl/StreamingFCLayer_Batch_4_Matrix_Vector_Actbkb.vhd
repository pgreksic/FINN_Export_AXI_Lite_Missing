-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110101001000110", 1 => "1111111000010110", 2 => "1111111110010100", 
    3 => "1111101110011000", 4 => "1111101110001001", 5 => "1111111000001010", 
    6 => "1111110001010001", 7 => "0000010000010111", 8 => "0000001110100011", 
    9 => "0001011111100000", 10 => "0000110011011001", 11 => "1101111111010100", 
    12 => "1111111101010010", 13 => "1111101110100010", 14 => "1111110110101111", 
    15 => "0000010000011001", 16 => "1111110001000011", 17 => "0000010011011110", 
    18 => "0000010000001000", 19 => "1111111011101010", 20 => "1100101110001100", 
    21 => "0000000000111011", 22 => "1110110101000110", 23 => "0001001011111000", 
    24 => "1111011110100001", 25 => "0000010011001111", 26 => "0000000011011111", 
    27 => "0000000101011000", 28 => "1111011100001111", 29 => "1111000011001100", 
    30 => "1111111001010000", 31 => "1111110010110111", 32 => "1111111011001101", 
    33 => "0000000101100001", 34 => "0000000111000001", 35 => "0000001000111011", 
    36 => "1111111111010100", 37 => "1111100010001110", 38 => "0001100010001010", 
    39 => "0000011010010100", 40 => "1111100001011000", 41 => "0000001111101000", 
    42 => "0000001010111001", 43 => "0000001110101010", 44 => "0000001101000101", 
    45 => "1111111111110101", 46 => "1111001110110001", 47 => "0000010010100110", 
    48 => "0001111001001010", 49 => "0000000100011000", 50 => "0000010111100010", 
    51 => "1111111001101000", 52 => "1111101011110011", 53 => "1111111101101100", 
    54 => "0000010001110011", 55 => "0000010010011110", 56 => "1111111100100000", 
    57 => "1111110110101001", 58 => "1111100110010001", 59 => "1111111111000000", 
    60 => "0000010000011111", 61 => "1111011011111011", 62 => "0000001101000001", 
    63 => "0001001001101111", 64 => "1110111011001000", 65 => "1111111111100011", 
    66 => "1111110001110001", 67 => "0000010011101111", 68 => "1111110111000100", 
    69 => "0000001000011110", 70 => "1111111010001110", 71 => "1111010100101111", 
    72 => "0000001101001110", 73 => "1110100110000010", 74 => "1111100010111000", 
    75 => "1111101111010011", 76 => "0000000011111000", 77 => "1111110110110011", 
    78 => "1111110011111110", 79 => "1111111111100111", 80 => "1111111100110011", 
    81 => "0000000110000111", 82 => "1111111101110001", 83 => "1011101100101101", 
    84 => "1111111110110111", 85 => "0000010010111111", 86 => "0001000010100110", 
    87 => "1111110100010010", 88 => "0000001101100000", 89 => "1111111001010001", 
    90 => "1111101100011100", 91 => "1110111000000101", 92 => "1111111100000110", 
    93 => "1111111100101010", 94 => "1111111010011101", 95 => "0000001001110100", 
    96 => "1111110101000100", 97 => "0000000000011010", 98 => "1111111110010101", 
    99 => "1111110111001110", 100 => "1111110100001111", 101 => "0000000011100111", 
    102 => "0000000110111101", 103 => "1111011110110001", 104 => "1111111011111111", 
    105 => "0000001001101110", 106 => "1111110110100111", 107 => "0000000111100010", 
    108 => "1111101001111010", 109 => "0000000100001100", 110 => "1111111100000000", 
    111 => "0000000011000111", 112 => "1111111101011111", 113 => "0000111001111100", 
    114 => "1001111111110011", 115 => "1111100010001100", 116 => "0000110101001111", 
    117 => "1111001111101111", 118 => "0000000010101000", 119 => "1111110000110001", 
    120 => "1111111000101010", 121 => "0000101011100100", 122 => "1111110101101111", 
    123 => "1111111101101101", 124 => "1111100010001000", 125 => "0001100101101101", 
    126 => "0000000010000110", 127 => "0000010010111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


