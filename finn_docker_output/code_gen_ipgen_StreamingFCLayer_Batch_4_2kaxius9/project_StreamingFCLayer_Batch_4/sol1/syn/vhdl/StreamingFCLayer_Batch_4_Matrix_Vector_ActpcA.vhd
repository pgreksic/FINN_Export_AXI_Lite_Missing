-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActpcA_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActpcA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111000011000", 1 => "0001011000111011", 2 => "0010110010000100", 
    3 => "0000010111100001", 4 => "1111010111100011", 5 => "0000000001110001", 
    6 => "1111101011011110", 7 => "1111101001011111", 8 => "1111110110110011", 
    9 => "0000001001010001", 10 => "1111110010000110", 11 => "1111100101110101", 
    12 => "0000010101110011", 13 => "1111110010001010", 14 => "1111111011111100", 
    15 => "0000000101100110", 16 => "0000000100010000", 17 => "1111111000111001", 
    18 => "0000000101011010", 19 => "0000010000000011", 20 => "0000001000111111", 
    21 => "1111011011100001", 22 => "1111110010010100", 23 => "1111101110100000", 
    24 => "0000001000100000", 25 => "0000001100011001", 26 => "0000001001011000", 
    27 => "1111100011011001", 28 => "0000000100101011", 29 => "1100011101001000", 
    30 => "1111100110011110", 31 => "0000001101110111", 32 => "1111110011001110", 
    33 => "1111111101001011", 34 => "1110111001101011", 35 => "1111110111001110", 
    36 => "0000000001001011", 37 => "1110101000101010", 38 => "0000000110101000", 
    39 => "1111111111111111", 40 => "0001000010001101", 41 => "1110111000101010", 
    42 => "1111111111001001", 43 => "1111110011111111", 44 => "0001010000001011", 
    45 => "0000010011000100", 46 => "1111110111110001", 47 => "0000010000001011", 
    48 => "1111111110000111", 49 => "1001111101100011", 50 => "1111100101100011", 
    51 => "1110100011110111", 52 => "1101010100111011", 53 => "1111110100010000", 
    54 => "0000100001101001", 55 => "0000000000000111", 56 => "0000011101001100", 
    57 => "1111100101101100", 58 => "0000000100111111", 59 => "1111100110110101", 
    60 => "1111111101000010", 61 => "1111011001011100", 62 => "0000000101001001", 
    63 => "0000000001100100", 64 => "0000001010100110", 65 => "0000000111000101", 
    66 => "0000001011000101", 67 => "0000010110100100", 68 => "1111110011000101", 
    69 => "0000000100101011", 70 => "0000010010001001", 71 => "0001000010001011", 
    72 => "0000000000101010", 73 => "1111011111000101", 74 => "0000000001110000", 
    75 => "1111111000011100", 76 => "1110101000000011", 77 => "0000000001000111", 
    78 => "1111110111111111", 79 => "1111100100100110", 80 => "0000010101000100", 
    81 => "1111110010111000", 82 => "0000001110010101", 83 => "0000000111110110", 
    84 => "1111111011101001", 85 => "0000001010000101", 86 => "1111011011101110", 
    87 => "0000001011111100", 88 => "0000011000010101", 89 => "1111111101001000", 
    90 => "0000000100110100", 91 => "0000000001000101", 92 => "1111111100011101", 
    93 => "0000000000001110", 94 => "1110100000110101", 95 => "1111110000001011", 
    96 => "1111111000110001", 97 => "1111111000001110", 98 => "1111110101101011", 
    99 => "1111011111101110", 100 => "1111111110011000", 101 => "1111010100110000", 
    102 => "0000000011110011", 103 => "0000011000101111", 104 => "0000000000011101", 
    105 => "1111111101001000", 106 => "0000010010011100", 107 => "0000001000111011", 
    108 => "0000010010000000", 109 => "0000010101011101", 110 => "1101111111000010", 
    111 => "0000000001000001", 112 => "1101100110000101", 113 => "0000001001010010", 
    114 => "0000001000001101", 115 => "0000010010111110", 116 => "1111001111001111", 
    117 => "0011010011100100", 118 => "1111111100110110", 119 => "1111110000100111", 
    120 => "1111111100110100", 121 => "0000000101000001", 122 => "1111100010101000", 
    123 => "1111110000011010", 124 => "0111000000000001", 125 => "0000100110111101", 
    126 => "0001001011001100", 127 => "1111111100111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActpcA is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActpcA is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActpcA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActpcA_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActpcA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


