-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actmb6_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Actmb6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110110110000111", 1 => "1111111011100011", 2 => "0000000001111100", 
    3 => "1111110001011100", 4 => "1111110001111001", 5 => "1111111010100111", 
    6 => "1111110011011011", 7 => "0000010100100010", 8 => "0000010001000011", 
    9 => "0001101101110101", 10 => "0001000011111001", 11 => "1110001111100011", 
    12 => "0000000000111001", 13 => "1111110100001110", 14 => "1111111000110000", 
    15 => "0000010011001111", 16 => "1111110100000110", 17 => "0000011100100110", 
    18 => "0000010010000001", 19 => "1111111110110100", 20 => "1110001100101000", 
    21 => "0000000011010000", 22 => "1111000011000000", 23 => "0001010111001011", 
    24 => "1111100001001100", 25 => "0000010101111000", 26 => "0000000110010001", 
    27 => "0000000110111100", 28 => "1111011110101010", 29 => "1111010001001010", 
    30 => "1111111011000111", 31 => "1111110101110101", 32 => "1111111110010001", 
    33 => "0000000111111111", 34 => "0000001010111001", 35 => "0000001011110000", 
    36 => "0000000001110000", 37 => "1111100100011000", 38 => "0001111100101100", 
    39 => "0000011100101010", 40 => "1111100100100011", 41 => "0000010001110101", 
    42 => "0000001110000111", 43 => "0000010001110010", 44 => "0000010000011001", 
    45 => "0000000010001101", 46 => "1111010101101001", 47 => "0000010101010110", 
    48 => "0010011000111100", 49 => "0000000111100000", 50 => "0000011001010101", 
    51 => "1111111100111100", 52 => "1111101111101010", 53 => "0000000001001001", 
    54 => "0000010011111100", 55 => "0000010101011011", 56 => "1111111111000110", 
    57 => "1111111001001101", 58 => "1111101000011000", 59 => "0000000000001010", 
    60 => "0000010100000101", 61 => "1111100011000111", 62 => "0000010001010010", 
    63 => "0001010110010000", 64 => "1111000010111011", 65 => "0000000001101000", 
    66 => "1111110100101011", 67 => "0000010100110011", 68 => "1111111010010000", 
    69 => "0000001011010100", 70 => "1111111110010111", 71 => "1111100100001110", 
    72 => "0000001111011010", 73 => "1110110100000110", 74 => "1111100101011010", 
    75 => "1111110001011001", 76 => "0000000110000101", 77 => "1111111001110110", 
    78 => "1111110111000110", 79 => "0000000001111010", 80 => "1111111111100011", 
    81 => "0000001000010111", 82 => "1111111111110000", 83 => "1100101010011000", 
    84 => "0000000001011101", 85 => "0000010101000100", 86 => "0001010110101011", 
    87 => "0000000011101001", 88 => "0000001111001110", 89 => "1111111101000011", 
    90 => "1111101111110111", 91 => "1111001001100010", 92 => "1111111111101101", 
    93 => "1111111111111100", 94 => "1111111110101001", 95 => "0000001101010011", 
    96 => "1111110111011010", 97 => "0000000010010011", 98 => "0000000001011011", 
    99 => "1111111001110011", 100 => "1111110110010100", 101 => "0000000110000111", 
    102 => "0000001001000011", 103 => "1111100001000000", 104 => "1111111111000001", 
    105 => "0000001100000000", 106 => "1111111000111111", 107 => "0000001001100110", 
    108 => "1111101100110010", 109 => "0000000110010010", 110 => "1111111110000111", 
    111 => "0000000101010110", 112 => "1111111111111001", 113 => "0001000010100111", 
    114 => "1011010000101000", 115 => "1111100100101010", 116 => "0001000000011111", 
    117 => "1111011011001111", 118 => "0000000101000100", 119 => "1111110011111111", 
    120 => "1111111010110000", 121 => "0000110101101000", 122 => "1111110111101111", 
    123 => "0000000000101100", 124 => "1111100101001101", 125 => "0001110111010010", 
    126 => "0000000101111011", 127 => "0000010101100110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actmb6 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Actmb6 is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Actmb6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Actmb6_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Actmb6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


