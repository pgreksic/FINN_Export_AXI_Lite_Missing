-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actsc4_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Actsc4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111000111100", 1 => "0001011111010110", 2 => "0010111100100111", 
    3 => "0000011000011000", 4 => "1111011001110110", 5 => "0000000010011110", 
    6 => "1111101111100110", 7 => "1111101010000110", 8 => "1111110111010100", 
    9 => "0000001010011010", 10 => "1111110010100110", 11 => "1111100110011111", 
    12 => "0000010110110010", 13 => "1111110010111010", 14 => "1111111100111000", 
    15 => "0000000110011111", 16 => "0000000100111100", 17 => "1111111001111110", 
    18 => "0000000110000001", 19 => "0000010000101010", 20 => "0000001001100101", 
    21 => "1111011100001110", 22 => "1111110011010001", 23 => "1111101111100001", 
    24 => "0000001001010110", 25 => "0000001101000010", 26 => "0000001001111101", 
    27 => "1111100100000101", 28 => "0000000101001010", 29 => "1100100111010000", 
    30 => "1111100111000000", 31 => "0000001110100111", 32 => "1111110100000010", 
    33 => "1111111101110101", 34 => "1110111100111010", 35 => "1111110111111100", 
    36 => "0000000010000100", 37 => "1110101011100101", 38 => "0000000111100001", 
    39 => "0000000000101011", 40 => "0001000101101100", 41 => "1110111100000010", 
    42 => "0000000000001001", 43 => "1111110100101101", 44 => "0001010101000101", 
    45 => "0000010011110110", 46 => "1111111000011101", 47 => "0000010000111010", 
    48 => "1111111110110100", 49 => "1010001111000011", 50 => "1111100110001110", 
    51 => "1110101101111010", 52 => "1101011111101010", 53 => "1111110100101110", 
    54 => "0000100010001101", 55 => "0000000000101100", 56 => "0000011101011000", 
    57 => "1111100110010010", 58 => "0000000101100011", 59 => "1111100111100111", 
    60 => "1111111101011111", 61 => "1111011010000111", 62 => "0000000101110110", 
    63 => "0000000010010001", 64 => "0000001011010100", 65 => "0000000111111011", 
    66 => "0000001100000101", 67 => "0000010111100001", 68 => "1111110011111101", 
    69 => "0000000101011000", 70 => "0000010010101100", 71 => "0001000100110000", 
    72 => "0000000001100101", 73 => "1111100001110001", 74 => "0000000010101011", 
    75 => "1111111001010110", 76 => "1110101011010100", 77 => "0000000001110000", 
    78 => "1111111000110000", 79 => "1111100101001101", 80 => "0000010101101011", 
    81 => "1111110011011000", 82 => "0000001111101001", 83 => "0000001000011101", 
    84 => "1111111100101010", 85 => "0000001010101011", 86 => "1111011100011001", 
    87 => "0000001100111000", 88 => "0000011000111111", 89 => "1111111110011000", 
    90 => "0000000101011100", 91 => "0000000001110111", 92 => "1111111101000111", 
    93 => "0000000001000010", 94 => "1110100111010011", 95 => "1111110001000011", 
    96 => "1111111001100110", 97 => "1111111001001000", 98 => "1111110110101011", 
    99 => "1111100000100100", 100 => "1111111111000001", 101 => "1111010101010011", 
    102 => "0000000100010110", 103 => "0000011100001001", 104 => "0000000001000110", 
    105 => "1111111101110010", 106 => "0000010011000010", 107 => "0000001001011100", 
    108 => "0000010010100011", 109 => "0000010110001001", 110 => "1110001000101010", 
    111 => "0000000001100001", 112 => "1101101101101111", 113 => "0000001001110010", 
    114 => "0000001000111010", 115 => "0000010011100010", 116 => "1111010000000111", 
    117 => "0011100110101111", 118 => "1111111101100010", 119 => "1111110001011011", 
    120 => "1111111101100000", 121 => "0000000110000000", 122 => "1111100011001001", 
    123 => "1111110001001100", 124 => "0111000000000001", 125 => "0000101010000100", 
    126 => "0001010011100010", 127 => "1111111101011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actsc4 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Actsc4 is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Actsc4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Actsc4_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Actsc4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


