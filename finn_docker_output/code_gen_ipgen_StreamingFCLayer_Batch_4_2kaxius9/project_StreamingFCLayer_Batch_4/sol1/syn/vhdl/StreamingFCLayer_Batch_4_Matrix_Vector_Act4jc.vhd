-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Act4jc_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Act4jc_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000100000000", 1 => "1111111010010111", 2 => "1111100110111101", 
    3 => "1111100011011001", 4 => "0000001110011010", 5 => "1111111110101110", 
    6 => "0000011110101101", 7 => "0000000001011101", 8 => "1111111110100111", 
    9 => "1111101011011100", 10 => "1111110011100000", 11 => "1111101111000111", 
    12 => "0000000010110100", 13 => "0000000010100010", 14 => "0000000001111011", 
    15 => "1100110100110001", 16 => "1111111011111110", 17 => "1111111100001101", 
    18 => "0000101100000100", 19 => "1111110101011011", 20 => "1111011111011010", 
    21 => "0000010010100011", 22 => "1111110001001011", 23 => "1100100010001000", 
    24 => "0000011111101100", 25 => "0000001000000101", 26 => "1111110010111101", 
    27 => "0000101101100011", 28 => "0000000010011000", 29 => "0000001010011010", 
    30 => "0111000000000001", 31 => "0000001101110100", 32 => "1111110000101010", 
    33 => "0000001010110000", 34 => "1111111100110000", 35 => "0000100000000110", 
    36 => "0000010001000000", 37 => "1111011111101010", 38 => "1110111010111100", 
    39 => "0111000000000001", 40 => "0000010011110000", 41 => "1111111010111011", 
    42 => "0000111011010100", 43 => "0000010010011110", 44 => "0000001101010000", 
    45 => "0000010000010000", 46 => "0000100100010110", 47 => "0000101001110011", 
    48 => "0000000010100101", 49 => "0000010000111101", 50 => "1111111111000111", 
    51 => "1111111101111100", 52 => "0000000010100111", 53 => "1111011000100010", 
    54 => "0000001100100010", 55 => "0000010101001100", 56 => "1111111000100110", 
    57 => "1111101011101110", 58 => "1111011110100111", 59 => "1111110011001011", 
    60 => "0000001010000011", 61 => "0000100101111010", 62 => "0000010000110001", 
    63 => "0000001011111111", 64 => "0000100000000110", 65 => "1111101101100111", 
    66 => "0000111111111100", 67 => "0000000100010010", 68 => "1111110110111111", 
    69 => "0000001001110000", 70 => "0000100110000101", 71 => "0000001011000111", 
    72 => "0000001100101101", 73 => "1111111000011111", 74 => "1111101010101110", 
    75 => "0000100011100011", 76 => "0000001110110111", 77 => "0000011100001011", 
    78 => "0000100011001010", 79 => "1111111110101101", 80 => "0000001100011000", 
    81 => "0000111001111100", 82 => "0000001010101101", 83 => "0000000110000000", 
    84 => "0000000000110010", 85 => "1111101110100011", 86 => "0000000000110111", 
    87 => "0000001111001111", 88 => "0000010011010001", 89 => "1110111001110010", 
    90 => "0001000011111000", 91 => "0000001111001111", 92 => "0000000010010011", 
    93 => "0000011110001101", 94 => "0000001101101100", 95 => "0001100100110010", 
    96 => "1111000101100100", 97 => "1111001100110001", 98 => "1111111000100011", 
    99 => "1111110101011000", 100 => "0010100011110111", 101 => "1111101010110011", 
    102 => "0000000000001000", 103 => "1111101011110111", 104 => "1111110111000101", 
    105 => "0000010011111011", 106 => "0000011100001011", 107 => "1111110111110001", 
    108 => "0000000001110011", 109 => "1111110111110111", 110 => "0000011000010110", 
    111 => "0000011001101001", 112 => "1111111001110110", 113 => "0000110101100101", 
    114 => "1111111111001100", 115 => "0000000001001110", 116 => "0000000101010011", 
    117 => "0000000010100110", 118 => "0000000001010010", 119 => "0000000001101000", 
    120 => "1111101001111011", 121 => "1111111011010000", 122 => "0000001101001111", 
    123 => "0000001110110100", 124 => "0101000011100000", 125 => "0000000011101001", 
    126 => "0000001111111100", 127 => "1111111000001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Act4jc is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Act4jc is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Act4jc_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Act4jc_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Act4jc_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


