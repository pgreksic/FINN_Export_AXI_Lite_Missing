-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actocq_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Actocq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110111000011111", 1 => "1111111100001001", 2 => "0000000010100110", 
    3 => "1111110001111111", 4 => "1111110010100101", 5 => "1111111011000011", 
    6 => "1111110011110100", 7 => "0000010101010010", 8 => "0000010001100000", 
    9 => "0001110000011011", 10 => "0001000110111001", 11 => "1110010010100000", 
    12 => "0000000001100011", 13 => "1111110101010000", 14 => "1111111001001000", 
    15 => "0000010011110001", 16 => "1111110100101010", 17 => "0000011110010000", 
    18 => "0000010010010111", 19 => "1111111111011001", 20 => "1110011101110011", 
    21 => "0000000011101011", 22 => "1111000101100010", 23 => "0001011001001111", 
    24 => "1111100001101011", 25 => "0000010110010111", 26 => "0000000110110001", 
    27 => "0000000111001110", 28 => "1111011111000110", 29 => "1111010011101101", 
    30 => "1111111011011100", 31 => "1111110110011000", 32 => "1111111110110100", 
    33 => "0000001000011100", 34 => "0000001011100110", 35 => "0000001100010001", 
    36 => "0000000010001100", 37 => "1111100100110001", 38 => "0010000001100001", 
    39 => "0000011101000101", 40 => "1111100101001000", 41 => "0000010010001110", 
    42 => "0000001110101101", 43 => "0000010010010111", 44 => "0000010000111111", 
    45 => "0000000010101001", 46 => "1111010110111000", 47 => "0000010101110110", 
    48 => "0010011110101110", 49 => "0000001000000100", 50 => "0000011001101010", 
    51 => "1111111101100011", 52 => "1111110000010111", 53 => "0000000001110001", 
    54 => "0000010100010101", 55 => "0000010101111110", 56 => "1111111111100101", 
    57 => "1111111001101011", 58 => "1111101000110001", 59 => "0000000000010111", 
    60 => "0000010100101111", 61 => "1111100100011011", 62 => "0000010010000100", 
    63 => "0001011000100001", 64 => "1111000100010110", 65 => "0000000010000000", 
    66 => "1111110101001100", 67 => "0000010100111111", 68 => "1111111010110101", 
    69 => "0000001011110101", 70 => "1111111111001000", 71 => "1111100111000011", 
    72 => "0000001111110011", 73 => "1110110110101001", 74 => "1111100101110111", 
    75 => "1111110001110001", 76 => "0000000110011111", 77 => "1111111010011010", 
    78 => "1111110111101011", 79 => "0000000010010101", 80 => "0000000000000011", 
    81 => "0000001000110001", 82 => "0000000000000111", 83 => "1100110101100110", 
    84 => "0000000001111011", 85 => "0000010101011100", 86 => "0001011010010100", 
    87 => "0000000110011100", 88 => "0000001111100010", 89 => "1111111101101111", 
    90 => "1111110000011111", 91 => "1111001100101101", 92 => "0000000000010111", 
    93 => "0000000000100010", 94 => "1111111111011010", 95 => "0000001101111011", 
    96 => "1111110111110110", 97 => "0000000010101010", 98 => "0000000001111111", 
    99 => "1111111010010001", 100 => "1111110110101100", 101 => "0000000110100101", 
    102 => "0000001001011100", 103 => "1111100001011010", 104 => "1111111111100100", 
    105 => "0000001100011010", 106 => "1111111001011011", 107 => "0000001001111110", 
    108 => "1111101101010011", 109 => "0000000110101010", 110 => "1111111110011111", 
    111 => "0000000101110000", 112 => "0000000000010101", 113 => "0001000100001100", 
    114 => "1011011111010100", 115 => "1111100101000111", 116 => "0001000010100010", 
    117 => "1111011101010100", 118 => "0000000101100001", 119 => "1111110100100101", 
    120 => "1111111011001000", 121 => "0000110111011101", 122 => "1111111000000110", 
    123 => "0000000001001111", 124 => "1111100101110001", 125 => "0001111010011111", 
    126 => "0000000110101000", 127 => "0000010110000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actocq is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Actocq is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Actocq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Actocq_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Actocq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


