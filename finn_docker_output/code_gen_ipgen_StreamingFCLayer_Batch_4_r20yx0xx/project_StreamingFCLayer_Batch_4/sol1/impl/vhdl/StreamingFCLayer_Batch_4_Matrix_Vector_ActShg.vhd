-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActShg_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActShg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000001100011", 1 => "1111110111110111", 2 => "1111100101001010", 
    3 => "1111100000001111", 4 => "0000001100001010", 5 => "1111111011000010", 
    6 => "0000011011000110", 7 => "1111111101110100", 8 => "1111111011001101", 
    9 => "1111101001001001", 10 => "1111101111110110", 11 => "1111101100001110", 
    12 => "1111111111111000", 13 => "0000000000010000", 14 => "1111111110101111", 
    15 => "1011111111111100", 16 => "1111111001101111", 17 => "1111111001111110", 
    18 => "0000100101110110", 19 => "1111110001111111", 20 => "1111011100111101", 
    21 => "0000001111110010", 22 => "1111101110010111", 23 => "1011110011110011", 
    24 => "0000011100001010", 25 => "0000000101111000", 26 => "1111110000001110", 
    27 => "0000011110010010", 28 => "1111111111010001", 29 => "0000000111111100", 
    30 => "0111000000000001", 31 => "0000001010001001", 32 => "1111101110011110", 
    33 => "0000000111101101", 34 => "1111111001000001", 35 => "0000011101100100", 
    36 => "0000001101001111", 37 => "1111011100101100", 38 => "1110101110000010", 
    39 => "0110110101011101", 40 => "0000010000110111", 41 => "1111111000001111", 
    42 => "0000101001101101", 43 => "0000001111000011", 44 => "0000001010101110", 
    45 => "0000001100001011", 46 => "0000100001101101", 47 => "0000100111001000", 
    48 => "0000000000000110", 49 => "0000001101111011", 50 => "1111111100011101", 
    51 => "1111111011000000", 52 => "1111111111101100", 53 => "1111010110001110", 
    54 => "0000001001101100", 55 => "0000010010000100", 56 => "1111110010011111", 
    57 => "1111101000110011", 58 => "1111010111000001", 59 => "1111101111011101", 
    60 => "0000000111101000", 61 => "0000100011100110", 62 => "0000001101010101", 
    63 => "0000001001100100", 64 => "0000011100110101", 65 => "1111011100111101", 
    66 => "0000110001011011", 67 => "0000000010001011", 68 => "1111110100000000", 
    69 => "0000000110010100", 70 => "0000100011101110", 71 => "0000000110100001", 
    72 => "0000001010001000", 73 => "1111110101100100", 74 => "1111100101110100", 
    75 => "0000100001000100", 76 => "0000001000111100", 77 => "0000001100001010", 
    78 => "0000100001000011", 79 => "1111111010010010", 80 => "0000001000010110", 
    81 => "0000101111000001", 82 => "0000000111100001", 83 => "0000000001011010", 
    84 => "1111111110001100", 85 => "1111101011001011", 86 => "1111111110101110", 
    87 => "0000001100011101", 88 => "0000010001001101", 89 => "1110011101011011", 
    90 => "0000111000011100", 91 => "0000001011100010", 92 => "0000000000001001", 
    93 => "0000011011010100", 94 => "0000001010110011", 95 => "0001010101000100", 
    96 => "1110111101100000", 97 => "1110111010010101", 98 => "1111110101011010", 
    99 => "1111110011000110", 100 => "0001111011011000", 101 => "1111101000111101", 
    102 => "1111111110101011", 103 => "1111101001010100", 104 => "1111110100011010", 
    105 => "0000010001001101", 106 => "0000011001001111", 107 => "1111110100011101", 
    108 => "1111111110110101", 109 => "1111110100011001", 110 => "0000010101010100", 
    111 => "0000010110001100", 112 => "1111110111101010", 113 => "0000101100111111", 
    114 => "1111111011000010", 115 => "1111111100011000", 116 => "0000000010101100", 
    117 => "1111111111110001", 118 => "1111111111001011", 119 => "1111111110100100", 
    120 => "1111100111000100", 121 => "1111110110000010", 122 => "0000001010000101", 
    123 => "0000001100010001", 124 => "0010110011111000", 125 => "0000000001100001", 
    126 => "0000001100101000", 127 => "1111110101111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActShg is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActShg is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActShg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActShg_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActShg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


