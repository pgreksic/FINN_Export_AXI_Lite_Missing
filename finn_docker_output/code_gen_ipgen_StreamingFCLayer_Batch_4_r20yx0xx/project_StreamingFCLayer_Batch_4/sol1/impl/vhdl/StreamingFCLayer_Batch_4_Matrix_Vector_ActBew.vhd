-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActBew_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActBew_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111010101000", 1 => "0001110010100110", 2 => "0011011100010011", 
    3 => "0000011010111011", 4 => "1111100000101101", 5 => "0000000100100011", 
    6 => "1111111011111110", 7 => "1111101011111011", 8 => "1111111000110101", 
    9 => "0000001101110111", 10 => "1111110100000110", 11 => "1111101000011101", 
    12 => "0000011001101111", 13 => "1111110101001011", 14 => "1111111111101010", 
    15 => "0000001001001011", 16 => "0000000110111101", 17 => "1111111101001100", 
    18 => "0000000111110110", 19 => "0000010010011111", 20 => "0000001011010100", 
    21 => "1111011110010110", 22 => "1111110110000110", 23 => "1111110010100011", 
    24 => "0000001011111000", 25 => "0000001110111100", 26 => "0000001011101101", 
    27 => "1111100110001000", 28 => "0000000110100100", 29 => "1101000101101000", 
    30 => "1111101000100100", 31 => "0000010000110101", 32 => "1111110110011101", 
    33 => "1111111111110100", 34 => "1111000110100110", 35 => "1111111010000100", 
    36 => "0000000100101111", 37 => "1110110100011000", 38 => "0000001010001100", 
    39 => "0000000010110000", 40 => "0001010000001010", 41 => "1111000110001011", 
    42 => "0000000011000111", 43 => "1111110110110111", 44 => "0001100011110011", 
    45 => "0000010110001010", 46 => "1111111010100010", 47 => "0000010011001010", 
    48 => "0000000000111100", 49 => "1011000011100011", 50 => "1111101000001110", 
    51 => "1111001100000011", 52 => "1101111111110110", 53 => "1111110110001000", 
    54 => "0000100011111011", 55 => "0000000010011011", 56 => "0000011101111101", 
    57 => "1111101000000100", 58 => "0000000111010000", 59 => "1111101001111110", 
    60 => "1111111110110101", 61 => "1111011100001001", 62 => "0000001000000000", 
    63 => "0000000100011010", 64 => "0000001101011101", 65 => "0000001010011100", 
    66 => "0000001111000110", 67 => "0000011010011000", 68 => "1111110110100101", 
    69 => "0000000111011110", 70 => "0000010100010101", 71 => "0001001100100001", 
    72 => "0000000100010101", 73 => "1111101001110100", 74 => "0000000101011011", 
    75 => "1111111100000100", 76 => "1110110101001000", 77 => "0000000011101100", 
    78 => "1111111011000010", 79 => "1111100111000100", 80 => "0000010111011101", 
    81 => "1111110100111000", 82 => "0000010011100100", 83 => "0000001010010011", 
    84 => "1111111111101011", 85 => "0000001100011111", 86 => "1111011110011100", 
    87 => "0000001111101101", 88 => "0000011010111101", 89 => "0000000010000111", 
    90 => "0000000111010011", 91 => "0000000100001010", 92 => "1111111111000111", 
    93 => "0000000011011111", 94 => "1110111010101101", 95 => "1111110011101011", 
    96 => "1111111100000100", 97 => "1111111011110101", 98 => "1111111001101101", 
    99 => "1111100011000100", 100 => "0000000000111101", 101 => "1111010110111100", 
    102 => "0000000110000010", 103 => "0000100110011000", 104 => "0000000011000000", 
    105 => "1111111111110001", 106 => "0000010100110101", 107 => "0000001011000001", 
    108 => "0000010100001110", 109 => "0000011000001110", 110 => "1110100101100000", 
    111 => "0000000011000001", 112 => "1110000100101101", 113 => "0000001011010001", 
    114 => "0000001011000010", 115 => "0000010101001110", 116 => "1111010010101101", 
    117 => "0100100000001111", 118 => "1111111111100101", 119 => "1111110011110110", 
    120 => "1111111111100110", 121 => "0000001000111011", 122 => "1111100100101100", 
    123 => "1111110011100010", 124 => "0111000000000001", 125 => "0000110011011001", 
    126 => "0001101100100110", 127 => "1111111110111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActBew is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActBew is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActBew_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActBew_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActBew_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


