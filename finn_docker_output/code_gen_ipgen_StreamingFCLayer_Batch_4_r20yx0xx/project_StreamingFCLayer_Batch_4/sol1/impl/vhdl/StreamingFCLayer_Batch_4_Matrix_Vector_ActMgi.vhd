-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActMgi_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActMgi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111110000011000", 1 => "1111000000000111", 2 => "1111111101111010", 
    3 => "1111110100011000", 4 => "1111101110111000", 5 => "0000100010011011", 
    6 => "1111101100101111", 7 => "1111101110101101", 8 => "0000111000001101", 
    9 => "1111101010011011", 10 => "0000100111110101", 11 => "1111101001100101", 
    12 => "0000001001100100", 13 => "1011000110010000", 14 => "0000000100110111", 
    15 => "1111101011101101", 16 => "0000001000101010", 17 => "1111110010011100", 
    18 => "1111101000000011", 19 => "0000001011010110", 20 => "0111000000000001", 
    21 => "1100101000110010", 22 => "1111110011010100", 23 => "1111101000101101", 
    24 => "0000001010100011", 25 => "1111110111111010", 26 => "1110111000001101", 
    27 => "0000110001001110", 28 => "1111111111010110", 29 => "1111110111111010", 
    30 => "1111101101100110", 31 => "1111110101101001", 32 => "0000000011111001", 
    33 => "1111101101111101", 34 => "1111010110100100", 35 => "0000010001001001", 
    36 => "1110000010011010", 37 => "0000000010100000", 38 => "0000000010010110", 
    39 => "1111011000000110", 40 => "0000011001111111", 41 => "1111101111111010", 
    42 => "1111011011111010", 43 => "1111011111111111", 44 => "1111010111011101", 
    45 => "0000000011001111", 46 => "0000101011101101", 47 => "0000010101111001", 
    48 => "1111010011111001", 49 => "0000000100001000", 50 => "0000011111110111", 
    51 => "1111111101110001", 52 => "0001001011111000", 53 => "1111110010110110", 
    54 => "1111110101010001", 55 => "1111110000100111", 56 => "1111110010011100", 
    57 => "0000011111111001", 58 => "1111111001000101", 59 => "0000100001010010", 
    60 => "0000000010000110", 61 => "0000001010100110", 62 => "0000011011111011", 
    63 => "1111110000100110", 64 => "1111111011101110", 65 => "0000000010111111", 
    66 => "1111101101001100", 67 => "1111111001001101", 68 => "0000010000100110", 
    69 => "0000001100010001", 70 => "1111010001001001", 71 => "1111011010011000", 
    72 => "1111110101111111", 73 => "1111110001110000", 74 => "1111010011011110", 
    75 => "1101001100110011", 76 => "1111011010100000", 77 => "0000110011010100", 
    78 => "1111101101110001", 79 => "1111110101100100", 80 => "1111101110010111", 
    81 => "1111111111001100", 82 => "1111111100001001", 83 => "1111110011110100", 
    84 => "1111111011000011", 85 => "0000000010100000", 86 => "0000000111111010", 
    87 => "0000000010101100", 88 => "0000001010001000", 89 => "0000000110100110", 
    90 => "0000000110101100", 91 => "0000011101001101", 92 => "1111101010010101", 
    93 => "0001011001111000", 94 => "0001011111111011", 95 => "0000011010010111", 
    96 => "0001101000101001", 97 => "0000100001001001", 98 => "1111111101110001", 
    99 => "0000000010001011", 100 => "0110010001101001", 101 => "1111101001110110", 
    102 => "0000000010111011", 103 => "1111001011011111", 104 => "1111111001011110", 
    105 => "1111110111000010", 106 => "1111110000110001", 107 => "1111101111101100", 
    108 => "0000001011001001", 109 => "0000001100000111", 110 => "1111100000101011", 
    111 => "1111111000011000", 112 => "1111110110100011", 113 => "1111110100101011", 
    114 => "1111110001101010", 115 => "0000001001101000", 116 => "0000011010100001", 
    117 => "0000001010100111", 118 => "0111000000000001", 119 => "1111110101001100", 
    120 => "1110101001011001", 121 => "0000010101001011", 122 => "1111111001011010", 
    123 => "1111101101110000", 124 => "1111111010100110", 125 => "1111100111000111", 
    126 => "1111110001011100", 127 => "0000101000100111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActMgi is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActMgi is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActMgi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActMgi_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActMgi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


