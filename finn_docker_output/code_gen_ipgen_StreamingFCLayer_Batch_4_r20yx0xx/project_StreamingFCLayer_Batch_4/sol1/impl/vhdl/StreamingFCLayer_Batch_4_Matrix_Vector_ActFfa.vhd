-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActFfa_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActFfa_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101111000001", 1 => "1110110000111111", 2 => "1111111100101111", 
    3 => "1111110010110000", 4 => "1111101101110101", 5 => "0000100001001111", 
    6 => "1111101011011110", 7 => "1111101101011011", 8 => "0000101010000100", 
    9 => "1111101000100110", 10 => "0000100110010001", 11 => "1111100111111100", 
    12 => "0000000111110010", 13 => "1010001111100111", 14 => "0000000011011010", 
    15 => "1111101001110010", 16 => "0000000110110100", 17 => "1111110000101010", 
    18 => "1111100110100111", 19 => "0000001001010000", 20 => "0111000000000001", 
    21 => "1100000000100001", 22 => "1111110001111100", 23 => "1111100110101100", 
    24 => "0000001001001111", 25 => "1111110110100110", 26 => "1110110011111101", 
    27 => "0000100111011111", 28 => "1111111101110000", 29 => "1111110110110001", 
    30 => "1111101100001100", 31 => "1111110100010010", 32 => "0000000010011110", 
    33 => "1111101100101100", 34 => "1111010100110100", 35 => "0000001111101000", 
    36 => "1101101111000001", 37 => "0000000001001100", 38 => "1111111111111101", 
    39 => "1111010000101011", 40 => "0000010111110111", 41 => "1111101110100100", 
    42 => "1111011010010010", 43 => "1111011110010000", 44 => "1111010101110001", 
    45 => "0000000001111111", 46 => "0000101000000110", 47 => "0000010100100011", 
    48 => "1111001010010111", 49 => "0000000010001110", 50 => "0000011110101011", 
    51 => "1111111100001111", 52 => "0001000111011011", 53 => "1111110001101101", 
    54 => "1111110010110110", 55 => "1111101111100001", 56 => "1111101111111000", 
    57 => "0000011110011011", 58 => "1111110111110010", 59 => "0000011101001111", 
    60 => "0000000000101100", 61 => "0000001001011000", 62 => "0000011001111000", 
    63 => "1111101110111011", 64 => "1111111010010000", 65 => "0000000000100000", 
    66 => "1111101011010110", 67 => "1111110111011010", 68 => "0000001111000010", 
    69 => "0000001010100111", 70 => "1111001000001100", 71 => "1111011000100100", 
    72 => "1111110100110000", 73 => "1111110000001011", 74 => "1111001101101011", 
    75 => "1100101001000111", 76 => "1111011001001010", 77 => "0000101101100001", 
    78 => "1111101100010010", 79 => "1111110011001111", 80 => "1111101100110000", 
    81 => "1111111101011010", 82 => "1111111010011000", 83 => "1111110001111011", 
    84 => "1111111001100100", 85 => "0000000001011001", 86 => "0000000101100100", 
    87 => "0000000001101101", 88 => "0000000111101100", 89 => "0000000100101011", 
    90 => "0000000100010011", 91 => "0000001110000101", 92 => "1111100110101100", 
    93 => "0001010100001011", 94 => "0001010111001000", 95 => "0000011001000110", 
    96 => "0001001100110010", 97 => "0000011111011011", 98 => "1111111100110001", 
    99 => "0000000000100001", 100 => "0101000011010010", 101 => "1111100111101011", 
    102 => "0000000001100000", 103 => "1111001001011000", 104 => "1111110111011100", 
    105 => "1111110101011010", 106 => "1111101110100011", 107 => "1111101101110010", 
    108 => "0000001001000000", 109 => "0000001010101011", 110 => "1111011110101011", 
    111 => "1111110111001100", 112 => "1111110101101000", 113 => "1111110001100010", 
    114 => "1111101111110000", 115 => "0000000111100001", 116 => "0000011000101100", 
    117 => "0000001000100001", 118 => "0111000000000001", 119 => "1111110011100011", 
    120 => "1110100000110010", 121 => "0000010011100000", 122 => "1111111000011100", 
    123 => "1111101100100011", 124 => "1111111000101011", 125 => "1111100101011001", 
    126 => "1111101111011101", 127 => "0000100110111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActFfa is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActFfa is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActFfa_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActFfa_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActFfa_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


