-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actg8j_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Actg8j_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110101111000001", 1 => "1111111001110011", 2 => "1111111111111101", 
    3 => "1111101111110001", 4 => "1111101111110110", 5 => "1111111001010001", 
    6 => "1111110010010000", 7 => "0000010010010000", 8 => "0000001111101100", 
    9 => "0001100110000000", 10 => "0000111010111001", 11 => "1110000110101101", 
    12 => "1111111110111011", 13 => "1111110001000111", 14 => "1111110111101001", 
    15 => "0000010001101100", 16 => "1111110010011011", 17 => "0000010111100111", 
    18 => "0000010000111111", 19 => "1111111101000110", 20 => "1101011001000111", 
    21 => "0000000001111111", 22 => "1110111011011011", 23 => "0001010001000001", 
    24 => "1111011111101111", 25 => "0000010100011100", 26 => "0000000100110000", 
    27 => "0000000110000101", 28 => "1111011101010101", 29 => "1111001001100010", 
    30 => "1111111010000110", 31 => "1111110100001101", 32 => "1111111100100110", 
    33 => "0000000110101001", 34 => "0000001000110010", 35 => "0000001010001101", 
    36 => "0000000000011011", 37 => "1111100011001100", 38 => "0001101110001110", 
    39 => "0000011011011000", 40 => "1111100010110100", 41 => "0000010000101000", 
    42 => "0000001100010111", 43 => "0000010000000101", 44 => "0000001110100101", 
    45 => "0000000000111010", 46 => "1111010001111001", 47 => "0000010011110110", 
    48 => "0010000111100111", 49 => "0000000101110011", 50 => "0000011000010111", 
    51 => "1111111011001000", 52 => "1111101101100100", 53 => "1111111111010001", 
    54 => "0000010010110001", 55 => "0000010011110100", 56 => "1111111101101100", 
    57 => "1111110111110011", 58 => "1111100111001110", 59 => "1111111111100010", 
    60 => "0000010010000111", 61 => "1111011111001100", 62 => "0000001110111101", 
    63 => "0001001111011011", 64 => "1110111110101011", 65 => "0000000000100000", 
    66 => "1111110011000101", 67 => "0000010100001110", 68 => "1111111000100001", 
    69 => "0000001001110001", 70 => "1111111100000111", 71 => "1111011011110010", 
    72 => "0000001110001110", 73 => "1110101100011011", 74 => "1111100100000010", 
    75 => "1111110000010000", 76 => "0000000100111000", 77 => "1111111000001100", 
    78 => "1111110101011001", 79 => "0000000000101010", 80 => "1111111110000011", 
    81 => "0000000111001000", 82 => "1111111110101011", 83 => "1100001000101111", 
    84 => "0000000000000010", 85 => "0000010011111100", 86 => "0001001011101110", 
    87 => "1111111011010001", 88 => "0000001110010010", 89 => "1111111010111111", 
    90 => "1111101110000000", 91 => "1111000000000001", 92 => "1111111101101111", 
    93 => "1111111110001001", 94 => "1111111100010111", 95 => "0000001011011001", 
    96 => "1111110110001000", 97 => "0000000001010001", 98 => "1111111111101111", 
    99 => "1111111000011001", 100 => "1111110101001011", 101 => "0000000100110000", 
    102 => "0000000111111010", 103 => "1111011111110010", 104 => "1111111101010111", 
    105 => "0000001010110000", 106 => "1111110111101100", 107 => "0000001000011110", 
    108 => "1111101011001101", 109 => "0000000101001001", 110 => "1111111100111101", 
    111 => "0000000100001000", 112 => "1111111110100101", 113 => "0000111101111000", 
    114 => "1010100100100010", 115 => "1111100011010100", 116 => "0000111010010110", 
    117 => "1111010100111101", 118 => "0000000011101111", 119 => "1111110010001111", 
    120 => "1111111001100111", 121 => "0000110000001001", 122 => "1111110110101001", 
    123 => "1111111111000100", 124 => "1111100011100010", 125 => "0001101101101100", 
    126 => "0000000011110110", 127 => "0000010100001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actg8j is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Actg8j is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Actg8j_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Actg8j_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Actg8j_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


