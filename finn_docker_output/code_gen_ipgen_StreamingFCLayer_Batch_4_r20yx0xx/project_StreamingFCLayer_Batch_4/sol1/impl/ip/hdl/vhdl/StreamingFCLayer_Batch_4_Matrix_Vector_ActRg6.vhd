-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActRg6_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActRg6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000001010110", 1 => "1111110111101010", 2 => "1111100101000001", 
    3 => "1111011111111110", 4 => "0000001011111110", 5 => "1111111010101110", 
    6 => "0000011010110010", 7 => "1111111101100000", 8 => "1111111010111011", 
    9 => "1111101000111101", 10 => "1111101111100010", 11 => "1111101011111110", 
    12 => "1111111111101000", 13 => "0000000000000100", 14 => "1111111110011110", 
    15 => "1011111011100010", 16 => "1111111001100011", 17 => "1111111001110010", 
    18 => "0000100101010101", 19 => "1111110001101101", 20 => "1111011100110000", 
    21 => "0000001111100011", 22 => "1111101110001000", 23 => "1011101111111011", 
    24 => "0000011011111000", 25 => "0000000101101101", 26 => "1111101111111111", 
    27 => "0000011101000001", 28 => "1111111111000000", 29 => "0000000111101111", 
    30 => "0110111110100111", 31 => "0000001001110110", 32 => "1111101110010011", 
    33 => "0000000111011101", 34 => "1111111000101101", 35 => "0000011101010111", 
    36 => "0000001100111011", 37 => "1111011100011100", 38 => "1110101100111110", 
    39 => "0110101110101000", 40 => "0000010000100111", 41 => "1111111000000001", 
    42 => "0000101000010000", 43 => "0000001110110001", 44 => "0000001010100000", 
    45 => "0000001011110110", 46 => "0000100001011111", 47 => "0000100110111010", 
    48 => "1111111111111001", 49 => "0000001101101011", 50 => "1111111100001111", 
    51 => "1111111010110000", 52 => "1111111111011101", 53 => "1111010110000010", 
    54 => "0000001001011101", 55 => "0000010001110100", 56 => "1111110001111110", 
    57 => "1111101000100011", 58 => "1111010110011000", 59 => "1111101111001001", 
    60 => "0000000111011011", 61 => "0000100011011001", 62 => "0000001101000011", 
    63 => "0000001001010111", 64 => "0000011100100011", 65 => "1111011011100100", 
    66 => "0000110000001110", 67 => "0000000010000000", 68 => "1111110011110000", 
    69 => "0000000110000010", 70 => "0000100011100010", 71 => "0000000110001001", 
    72 => "0000001001111010", 73 => "1111110101010101", 74 => "1111100101011001", 
    75 => "0000100000110110", 76 => "0000001000011101", 77 => "0000001010110101", 
    78 => "0000100000111000", 79 => "1111111001111011", 80 => "0000001000000001", 
    81 => "0000101110000110", 82 => "0000000111010000", 83 => "0000000001000001", 
    84 => "1111111101111110", 85 => "1111101010111001", 86 => "1111111110100010", 
    87 => "0000001100001110", 88 => "0000010001000010", 89 => "1110011011000100", 
    90 => "0000110111011111", 91 => "0000001011001110", 92 => "1111111111111110", 
    93 => "0000011011000101", 94 => "0000001010100100", 95 => "0001010011110000", 
    96 => "1110111100110101", 97 => "1110111000110011", 98 => "1111110101001001", 
    99 => "1111110010111010", 100 => "0001111000000000", 101 => "1111101000110011", 
    102 => "1111111110100011", 103 => "1111101001000111", 104 => "1111110100001100", 
    105 => "0000010000111110", 106 => "0000011001000000", 107 => "1111110100001011", 
    108 => "1111111110100101", 109 => "1111110100000110", 110 => "0000010101000100", 
    111 => "0000010101111010", 112 => "1111110111011110", 113 => "0000101100010010", 
    114 => "1111111010101100", 115 => "1111111011111110", 116 => "0000000010011110", 
    117 => "1111111111100010", 118 => "1111111110111111", 119 => "1111111110010100", 
    120 => "1111100110110100", 121 => "1111110101100110", 122 => "0000001001110100", 
    123 => "0000001100000011", 124 => "0010100111111010", 125 => "0000000001010110", 
    126 => "0000001100010110", 127 => "1111110101110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActRg6 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActRg6 is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActRg6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActRg6_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActRg6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


