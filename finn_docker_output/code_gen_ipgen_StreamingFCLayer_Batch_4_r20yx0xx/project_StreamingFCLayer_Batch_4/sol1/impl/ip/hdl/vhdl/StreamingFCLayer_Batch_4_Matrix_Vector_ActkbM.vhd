-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActkbM_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActkbM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110110011110000", 1 => "1111111010111110", 2 => "0000000001010010", 
    3 => "1111110000111000", 4 => "1111110001001110", 5 => "1111111010001010", 
    6 => "1111110011000010", 7 => "0000010011110001", 8 => "0000010000100110", 
    9 => "0001101011001110", 10 => "0001000000111001", 11 => "1110001100100110", 
    12 => "0000000000001111", 13 => "1111110011001100", 14 => "1111111000011001", 
    15 => "0000010010101110", 16 => "1111110011100011", 17 => "0000011010111100", 
    18 => "0000010001101011", 19 => "1111111110010000", 20 => "1101111011011101", 
    21 => "0000000010110101", 22 => "1111000000011110", 23 => "0001010101001000", 
    24 => "1111100000101101", 25 => "0000010101011010", 26 => "0000000101110001", 
    27 => "0000000110101001", 28 => "1111011110001110", 29 => "1111001110101000", 
    30 => "1111111010110001", 31 => "1111110101010011", 32 => "1111111101101101", 
    33 => "0000000111100010", 34 => "0000001010001100", 35 => "0000001011001111", 
    36 => "0000000001010100", 37 => "1111100011111110", 38 => "0001110111110111", 
    39 => "0000011100001111", 40 => "1111100011111110", 41 => "0000010001011011", 
    42 => "0000001101100010", 43 => "0000010001001110", 44 => "0000001111110010", 
    45 => "0000000001110010", 46 => "1111010100011001", 47 => "0000010100110110", 
    48 => "0010010011001010", 49 => "0000000110111011", 50 => "0000011001000000", 
    51 => "1111111100010101", 52 => "1111101110111101", 53 => "0000000000100001", 
    54 => "0000010011100011", 55 => "0000010100111001", 56 => "1111111110101000", 
    57 => "1111111000101111", 58 => "1111101000000000", 59 => "1111111111111100", 
    60 => "0000010011011011", 61 => "1111100001110011", 62 => "0000010000100001", 
    63 => "0001010011111110", 64 => "1111000001100001", 65 => "0000000001010000", 
    66 => "1111110100001001", 67 => "0000010100100110", 68 => "1111111001101011", 
    69 => "0000001010110011", 70 => "1111111101100111", 71 => "1111100001011010", 
    72 => "0000001111000000", 73 => "1110110001100010", 74 => "1111100100111100", 
    75 => "1111110001000000", 76 => "0000000101101100", 77 => "1111111001010011", 
    78 => "1111110110100010", 79 => "0000000001011111", 80 => "1111111111000011", 
    81 => "0000000111111101", 82 => "1111111111011001", 83 => "1100011111001010", 
    84 => "0000000000111110", 85 => "0000010100101100", 86 => "0001010011000001", 
    87 => "0000000000110111", 88 => "0000001110111010", 89 => "1111111100010111", 
    90 => "1111101111010000", 91 => "1111000110010111", 92 => "1111111111000011", 
    93 => "1111111111010110", 94 => "1111111101111000", 95 => "0000001100101010", 
    96 => "1111110110111111", 97 => "0000000001111101", 98 => "0000000000110111", 
    99 => "1111111001010101", 100 => "1111110101111100", 101 => "0000000101101010", 
    102 => "0000001000101011", 103 => "1111100000100110", 104 => "1111111110011110", 
    105 => "0000001011100101", 106 => "1111111000100100", 107 => "0000001001001110", 
    108 => "1111101100010000", 109 => "0000000101111010", 110 => "1111111101101110", 
    111 => "0000000100111100", 112 => "1111111111011101", 113 => "0001000001000010", 
    114 => "1011000001111011", 115 => "1111100100001101", 116 => "0000111110011100", 
    117 => "1111011001001001", 118 => "0000000100101000", 119 => "1111110011011010", 
    120 => "1111111010011000", 121 => "0000110011110011", 122 => "1111110111011000", 
    123 => "0000000000001010", 124 => "1111100100101001", 125 => "0001110100000101", 
    126 => "0000000101001111", 127 => "0000010101000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActkbM is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActkbM is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActkbM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActkbM_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActkbM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


