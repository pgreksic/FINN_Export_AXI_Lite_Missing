-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActIfE_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActIfE_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101111100110", 1 => "1110110111011110", 2 => "1111111101001111", 
    3 => "1111110011011101", 4 => "1111101110010010", 5 => "0000100001110000", 
    6 => "1111101100000001", 7 => "1111101101111110", 8 => "0000110000001000", 
    9 => "1111101001011000", 10 => "0000100110111100", 11 => "1111101000101001", 
    12 => "0000001000100011", 13 => "1010100111000010", 14 => "0000000100000010", 
    15 => "1111101010100111", 16 => "0000000111100111", 17 => "1111110001011011", 
    18 => "1111100111001110", 19 => "0000001010001001", 20 => "0111000000000001", 
    21 => "1100010001110010", 22 => "1111110010100001", 23 => "1111100111100011", 
    24 => "0000001001110011", 25 => "1111110111001010", 26 => "1110110101110001", 
    27 => "0000101011101010", 28 => "1111111110011100", 29 => "1111110111010000", 
    30 => "1111101100110011", 31 => "1111110100110111", 32 => "0000000011000101", 
    33 => "1111101101001111", 34 => "1111010101100100", 35 => "0000010000010001", 
    36 => "1101110111010101", 37 => "0000000001110000", 38 => "0000000000111111", 
    39 => "1111010011110111", 40 => "0000011000110001", 41 => "1111101111001001", 
    42 => "1111011010111111", 43 => "1111011111000000", 44 => "1111010110011111", 
    45 => "0000000010100001", 46 => "0000101001101001", 47 => "0000010101001000", 
    48 => "1111001110011100", 49 => "0000000011000010", 50 => "0000011111001100", 
    51 => "1111111100111001", 52 => "0001001001010101", 53 => "1111110010001100", 
    54 => "1111110011111000", 55 => "1111101111111111", 56 => "1111110000111110", 
    57 => "0000011111000011", 58 => "1111111000010101", 59 => "0000011110111110", 
    60 => "0000000001010010", 61 => "0000001001111001", 62 => "0000011010110000", 
    63 => "1111101111101000", 64 => "1111111010111001", 65 => "0000000001100100", 
    66 => "1111101100001000", 67 => "1111111000001011", 68 => "0000001111101101", 
    69 => "0000001011010100", 70 => "1111001100000001", 71 => "1111011001010101", 
    72 => "1111110101010010", 73 => "1111110000110110", 74 => "1111010000001010", 
    75 => "1100111000011010", 76 => "1111011001101111", 77 => "0000110000000000", 
    78 => "1111101100111011", 79 => "1111110100001111", 80 => "1111101101011100", 
    81 => "1111111110001011", 82 => "1111111011001000", 83 => "1111110010101111", 
    84 => "1111111010001101", 85 => "0000000001110111", 86 => "0000000110100101", 
    87 => "0000000010001000", 88 => "0000001000101111", 89 => "0000000101100000", 
    90 => "0000000101010101", 91 => "0000010100100100", 92 => "1111101000010000", 
    93 => "0001010110101000", 94 => "0001011010111001", 95 => "0000011001101001", 
    96 => "0001011000101110", 97 => "0000100000001010", 98 => "1111111101001101", 
    99 => "0000000001001110", 100 => "0101100100110111", 101 => "1111101000100110", 
    102 => "0000000010000111", 103 => "1111001010010010", 104 => "1111111000010100", 
    105 => "1111110110000111", 106 => "1111101111100000", 107 => "1111101110100110", 
    108 => "0000001001111011", 109 => "0000001011010010", 110 => "1111011111100010", 
    111 => "1111110111101101", 112 => "1111110110000001", 113 => "1111110010111000", 
    114 => "1111110000100100", 115 => "0000001000011011", 116 => "0000011001011110", 
    117 => "0000001001011010", 118 => "0111000000000001", 119 => "1111110100010000", 
    120 => "1110100100011110", 121 => "0000010100001110", 122 => "1111111000110111", 
    123 => "1111101101000100", 124 => "1111111001100000", 125 => "1111100110001000", 
    126 => "1111110000010011", 127 => "0000100111101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActIfE is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActIfE is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActIfE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActIfE_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActIfE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


