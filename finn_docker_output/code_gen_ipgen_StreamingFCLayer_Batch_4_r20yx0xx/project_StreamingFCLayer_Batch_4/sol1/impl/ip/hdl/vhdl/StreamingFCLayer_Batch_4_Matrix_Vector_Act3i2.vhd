-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Act3i2_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Act3i2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000011110011", 1 => "1111111010001010", 2 => "1111100110110011", 
    3 => "1111100011001000", 4 => "0000001110001110", 5 => "1111111110011010", 
    6 => "0000011110011010", 7 => "0000000001001010", 8 => "1111111110010101", 
    9 => "1111101011001111", 10 => "1111110011001101", 11 => "1111101110111000", 
    12 => "0000000010100101", 13 => "0000000010010110", 14 => "0000000001101010", 
    15 => "1100110000010111", 16 => "1111111011110010", 17 => "1111111100000001", 
    18 => "0000101011100011", 19 => "1111110101001000", 20 => "1111011111001101", 
    21 => "0000010010010100", 22 => "1111110000111100", 23 => "1100011110010001", 
    24 => "0000011111011001", 25 => "0000000111111010", 26 => "1111110010101110", 
    27 => "0000101100010001", 28 => "0000000010000111", 29 => "0000001010001101", 
    30 => "0111000000000001", 31 => "0000001101100000", 32 => "1111110000011110", 
    33 => "0000001010100000", 34 => "1111111100011101", 35 => "0000011111111000", 
    36 => "0000010000101100", 37 => "1111011111011010", 38 => "1110111001110111", 
    39 => "0111000000000001", 40 => "0000010011100001", 41 => "1111111010101101", 
    42 => "0000111001110110", 43 => "0000010010001100", 44 => "0000001101000010", 
    45 => "0000001111111011", 46 => "0000100100001000", 47 => "0000101001100100", 
    48 => "0000000010011000", 49 => "0000010000101101", 50 => "1111111110111001", 
    51 => "1111111101101101", 52 => "0000000010010111", 53 => "1111011000010110", 
    54 => "0000001100010011", 55 => "0000010100111100", 56 => "1111111000000101", 
    57 => "1111101011011111", 58 => "1111011101111110", 59 => "1111110010110111", 
    60 => "0000001001110110", 61 => "0000100101101110", 62 => "0000010000011110", 
    63 => "0000001011110010", 64 => "0000011111110101", 65 => "1111101100001110", 
    66 => "0000111110101110", 67 => "0000000100000111", 68 => "1111110110101111", 
    69 => "0000001001011110", 70 => "0000100101111000", 71 => "0000001010101110", 
    72 => "0000001100011111", 73 => "1111111000001111", 74 => "1111101010010100", 
    75 => "0000100011010110", 76 => "0000001110011000", 77 => "0000011010110110", 
    78 => "0000100010111111", 79 => "1111111110010101", 80 => "0000001100000010", 
    81 => "0000111001000001", 82 => "0000001010011100", 83 => "0000000101101000", 
    84 => "0000000000100100", 85 => "1111101110010001", 86 => "0000000000101011", 
    87 => "0000001111000000", 88 => "0000010011000110", 89 => "1110110111011011", 
    90 => "0001000010111011", 91 => "0000001110111011", 92 => "0000000010000111", 
    93 => "0000011101111101", 94 => "0000001101011101", 95 => "0001100011011111", 
    96 => "1111000100111001", 97 => "1111001011001111", 98 => "1111111000010010", 
    99 => "1111110101001100", 100 => "0010100000011111", 101 => "1111101010101001", 
    102 => "0000000000000000", 103 => "1111101011101001", 104 => "1111110110110111", 
    105 => "0000010011101101", 106 => "0000011011111011", 107 => "1111110111100000", 
    108 => "0000000001100011", 109 => "1111110111100101", 110 => "0000011000000110", 
    111 => "0000011001010111", 112 => "1111111001101010", 113 => "0000110100110111", 
    114 => "1111111110110110", 115 => "0000000000110100", 116 => "0000000101000101", 
    117 => "0000000010010111", 118 => "0000000001000111", 119 => "0000000001010111", 
    120 => "1111101001101011", 121 => "1111111010110101", 122 => "0000001100111110", 
    123 => "0000001110100110", 124 => "0100110111100010", 125 => "0000000011011101", 
    126 => "0000001111101011", 127 => "1111110111111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Act3i2 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Act3i2 is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Act3i2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Act3i2_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Act3i2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


