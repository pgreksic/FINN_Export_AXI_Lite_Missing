-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActHfu_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActHfu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101111011010", 1 => "1110110101010100", 2 => "1111111101000100", 
    3 => "1111110011001110", 4 => "1111101110001000", 5 => "0000100001100101", 
    6 => "1111101011110101", 7 => "1111101101110010", 8 => "0000101110000110", 
    9 => "1111101001001000", 10 => "0000100110101110", 11 => "1111101000011010", 
    12 => "0000001000010010", 13 => "1010011111001110", 14 => "0000000011110100", 
    15 => "1111101010010101", 16 => "0000000111010110", 17 => "1111110001001010", 
    18 => "1111100111000001", 19 => "0000001001110110", 20 => "0111000000000001", 
    21 => "1100001100000001", 22 => "1111110010010101", 23 => "1111100111010001", 
    24 => "0000001001100111", 25 => "1111110110111110", 26 => "1110110101001010", 
    27 => "0000101010010001", 28 => "1111111110001101", 29 => "1111110111000110", 
    30 => "1111101100100110", 31 => "1111110100101011", 32 => "0000000010111000", 
    33 => "1111101101000011", 34 => "1111010101010100", 35 => "0000010000000011", 
    36 => "1101110100100011", 37 => "0000000001100100", 38 => "0000000000101001", 
    39 => "1111010010110011", 40 => "0000011000011110", 41 => "1111101110111100", 
    42 => "1111011010110000", 43 => "1111011110110000", 44 => "1111010110010000", 
    45 => "0000000010010110", 46 => "0000101001001000", 47 => "0000010100111100", 
    48 => "1111001101000101", 49 => "0000000010110001", 50 => "0000011111000001", 
    51 => "1111111100101011", 52 => "0001001000101101", 53 => "1111110010000010", 
    54 => "1111110011100010", 55 => "1111101111110101", 56 => "1111110000100111", 
    57 => "0000011110110110", 58 => "1111111000001001", 59 => "0000011110011001", 
    60 => "0000000001000110", 61 => "0000001001101110", 62 => "0000011010011110", 
    63 => "1111101111011001", 64 => "1111111010101011", 65 => "0000000001001101", 
    66 => "1111101011111000", 67 => "1111110111111011", 68 => "0000001111011110", 
    69 => "0000001011000101", 70 => "1111001010101111", 71 => "1111011001000101", 
    72 => "1111110101000110", 73 => "1111110000101000", 74 => "1111001111010101", 
    75 => "1100110011010100", 76 => "1111011001100011", 77 => "0000101111001011", 
    78 => "1111101100101101", 79 => "1111110011111010", 80 => "1111101101001101", 
    81 => "1111111101111011", 82 => "1111111010111000", 83 => "1111110010011110", 
    84 => "1111111001111111", 85 => "0000000001101101", 86 => "0000000110001111", 
    87 => "0000000001111111", 88 => "0000001000011001", 89 => "0000000101001110", 
    90 => "0000000100111111", 91 => "0000010010011010", 92 => "1111100111101111", 
    93 => "0001010101110100", 94 => "0001011001101001", 95 => "0000011001011101", 
    96 => "0001010100101111", 97 => "0000011111111010", 98 => "1111111101000011", 
    99 => "0000000000111111", 100 => "0101011001101011", 101 => "1111101000010010", 
    102 => "0000000001111010", 103 => "1111001001111110", 104 => "1111111000000010", 
    105 => "1111110101111000", 106 => "1111101111001100", 107 => "1111101110010101", 
    108 => "0000001001100111", 109 => "0000001011000101", 110 => "1111011111010000", 
    111 => "1111110111100010", 112 => "1111110101111001", 113 => "1111110010011100", 
    114 => "1111110000010011", 115 => "0000001000001000", 116 => "0000011001001101", 
    117 => "0000001001000111", 118 => "0111000000000001", 119 => "1111110100000001", 
    120 => "1110100011010000", 121 => "0000010011111110", 122 => "1111111000101110", 
    123 => "1111101100111001", 124 => "1111111001001110", 125 => "1111100101111000", 
    126 => "1111110000000001", 127 => "0000100111011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActHfu is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActHfu is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActHfu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActHfu_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActHfu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


