-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActWhU_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActWhU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000010010111", 1 => "1111111000101100", 2 => "1111100101110001", 
    3 => "1111100001010010", 4 => "0000001100111010", 5 => "1111111100010001", 
    6 => "0000011100010011", 7 => "1111111111000001", 8 => "1111111100010101", 
    9 => "1111101001111010", 10 => "1111110001000100", 11 => "1111101101001100", 
    12 => "0000000000110111", 13 => "0000000001000001", 14 => "1111111111110011", 
    15 => "1100010001100011", 16 => "1111111010011110", 17 => "1111111010101110", 
    18 => "0000100111111011", 19 => "1111110011001000", 20 => "1111011101110010", 
    21 => "0000010000101101", 22 => "1111101111010011", 23 => "1100000011001111", 
    24 => "0000011101010110", 25 => "0000000110100111", 26 => "1111110001001000", 
    27 => "0000100011011000", 28 => "0000000000010011", 29 => "0000001000110001", 
    30 => "0111000000000001", 31 => "0000001011011000", 32 => "1111101111001101", 
    33 => "0000001000101110", 34 => "1111111010010001", 35 => "0000011110011010", 
    36 => "0000001110100000", 37 => "1111011101101011", 38 => "1110110010010101", 
    39 => "0111000000000001", 40 => "0000010001110101", 41 => "1111111001001000", 
    42 => "0000101111100101", 43 => "0000010000001100", 44 => "0000001011100100", 
    45 => "0000001101100010", 46 => "0000100010100101", 47 => "0000101000000001", 
    48 => "0000000000111011", 49 => "0000001110111100", 50 => "1111111101010110", 
    51 => "1111111011111111", 52 => "0000000000101010", 53 => "1111010111000000", 
    54 => "0000001010101001", 55 => "0000010011000111", 56 => "1111110100100001", 
    57 => "1111101001110001", 58 => "1111011001100011", 59 => "1111110000101100", 
    60 => "0000001000011100", 61 => "0000100100010111", 62 => "0000001110011110", 
    63 => "0000001010011000", 64 => "0000011101111010", 65 => "1111100010100000", 
    66 => "0000110110010001", 67 => "0000000010111000", 68 => "1111110101000000", 
    69 => "0000000111011101", 70 => "0000100100100000", 71 => "0000001000000011", 
    72 => "0000001010111111", 73 => "1111110110100010", 74 => "1111100111011100", 
    75 => "0000100001111001", 76 => "0000001010111011", 77 => "0000010001100000", 
    78 => "0000100001110000", 79 => "1111111011110001", 80 => "0000001001101100", 
    81 => "0000110010101010", 82 => "0000001000100101", 83 => "0000000010111100", 
    84 => "1111111111000011", 85 => "1111101100010011", 86 => "1111111111011011", 
    87 => "0000001101011000", 88 => "0000010001111001", 89 => "1110100110111000", 
    90 => "0000111100010000", 91 => "0000001100110001", 92 => "0000000000110111", 
    93 => "0000011100010010", 94 => "0000001011110001", 95 => "0001011010010011", 
    96 => "1111000000001100", 97 => "1111000000011110", 98 => "1111110110011101", 
    99 => "1111110011110111", 100 => "0010001000110111", 101 => "1111101001100100", 
    102 => "1111111111001010", 103 => "1111101010001010", 104 => "1111110101010011", 
    105 => "0000010010000111", 106 => "0000011010001110", 107 => "1111110101100100", 
    108 => "1111111111110100", 109 => "1111110101100011", 110 => "0000010110010100", 
    111 => "0000010111010110", 112 => "1111111000011000", 113 => "0000101111110111", 
    114 => "1111111100011011", 115 => "1111111101111111", 116 => "0000000011100011", 
    117 => "0000000000101101", 118 => "1111111111111000", 119 => "1111111111100101", 
    120 => "1111101000000001", 121 => "1111110111110010", 122 => "0000001011001000", 
    123 => "0000001101000111", 124 => "0011100011110000", 125 => "0000000010001110", 
    126 => "0000001101101111", 127 => "1111110110101101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActWhU is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActWhU is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActWhU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActWhU_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActWhU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


