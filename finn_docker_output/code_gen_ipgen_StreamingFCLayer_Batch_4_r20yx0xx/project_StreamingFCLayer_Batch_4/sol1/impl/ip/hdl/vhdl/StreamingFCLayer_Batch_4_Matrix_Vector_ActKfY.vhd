-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActKfY_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActKfY_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101111111111", 1 => "1110111011110010", 2 => "1111111101100100", 
    3 => "1111110011111011", 4 => "1111101110100101", 5 => "0000100010000110", 
    6 => "1111101100011000", 7 => "1111101110010101", 8 => "0000110100001010", 
    9 => "1111101001111010", 10 => "0000100111011001", 11 => "1111101001000111", 
    12 => "0000001001000011", 13 => "1010110110101001", 14 => "0000000100011100", 
    15 => "1111101011001010", 16 => "0000001000001001", 17 => "1111110001111011", 
    18 => "1111100111101000", 19 => "0000001010110000", 20 => "0111000000000001", 
    21 => "1100011101010010", 22 => "1111110010111011", 23 => "1111101000001000", 
    24 => "0000001010001011", 25 => "1111110111100010", 26 => "1110110110111111", 
    27 => "0000101110011100", 28 => "1111111110111001", 29 => "1111110111100101", 
    30 => "1111101101001100", 31 => "1111110101010000", 32 => "0000000011011111", 
    33 => "1111101101100110", 34 => "1111010110000100", 35 => "0000010000101101", 
    36 => "1101111100111000", 37 => "0000000010001000", 38 => "0000000001101010", 
    39 => "1111010101111111", 40 => "0000011001011000", 41 => "1111101111100010", 
    42 => "1111011011011100", 43 => "1111011111011111", 44 => "1111010110111110", 
    45 => "0000000010111000", 46 => "0000101010101011", 47 => "0000010101100001", 
    48 => "1111010001001010", 49 => "0000000011100101", 50 => "0000011111100001", 
    51 => "1111111101010101", 52 => "0001001010100111", 53 => "1111110010100001", 
    54 => "1111110100100100", 55 => "1111110000010011", 56 => "1111110001101101", 
    57 => "0000011111011110", 58 => "1111111000101101", 59 => "0000100000001000", 
    60 => "0000000001101100", 61 => "0000001010010000", 62 => "0000011011010110", 
    63 => "1111110000000111", 64 => "1111111011010011", 65 => "0000000010010010", 
    66 => "1111101100101010", 67 => "1111111000101100", 68 => "0000010000001001", 
    69 => "0000001011110011", 70 => "1111001110100101", 71 => "1111011001110111", 
    72 => "1111110101101001", 73 => "1111110001010011", 74 => "1111010001110100", 
    75 => "1101000010100111", 76 => "1111011010000111", 77 => "0000110001101010", 
    78 => "1111101101010110", 79 => "1111110100111001", 80 => "1111101101111010", 
    81 => "1111111110101011", 82 => "1111111011101001", 83 => "1111110011010010", 
    84 => "1111111010101000", 85 => "0000000010001100", 86 => "0000000111001111", 
    87 => "0000000010011010", 88 => "0000001001011100", 89 => "0000000110000011", 
    90 => "0000000110000000", 91 => "0000011000111000", 92 => "1111101001010011", 
    93 => "0001011000010000", 94 => "0001011101011010", 95 => "0000011010000000", 
    96 => "0001100000101011", 97 => "0000100000101001", 98 => "1111111101011111", 
    99 => "0000000001101101", 100 => "0101111011010000", 101 => "1111101001001110", 
    102 => "0000000010100001", 103 => "1111001010111000", 104 => "1111111000111001", 
    105 => "1111110110100101", 106 => "1111110000001000", 107 => "1111101111001001", 
    108 => "0000001010100010", 109 => "0000001011101100", 110 => "1111100000000111", 
    111 => "1111111000000011", 112 => "1111110110010010", 113 => "1111110011110010", 
    114 => "1111110001000111", 115 => "0000001001000001", 116 => "0000011001111111", 
    117 => "0000001010000001", 118 => "0111000000000001", 119 => "1111110100101110", 
    120 => "1110100110111100", 121 => "0000010100101100", 122 => "1111111001001000", 
    123 => "1111101101011010", 124 => "1111111010000011", 125 => "1111100110101000", 
    126 => "1111110000110111", 127 => "0000101000001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActKfY is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActKfY is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActKfY_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActKfY_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActKfY_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


