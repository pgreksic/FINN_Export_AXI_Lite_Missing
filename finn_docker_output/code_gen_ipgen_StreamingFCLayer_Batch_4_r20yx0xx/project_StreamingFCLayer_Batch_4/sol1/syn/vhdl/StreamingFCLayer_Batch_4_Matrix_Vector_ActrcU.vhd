-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActrcU_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActrcU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111000110000", 1 => "0001011101001101", 2 => "0010111001000110", 
    3 => "0000011000000110", 4 => "1111011001000101", 5 => "0000000010001111", 
    6 => "1111101110001110", 7 => "1111101001111001", 8 => "1111110111001001", 
    9 => "0000001010000010", 10 => "1111110010011011", 11 => "1111100110010001", 
    12 => "0000010110011101", 13 => "1111110010101010", 14 => "1111111100100100", 
    15 => "0000000110001100", 16 => "0000000100101101", 17 => "1111111001100111", 
    18 => "0000000101110100", 19 => "0000010000011101", 20 => "0000001001011000", 
    21 => "1111011011111111", 22 => "1111110010111101", 23 => "1111101111001011", 
    24 => "0000001001000100", 25 => "0000001100110100", 26 => "0000001001110001", 
    27 => "1111100011110110", 28 => "0000000100111111", 29 => "1100100011111000", 
    30 => "1111100110110101", 31 => "0000001110010111", 32 => "1111110011110000", 
    33 => "1111111101100111", 34 => "1110111011110101", 35 => "1111110111101101", 
    36 => "0000000001110001", 37 => "1110101010100111", 38 => "0000000111001110", 
    39 => "0000000000011100", 40 => "0001000100100010", 41 => "1110111010111010", 
    42 => "1111111111110011", 43 => "1111110100011110", 44 => "0001010011011100", 
    45 => "0000010011100101", 46 => "1111111000001111", 47 => "0000010000101010", 
    48 => "1111111110100101", 49 => "1010001001001110", 50 => "1111100101111111", 
    51 => "1110101010100100", 52 => "1101011100000101", 53 => "1111110100100100", 
    54 => "0000100010000001", 55 => "0000000000100000", 56 => "0000011101010100", 
    57 => "1111100110000101", 58 => "0000000101010111", 59 => "1111100111010111", 
    60 => "1111111101010110", 61 => "1111011001111000", 62 => "0000000101100111", 
    63 => "0000000010000010", 64 => "0000001011000100", 65 => "0000000111101001", 
    66 => "0000001011110000", 67 => "0000010111001100", 68 => "1111110011101011", 
    69 => "0000000101001001", 70 => "0000010010100001", 71 => "0001000011111001", 
    72 => "0000000001010001", 73 => "1111100000111000", 74 => "0000000010010111", 
    75 => "1111111001000010", 76 => "1110101010001110", 77 => "0000000001100010", 
    78 => "1111111000100000", 79 => "1111100101000000", 80 => "0000010101011110", 
    81 => "1111110011001101", 82 => "0000001111001101", 83 => "0000001000010000", 
    84 => "1111111100010100", 85 => "0000001010011110", 86 => "1111011100001011", 
    87 => "0000001100100100", 88 => "0000011000110001", 89 => "1111111101111101", 
    90 => "0000000101001111", 91 => "0000000001100110", 92 => "1111111100111001", 
    93 => "0000000000110001", 94 => "1110100101001001", 95 => "1111110000110000", 
    96 => "1111111001010100", 97 => "1111111000110100", 98 => "1111110110010110", 
    99 => "1111100000010010", 100 => "1111111110110100", 101 => "1111010101000111", 
    102 => "0000000100001010", 103 => "0000011011000001", 104 => "0000000000111000", 
    105 => "1111111101100100", 106 => "0000010010110110", 107 => "0000001001010001", 
    108 => "0000010010010111", 109 => "0000010101111011", 110 => "1110000101011100", 
    111 => "0000000001010110", 112 => "1101101011001100", 113 => "0000001001100111", 
    114 => "0000001000101011", 115 => "0000010011010110", 116 => "1111001111110100", 
    117 => "0011100000010110", 118 => "1111111101010011", 119 => "1111110001001010", 
    120 => "1111111101010001", 121 => "0000000101101011", 122 => "1111100010111110", 
    123 => "1111110000111100", 124 => "0111000000000001", 125 => "0000101001000010", 
    126 => "0001010000110000", 127 => "1111111101010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActrcU is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActrcU is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActrcU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActrcU_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActrcU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


