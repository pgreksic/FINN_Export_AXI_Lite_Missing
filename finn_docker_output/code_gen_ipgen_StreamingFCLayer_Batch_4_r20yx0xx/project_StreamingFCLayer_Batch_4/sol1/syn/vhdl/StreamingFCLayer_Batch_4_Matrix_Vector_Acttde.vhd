-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Acttde_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Acttde_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111001001000", 1 => "0001100001011111", 2 => "0011000000001001", 
    3 => "0000011000101010", 4 => "1111011010100110", 5 => "0000000010101101", 
    6 => "1111110000111110", 7 => "1111101010010011", 8 => "1111110111011111", 
    9 => "0000001010110011", 10 => "1111110010110001", 11 => "1111100110101101", 
    12 => "0000010111000111", 13 => "1111110011001010", 14 => "1111111101001100", 
    15 => "0000000110110010", 16 => "0000000101001010", 17 => "1111111010010100", 
    18 => "0000000110001110", 19 => "0000010000110111", 20 => "0000001001110001", 
    21 => "1111011100011101", 22 => "1111110011100101", 23 => "1111101111110110", 
    24 => "0000001001101000", 25 => "0000001101010000", 26 => "0000001010001010", 
    27 => "1111100100010011", 28 => "0000000101010100", 29 => "1100101010101000", 
    30 => "1111100111001011", 31 => "0000001110110111", 32 => "1111110100010011", 
    33 => "1111111110000011", 34 => "1110111101111111", 35 => "1111111000001011", 
    36 => "0000000010010111", 37 => "1110101100100100", 38 => "0000000111110100", 
    39 => "0000000000111010", 40 => "0001000110110110", 41 => "1110111101001010", 
    42 => "0000000000011110", 43 => "1111110100111101", 44 => "0001010110101101", 
    45 => "0000010100000110", 46 => "1111111000101100", 47 => "0000010001001010", 
    48 => "1111111111000011", 49 => "1010010100111000", 50 => "1111100110011100", 
    51 => "1110110001010000", 52 => "1101100011001111", 53 => "1111110100111000", 
    54 => "0000100010011001", 55 => "0000000000111001", 56 => "0000011101011100", 
    57 => "1111100110011111", 58 => "0000000101101111", 59 => "1111100111111000", 
    60 => "1111111101101001", 61 => "1111011010010101", 62 => "0000000110000110", 
    63 => "0000000010100001", 64 => "0000001011100011", 65 => "0000001000001101", 
    66 => "0000001100011011", 67 => "0000010111110101", 68 => "1111110100010000", 
    69 => "0000000101100111", 70 => "0000010010111000", 71 => "0001000101101000", 
    72 => "0000000001111000", 73 => "1111100010101010", 74 => "0000000010111110", 
    75 => "1111111001101001", 76 => "1110101100011010", 77 => "0000000001111110", 
    78 => "1111111001000000", 79 => "1111100101011010", 80 => "0000010101110111", 
    81 => "1111110011100011", 82 => "0000010000000101", 83 => "0000001000101010", 
    84 => "1111111100111111", 85 => "0000001010111000", 86 => "1111011100101000", 
    87 => "0000001101001100", 88 => "0000011001001101", 89 => "1111111110110010", 
    90 => "0000000101101001", 91 => "0000000010000111", 92 => "1111111101010110", 
    93 => "0000000001010100", 94 => "1110101001011101", 95 => "1111110001010110", 
    96 => "1111111001111000", 97 => "1111111001011011", 98 => "1111110111000001", 
    99 => "1111100000110101", 100 => "1111111111001111", 101 => "1111010101011110", 
    102 => "0000000100100010", 103 => "0000011101010010", 104 => "0000000001010011", 
    105 => "1111111110000000", 106 => "0000010011001111", 107 => "0000001001101000", 
    108 => "0000010010101111", 109 => "0000010110011000", 110 => "1110001011110111", 
    111 => "0000000001101100", 112 => "1101110000010011", 113 => "0000001001111100", 
    114 => "0000001001001001", 115 => "0000010011101110", 116 => "1111010000011001", 
    117 => "0011101101001000", 118 => "1111111101110000", 119 => "1111110001101100", 
    120 => "1111111101101111", 121 => "0000000110010100", 122 => "1111100011010100", 
    123 => "1111110001011101", 124 => "0111000000000001", 125 => "0000101011000111", 
    126 => "0001010110010101", 127 => "1111111101100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Acttde is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Acttde is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Acttde_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Acttde_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Acttde_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


