-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actvdy_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Actvdy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111001100000", 1 => "0001100101110001", 2 => "0011000111001011", 
    3 => "0000011001001110", 4 => "1111011100001000", 5 => "0000000011001010", 
    6 => "1111110011101110", 7 => "1111101010101101", 8 => "1111110111110100", 
    9 => "0000001011100100", 10 => "1111110011000110", 11 => "1111100111001001", 
    12 => "0000010111110001", 13 => "1111110011101011", 14 => "1111111101110011", 
    15 => "0000000111011000", 16 => "0000000101100111", 17 => "1111111011000010", 
    18 => "0000000110101000", 19 => "0000010001010001", 20 => "0000001010001010", 
    21 => "1111011100111011", 22 => "1111110100001101", 23 => "1111110000100001", 
    24 => "0000001010001100", 25 => "0000001101101011", 26 => "0000001010100011", 
    27 => "1111100100110000", 28 => "0000000101101000", 29 => "1100110001011000", 
    30 => "1111100111100001", 31 => "0000001111010110", 32 => "1111110100110110", 
    33 => "1111111110011111", 34 => "1111000000001000", 35 => "1111111000101001", 
    36 => "0000000010111101", 37 => "1110101110100001", 38 => "0000001000011010", 
    39 => "0000000001010111", 40 => "0001001001001011", 41 => "1110111111011011", 
    42 => "0000000001001000", 43 => "1111110101011011", 44 => "0001011001111111", 
    45 => "0000010100100111", 46 => "1111111001001010", 47 => "0000010001101010", 
    48 => "1111111111100001", 49 => "1010100000100011", 50 => "1111100110111000", 
    51 => "1110110111111101", 52 => "1101101010011000", 53 => "1111110101001100", 
    54 => "0000100010110010", 55 => "0000000001010001", 56 => "0000011101100100", 
    57 => "1111100110111000", 58 => "0000000110000111", 59 => "1111101000011010", 
    60 => "1111111101111100", 61 => "1111011010110010", 62 => "0000000110100100", 
    63 => "0000000010111111", 64 => "0000001100000010", 65 => "0000001000110001", 
    66 => "0000001101000101", 67 => "0000011000011110", 68 => "1111110100110101", 
    69 => "0000000110000101", 70 => "0000010011001111", 71 => "0001000111010110", 
    72 => "0000000010100000", 73 => "1111100100011101", 74 => "0000000011100110", 
    75 => "1111111010010000", 76 => "1110101110100101", 77 => "0000000010011001", 
    78 => "1111111001100001", 79 => "1111100101110101", 80 => "0000010110010001", 
    81 => "1111110011111000", 82 => "0000010000111101", 83 => "0000001001000101", 
    84 => "1111111101101010", 85 => "0000001011010010", 86 => "1111011101000101", 
    87 => "0000001101110100", 88 => "0000011001101001", 89 => "1111111111101000", 
    90 => "0000000110000100", 91 => "0000000010101000", 92 => "1111111101110010", 
    93 => "0000000001110111", 94 => "1110101101110001", 95 => "1111110001111011", 
    96 => "1111111010011011", 97 => "1111111010000001", 98 => "1111110111101100", 
    99 => "1111100001011001", 100 => "1111111111101010", 101 => "1111010101110110", 
    102 => "0000000100111010", 103 => "0000011111100100", 104 => "0000000001101110", 
    105 => "1111111110011101", 106 => "0000010011101001", 107 => "0000001001111110", 
    108 => "0000010011000111", 109 => "0000010110110101", 110 => "1110010010010001", 
    111 => "0000000010000001", 112 => "1101110101011001", 113 => "0000001010010010", 
    114 => "0000001001100111", 115 => "0000010100000110", 116 => "1111010000111110", 
    117 => "0011111001111010", 118 => "1111111110001101", 119 => "1111110010001111", 
    120 => "1111111110001101", 121 => "0000000110111110", 122 => "1111100011101010", 
    123 => "1111110001111110", 124 => "0111000000000001", 125 => "0000101101001011", 
    126 => "0001011011111001", 127 => "1111111101111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actvdy is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Actvdy is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Actvdy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Actvdy_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Actvdy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


