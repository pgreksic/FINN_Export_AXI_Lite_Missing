-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actibs_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Actibs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110110001011000", 1 => "1111111010011001", 2 => "0000000000101000", 
    3 => "1111110000010100", 4 => "1111110000100010", 5 => "1111111001101110", 
    6 => "1111110010101001", 7 => "0000010011000001", 8 => "0000010000001001", 
    9 => "0001101000100111", 10 => "0000111101111001", 11 => "1110001001101001", 
    12 => "1111111111100101", 13 => "1111110010001010", 14 => "1111111000000001", 
    15 => "0000010010001101", 16 => "1111110010111111", 17 => "0000011001010001", 
    18 => "0000010001010101", 19 => "1111111101101011", 20 => "1101101010010010", 
    21 => "0000000010011010", 22 => "1110111101111101", 23 => "0001010011000100", 
    24 => "1111100000001110", 25 => "0000010100111011", 26 => "0000000101010000", 
    27 => "0000000110010111", 28 => "1111011101110010", 29 => "1111001100000101", 
    30 => "1111111010011011", 31 => "1111110100110000", 32 => "1111111101001010", 
    33 => "0000000111000110", 34 => "0000001001011111", 35 => "0000001010101110", 
    36 => "0000000000110111", 37 => "1111100011100101", 38 => "0001110011000011", 
    39 => "0000011011110011", 40 => "1111100011011001", 41 => "0000010001000010", 
    42 => "0000001100111100", 43 => "0000010000101001", 44 => "0000001111001100", 
    45 => "0000000001010110", 46 => "1111010011001001", 47 => "0000010100010110", 
    48 => "0010001101011001", 49 => "0000000110010111", 50 => "0000011000101011", 
    51 => "1111111011101111", 52 => "1111101110010001", 53 => "1111111111111001", 
    54 => "0000010011001010", 55 => "0000010100010111", 56 => "1111111110001010", 
    57 => "1111111000010001", 58 => "1111100111100111", 59 => "1111111111101111", 
    60 => "0000010010110001", 61 => "1111100000100000", 62 => "0000001111101111", 
    63 => "0001010001101100", 64 => "1111000000000110", 65 => "0000000000111000", 
    66 => "1111110011100111", 67 => "0000010100011010", 68 => "1111111001000110", 
    69 => "0000001010010010", 70 => "1111111100110111", 71 => "1111011110100110", 
    72 => "0000001110100111", 73 => "1110101110111110", 74 => "1111100100011111", 
    75 => "1111110000101000", 76 => "0000000101010010", 77 => "1111111000101111", 
    78 => "1111110101111110", 79 => "0000000001000100", 80 => "1111111110100011", 
    81 => "0000000111100010", 82 => "1111111111000010", 83 => "1100010011111101", 
    84 => "0000000000100000", 85 => "0000010100010100", 86 => "0001001111011000", 
    87 => "1111111110000100", 88 => "0000001110100110", 89 => "1111111011101011", 
    90 => "1111101110101000", 91 => "1111000011001100", 92 => "1111111110011001", 
    93 => "1111111110101111", 94 => "1111111101001000", 95 => "0000001100000010", 
    96 => "1111110110100011", 97 => "0000000001100111", 98 => "0000000000010011", 
    99 => "1111111000110111", 100 => "1111110101100011", 101 => "0000000101001101", 
    102 => "0000001000010010", 103 => "1111100000001100", 104 => "1111111101111011", 
    105 => "0000001011001011", 106 => "1111111000001000", 107 => "0000001000110110", 
    108 => "1111101011101111", 109 => "0000000101100001", 110 => "1111111101010110", 
    111 => "0000000100100010", 112 => "1111111111000001", 113 => "0000111111011101", 
    114 => "1010110011001111", 115 => "1111100011110001", 116 => "0000111100011001", 
    117 => "1111010111000011", 118 => "0000000100001100", 119 => "1111110010110100", 
    120 => "1111111001111111", 121 => "0000110001111110", 122 => "1111110111000000", 
    123 => "1111111111100111", 124 => "1111100100000101", 125 => "0001110000111001", 
    126 => "0000000100100010", 127 => "0000010100101000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actibs is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Actibs is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Actibs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Actibs_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Actibs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


