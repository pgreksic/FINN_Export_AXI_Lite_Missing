-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActeOg_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActeOg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110101100101001", 1 => "1111111001001110", 2 => "1111111111010011", 
    3 => "1111101111001101", 4 => "1111101111001011", 5 => "1111111000110101", 
    6 => "1111110001110111", 7 => "0000010001100000", 8 => "0000001111001111", 
    9 => "0001100011011010", 10 => "0000110111111001", 11 => "1110000011110000", 
    12 => "1111111110010001", 13 => "1111110000000101", 14 => "1111110111010010", 
    15 => "0000010001001011", 16 => "1111110001111000", 17 => "0000010101111101", 
    18 => "0000010000101001", 19 => "1111111100100001", 20 => "1101000111111100", 
    21 => "0000000001100100", 22 => "1110111000111001", 23 => "0001001110111101", 
    24 => "1111011111010000", 25 => "0000010011111101", 26 => "0000000100010000", 
    27 => "0000000101110011", 28 => "1111011100111001", 29 => "1111000111000000", 
    30 => "1111111001110000", 31 => "1111110011101011", 32 => "1111111100000010", 
    33 => "0000000110001100", 34 => "0000001000000101", 35 => "0000001001101101", 
    36 => "1111111111111111", 37 => "1111100010110011", 38 => "0001101001011001", 
    39 => "0000011010111101", 40 => "1111100010001111", 41 => "0000010000001111", 
    42 => "0000001011110001", 43 => "0000001111100000", 44 => "0000001101111111", 
    45 => "0000000000011111", 46 => "1111010000101001", 47 => "0000010011010110", 
    48 => "0010000001110101", 49 => "0000000101001111", 50 => "0000011000000010", 
    51 => "1111111010100010", 52 => "1111101100110111", 53 => "1111111110101001", 
    54 => "0000010010011001", 55 => "0000010011010010", 56 => "1111111101001101", 
    57 => "1111110111010101", 58 => "1111100110110110", 59 => "1111111111010100", 
    60 => "0000010001011110", 61 => "1111011101111000", 62 => "0000001110001100", 
    63 => "0001001101001001", 64 => "1110111101010000", 65 => "0000000000000111", 
    66 => "1111110010100011", 67 => "0000010100000001", 68 => "1111110111111100", 
    69 => "0000001001010000", 70 => "1111111011010110", 71 => "1111011000111110", 
    72 => "0000001101110100", 73 => "1110101001110111", 74 => "1111100011100100", 
    75 => "1111101111110111", 76 => "0000000100011110", 77 => "1111110111101000", 
    78 => "1111110100110101", 79 => "0000000000001111", 80 => "1111111101100011", 
    81 => "0000000110101110", 82 => "1111111110010100", 83 => "1011111101100001", 
    84 => "1111111111100100", 85 => "0000010011100100", 86 => "0001001000000100", 
    87 => "1111111000011110", 88 => "0000001101111110", 89 => "1111111010010011", 
    90 => "1111101101011000", 91 => "1110111100110101", 92 => "1111111101000101", 
    93 => "1111111101100011", 94 => "1111111011100110", 95 => "0000001010110000", 
    96 => "1111110101101101", 97 => "0000000000111011", 98 => "1111111111001011", 
    99 => "1111110111111011", 100 => "1111110100110011", 101 => "0000000100010010", 
    102 => "0000000111100001", 103 => "1111011111011000", 104 => "1111111100110100", 
    105 => "0000001010010110", 106 => "1111110111010001", 107 => "0000001000000110", 
    108 => "1111101010101100", 109 => "0000000100110001", 110 => "1111111100100101", 
    111 => "0000000011101110", 112 => "1111111110001001", 113 => "0000111100010011", 
    114 => "1010010101110110", 115 => "1111100010110111", 116 => "0000111000010011", 
    117 => "1111010010111000", 118 => "0000000011010011", 119 => "1111110001101001", 
    120 => "1111111001001111", 121 => "0000101110010100", 122 => "1111110110010010", 
    123 => "1111111110100010", 124 => "1111100010111110", 125 => "0001101010100000", 
    126 => "0000000011001001", 127 => "0000010011101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActeOg is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActeOg is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActeOg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActeOg_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActeOg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


