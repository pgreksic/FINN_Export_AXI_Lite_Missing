-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actcud_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Actcud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110101010010010", 1 => "1111111000101000", 2 => "1111111110101001", 
    3 => "1111101110101001", 4 => "1111101110011111", 5 => "1111111000011000", 
    6 => "1111110001011110", 7 => "0000010000101111", 8 => "0000001110110010", 
    9 => "0001100000110011", 10 => "0000110100111001", 11 => "1110000000110011", 
    12 => "1111111101100111", 13 => "1111101111000011", 14 => "1111110110111010", 
    15 => "0000010000101010", 16 => "1111110001010100", 17 => "0000010100010011", 
    18 => "0000010000010011", 19 => "1111111011111100", 20 => "1100110110110001", 
    21 => "0000000001001001", 22 => "1110110110010111", 23 => "0001001100111001", 
    24 => "1111011110110001", 25 => "0000010011011110", 26 => "0000000011101111", 
    27 => "0000000101100001", 28 => "1111011100011101", 29 => "1111000100011101", 
    30 => "1111111001011010", 31 => "1111110011001000", 32 => "1111111011011111", 
    33 => "0000000101101111", 34 => "0000000111011000", 35 => "0000001001001100", 
    36 => "1111111111100010", 37 => "1111100010011010", 38 => "0001100100100101", 
    39 => "0000011010100001", 40 => "1111100001101010", 41 => "0000001111110101", 
    42 => "0000001011001100", 43 => "0000001110111100", 44 => "0000001101011001", 
    45 => "0000000000000011", 46 => "1111001111011001", 47 => "0000010010110110", 
    48 => "0001111100000011", 49 => "0000000100101010", 50 => "0000010111101101", 
    51 => "1111111001111011", 52 => "1111101100001010", 53 => "1111111110000000", 
    54 => "0000010010000000", 55 => "0000010010110000", 56 => "1111111100101111", 
    57 => "1111110110110111", 58 => "1111100110011101", 59 => "1111111111000111", 
    60 => "0000010000110100", 61 => "1111011100100101", 62 => "0000001101011010", 
    63 => "0001001010111000", 64 => "1110111011110110", 65 => "1111111111101111", 
    66 => "1111110010000010", 67 => "0000010011110101", 68 => "1111110111010111", 
    69 => "0000001000101110", 70 => "1111111010100110", 71 => "1111010110001010", 
    72 => "0000001101011011", 73 => "1110100111010011", 74 => "1111100011000111", 
    75 => "1111101111011111", 76 => "0000000100000101", 77 => "1111110111000101", 
    78 => "1111110100010000", 79 => "1111111111110100", 80 => "1111111101000011", 
    81 => "0000000110010100", 82 => "1111111101111101", 83 => "1011110010010100", 
    84 => "1111111111000110", 85 => "0000010011001011", 86 => "0001000100011011", 
    87 => "1111110101101011", 88 => "0000001101101010", 89 => "1111111001100111", 
    90 => "1111101100110000", 91 => "1110111001101010", 92 => "1111111100011011", 
    93 => "1111111100111101", 94 => "1111111010110101", 95 => "0000001010001000", 
    96 => "1111110101010001", 97 => "0000000000100101", 98 => "1111111110100111", 
    99 => "1111110111011101", 100 => "1111110100011011", 101 => "0000000011110101", 
    102 => "0000000111001001", 103 => "1111011110111110", 104 => "1111111100010001", 
    105 => "0000001001111100", 106 => "1111110110110101", 107 => "0000000111101110", 
    108 => "1111101010001010", 109 => "0000000100011000", 110 => "1111111100001100", 
    111 => "0000000011010100", 112 => "1111111101101101", 113 => "0000111010101110", 
    114 => "1010000111001001", 115 => "1111100010011010", 116 => "0000110110010001", 
    117 => "1111010000110010", 118 => "0000000010110111", 119 => "1111110001000011", 
    120 => "1111111000110110", 121 => "0000101100011111", 122 => "1111110101111011", 
    123 => "1111111101111111", 124 => "1111100010011010", 125 => "0001100111010011", 
    126 => "0000000010011101", 127 => "0000010011001010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actcud is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Actcud is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Actcud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Actcud_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Actcud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


