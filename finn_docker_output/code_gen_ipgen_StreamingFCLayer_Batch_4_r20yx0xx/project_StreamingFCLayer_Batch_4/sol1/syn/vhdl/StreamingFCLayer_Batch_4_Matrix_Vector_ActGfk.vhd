-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActGfk_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActGfk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101111001101", 1 => "1110110011001010", 2 => "1111111100111010", 
    3 => "1111110010111111", 4 => "1111101101111111", 5 => "0000100001011010", 
    6 => "1111101011101010", 7 => "1111101101100111", 8 => "0000101100000101", 
    9 => "1111101000110111", 10 => "0000100110011111", 11 => "1111101000001011", 
    12 => "0000001000000010", 13 => "1010010111011011", 14 => "0000000011100111", 
    15 => "1111101010000100", 16 => "0000000111000101", 17 => "1111110000111010", 
    18 => "1111100110110100", 19 => "0000001001100011", 20 => "0111000000000001", 
    21 => "1100000110010001", 22 => "1111110010001000", 23 => "1111100110111110", 
    24 => "0000001001011011", 25 => "1111110110110010", 26 => "1110110100100100", 
    27 => "0000101000111000", 28 => "1111111101111111", 29 => "1111110110111011", 
    30 => "1111101100011001", 31 => "1111110100011111", 32 => "0000000010101011", 
    33 => "1111101100111000", 34 => "1111010101000100", 35 => "0000001111110101", 
    36 => "1101110001110010", 37 => "0000000001011000", 38 => "0000000000010011", 
    39 => "1111010001101111", 40 => "0000011000001011", 41 => "1111101110110000", 
    42 => "1111011010100001", 43 => "1111011110100000", 44 => "1111010110000000", 
    45 => "0000000010001011", 46 => "0000101000100111", 47 => "0000010100110000", 
    48 => "1111001011101110", 49 => "0000000010011111", 50 => "0000011110110110", 
    51 => "1111111100011101", 52 => "0001001000000100", 53 => "1111110001110111", 
    54 => "1111110011001100", 55 => "1111101111101011", 56 => "1111110000001111", 
    57 => "0000011110101001", 58 => "1111110111111101", 59 => "0000011101110100", 
    60 => "0000000000111001", 61 => "0000001001100011", 62 => "0000011010001011", 
    63 => "1111101111001010", 64 => "1111111010011110", 65 => "0000000000110111", 
    66 => "1111101011100111", 67 => "1111110111101010", 68 => "0000001111010000", 
    69 => "0000001010110110", 70 => "1111001001011110", 71 => "1111011000110100", 
    72 => "1111110100111011", 73 => "1111110000011010", 74 => "1111001110100000", 
    75 => "1100101110001110", 76 => "1111011001010110", 77 => "0000101110010110", 
    78 => "1111101100011111", 79 => "1111110011100100", 80 => "1111101100111111", 
    81 => "1111111101101010", 82 => "1111111010101000", 83 => "1111110010001101", 
    84 => "1111111001110001", 85 => "0000000001100011", 86 => "0000000101111010", 
    87 => "0000000001110110", 88 => "0000001000000011", 89 => "0000000100111101", 
    90 => "0000000100101001", 91 => "0000010000010000", 92 => "1111100111001101", 
    93 => "0001010101000000", 94 => "0001011000011000", 95 => "0000011001010010", 
    96 => "0001010000110001", 97 => "0000011111101010", 98 => "1111111100111010", 
    99 => "0000000000110000", 100 => "0101001110011110", 101 => "1111100111111111", 
    102 => "0000000001101101", 103 => "1111001001101011", 104 => "1111110111101111", 
    105 => "1111110101101001", 106 => "1111101110111000", 107 => "1111101110000011", 
    108 => "0000001001010100", 109 => "0000001010111000", 110 => "1111011110111101", 
    111 => "1111110111010111", 112 => "1111110101110000", 113 => "1111110001111111", 
    114 => "1111110000000001", 115 => "0000000111110100", 116 => "0000011000111101", 
    117 => "0000001000110100", 118 => "0111000000000001", 119 => "1111110011110010", 
    120 => "1110100010000001", 121 => "0000010011101111", 122 => "1111111000100101", 
    123 => "1111101100101110", 124 => "1111111000111101", 125 => "1111100101101001", 
    126 => "1111101111101111", 127 => "0000100111001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActGfk is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActGfk is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActGfk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActGfk_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActGfk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


