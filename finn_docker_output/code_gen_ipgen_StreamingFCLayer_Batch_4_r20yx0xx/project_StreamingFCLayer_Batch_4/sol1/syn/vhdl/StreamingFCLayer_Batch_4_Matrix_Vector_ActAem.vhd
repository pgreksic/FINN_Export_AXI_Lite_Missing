-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActAem_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActAem_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111010011100", 1 => "0001110000011110", 2 => "0011011000110001", 
    3 => "0000011010101001", 4 => "1111011111111100", 5 => "0000000100010101", 
    6 => "1111111010100110", 7 => "1111101011101110", 8 => "1111111000101010", 
    9 => "0000001101011111", 10 => "1111110011111100", 11 => "1111101000001111", 
    12 => "0000011001011010", 13 => "1111110100111011", 14 => "1111111111010110", 
    15 => "0000001000111000", 16 => "0000000110101111", 17 => "1111111100110101", 
    18 => "0000000111101001", 19 => "0000010010010010", 20 => "0000001011001000", 
    21 => "1111011110000110", 22 => "1111110101110010", 23 => "1111110010001101", 
    24 => "0000001011100110", 25 => "0000001110101111", 26 => "0000001011100000", 
    27 => "1111100101111001", 28 => "0000000110011010", 29 => "1101000010010000", 
    30 => "1111101000011001", 31 => "0000010000100101", 32 => "1111110110001100", 
    33 => "1111111111100101", 34 => "1111000101100001", 35 => "1111111001110101", 
    36 => "0000000100011100", 37 => "1110110011011010", 38 => "0000001001111001", 
    39 => "0000000010100001", 40 => "0001001111000000", 41 => "1111000101000011", 
    42 => "0000000010110010", 43 => "1111110110101000", 44 => "0001100010001010", 
    45 => "0000010101111001", 46 => "1111111010010011", 47 => "0000010010111010", 
    48 => "0000000000101100", 49 => "1010111101101110", 50 => "1111101000000000", 
    51 => "1111001000101100", 52 => "1101111100010001", 53 => "1111110101111110", 
    54 => "0000100011101111", 55 => "0000000010001111", 56 => "0000011101111001", 
    57 => "1111100111110111", 58 => "0000000111000100", 59 => "1111101001101101", 
    60 => "1111111110101011", 61 => "1111011011111010", 62 => "0000000111110000", 
    63 => "0000000100001011", 64 => "0000001101001110", 65 => "0000001010001010", 
    66 => "0000001110110001", 67 => "0000011010000011", 68 => "1111110110010011", 
    69 => "0000000111010000", 70 => "0000010100001001", 71 => "0001001011101010", 
    72 => "0000000100000001", 73 => "1111101000111011", 74 => "0000000101001000", 
    75 => "1111111011110001", 76 => "1110110100000010", 77 => "0000000011011110", 
    78 => "1111111010110010", 79 => "1111100110110111", 80 => "0000010111010001", 
    81 => "1111110100101101", 82 => "0000010011001000", 83 => "0000001010000110", 
    84 => "1111111111010110", 85 => "0000001100010010", 86 => "1111011110001110", 
    87 => "0000001111011001", 88 => "0000011010101111", 89 => "0000000001101101", 
    90 => "0000000111000110", 91 => "0000000011111010", 92 => "1111111110111001", 
    93 => "0000000011001110", 94 => "1110111000100011", 95 => "1111110011011000", 
    96 => "1111111011110011", 97 => "1111111011100010", 98 => "1111111001010111", 
    99 => "1111100010110010", 100 => "0000000000101111", 101 => "1111010110110000", 
    102 => "0000000101110110", 103 => "0000100101001111", 104 => "0000000010110010", 
    105 => "1111111111100011", 106 => "0000010100101000", 107 => "0000001010110101", 
    108 => "0000010100000010", 109 => "0000010111111111", 110 => "1110100010010010", 
    111 => "0000000010110110", 112 => "1110000010001010", 113 => "0000001011000111", 
    114 => "0000001010110011", 115 => "0000010101000010", 116 => "1111010010011011", 
    117 => "0100011001110110", 118 => "1111111111010110", 119 => "1111110011100101", 
    120 => "1111111111010111", 121 => "0000001000100110", 122 => "1111100100100001", 
    123 => "1111110011010001", 124 => "0111000000000001", 125 => "0000110010010111", 
    126 => "0001101001110011", 127 => "1111111110110000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActAem is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActAem is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActAem_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActAem_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActAem_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


