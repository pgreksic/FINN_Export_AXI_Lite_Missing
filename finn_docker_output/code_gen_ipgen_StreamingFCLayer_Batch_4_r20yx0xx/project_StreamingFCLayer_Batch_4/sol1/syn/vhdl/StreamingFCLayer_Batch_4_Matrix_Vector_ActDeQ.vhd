-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActDeQ_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActDeQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101110100111", 1 => "1110101100101011", 2 => "1111111100011010", 
    3 => "1111110010010011", 4 => "1111101101100010", 5 => "0000100000111001", 
    6 => "1111101011000111", 7 => "1111101101000011", 8 => "0000100110000001", 
    9 => "1111101000000101", 10 => "0000100101110100", 11 => "1111100111011110", 
    12 => "0000000111010001", 13 => "1010000000000000", 14 => "0000000011000000", 
    15 => "1111101001001111", 16 => "0000000110010011", 17 => "1111110000001010", 
    18 => "1111100110001100", 19 => "0000001000101010", 20 => "0111000000000001", 
    21 => "1011110101000001", 22 => "1111110001100011", 23 => "1111100110000111", 
    24 => "0000001000110111", 25 => "1111110110001110", 26 => "1110110010101111", 
    27 => "0000100100101101", 28 => "1111111101010011", 29 => "1111110110011100", 
    30 => "1111101011110011", 31 => "1111110011111001", 32 => "0000000010000100", 
    33 => "1111101100010101", 34 => "1111010100010101", 35 => "0000001111001100", 
    36 => "1101101001011110", 37 => "0000000000110100", 38 => "1111111111010010", 
    39 => "1111001110100100", 40 => "0000010111010000", 41 => "1111101110001011", 
    42 => "1111011001110101", 43 => "1111011101110000", 44 => "1111010101010010", 
    45 => "0000000001101001", 46 => "0000100111000100", 47 => "0000010100001011", 
    48 => "1111000111101000", 49 => "0000000001101011", 50 => "0000011110010110", 
    51 => "1111111011110011", 52 => "0001000110001010", 53 => "1111110001011000", 
    54 => "1111110010001010", 55 => "1111101111001101", 56 => "1111101111001001", 
    57 => "0000011110000001", 58 => "1111110111011010", 59 => "0000011100000101", 
    60 => "0000000000010011", 61 => "0000001001000001", 62 => "0000011001010011", 
    63 => "1111101110011100", 64 => "1111111001110110", 65 => "1111111111110010", 
    66 => "1111101010110100", 67 => "1111110110111001", 68 => "0000001110100101", 
    69 => "0000001010001001", 70 => "1111000101101000", 71 => "1111011000000010", 
    72 => "1111110100011001", 73 => "1111101111101110", 74 => "1111001100000001", 
    75 => "1100011110111011", 76 => "1111011000110010", 77 => "0000101011110111", 
    78 => "1111101011110111", 79 => "1111110010100100", 80 => "1111101100010010", 
    81 => "1111111100111001", 82 => "1111111001111000", 83 => "1111110001011001", 
    84 => "1111111001001000", 85 => "0000000001000100", 86 => "0000000100111010", 
    87 => "0000000001011011", 88 => "0000000111000000", 89 => "0000000100001000", 
    90 => "0000000011100111", 91 => "0000001001110001", 92 => "1111100101101001", 
    93 => "0001010010100011", 94 => "0001010100100111", 95 => "0000011000101111", 
    96 => "0001000100110100", 97 => "0000011110111011", 98 => "1111111100011111", 
    99 => "0000000000000010", 100 => "0100101100111001", 101 => "1111100111000011", 
    102 => "0000000001000110", 103 => "1111001000110001", 104 => "1111110110110111", 
    105 => "1111110100111101", 106 => "1111101101111011", 107 => "1111101101001111", 
    108 => "0000001000011001", 109 => "0000001010010001", 110 => "1111011110000110", 
    111 => "1111110110110111", 112 => "1111110101010111", 113 => "1111110000101001", 
    114 => "1111101111001101", 115 => "0000000110111011", 116 => "0000011000001011", 
    117 => "0000000111111011", 118 => "0111000000000001", 119 => "1111110011000101", 
    120 => "1110011110010101", 121 => "0000010011000001", 122 => "1111111000001011", 
    123 => "1111101100001101", 124 => "1111111000001000", 125 => "1111100100111001", 
    126 => "1111101110111000", 127 => "0000100110011101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActDeQ is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActDeQ is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActDeQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActDeQ_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActDeQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


