-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActThq_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActThq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000001110000", 1 => "1111111000000100", 2 => "1111100101010100", 
    3 => "1111100000100000", 4 => "0000001100010110", 5 => "1111111011010110", 
    6 => "0000011011011001", 7 => "1111111110000111", 8 => "1111111011011111", 
    9 => "1111101001010101", 10 => "1111110000001001", 11 => "1111101100011101", 
    12 => "0000000000001000", 13 => "0000000000011101", 14 => "1111111111000000", 
    15 => "1100000100010110", 16 => "1111111001111011", 17 => "1111111010001010", 
    18 => "0000100110010111", 19 => "1111110010010001", 20 => "1111011101001011", 
    21 => "0000010000000000", 22 => "1111101110100110", 23 => "1011110111101010", 
    24 => "0000011100011101", 25 => "0000000110000100", 26 => "1111110000011100", 
    27 => "0000011111100100", 28 => "1111111111100001", 29 => "0000001000001001", 
    30 => "0111000000000001", 31 => "0000001010011101", 32 => "1111101110101010", 
    33 => "0000000111111110", 34 => "1111111001010101", 35 => "0000011101110010", 
    36 => "0000001101100011", 37 => "1111011100111100", 38 => "1110101111000111", 
    39 => "0110111100010010", 40 => "0000010001000110", 41 => "1111111000011101", 
    42 => "0000101011001011", 43 => "0000001111010101", 44 => "0000001010111011", 
    45 => "0000001100100001", 46 => "0000100001111011", 47 => "0000100111010110", 
    48 => "0000000000010011", 49 => "0000001110001100", 50 => "1111111100101011", 
    51 => "1111111011010000", 52 => "1111111111111100", 53 => "1111010110011011", 
    54 => "0000001001111011", 55 => "0000010010010101", 56 => "1111110010111111", 
    57 => "1111101001000011", 58 => "1111010111101001", 59 => "1111101111110001", 
    60 => "0000000111110101", 61 => "0000100011110010", 62 => "0000001101101000", 
    63 => "0000001001110001", 64 => "0000011101000110", 65 => "1111011110010110", 
    66 => "0000110010101000", 67 => "0000000010010111", 68 => "1111110100010000", 
    69 => "0000000110100111", 70 => "0000100011111011", 71 => "0000000110111010", 
    72 => "0000001010010110", 73 => "1111110101110100", 74 => "1111100110001110", 
    75 => "0000100001010001", 76 => "0000001001011100", 77 => "0000001101100000", 
    78 => "0000100001001110", 79 => "1111111010101010", 80 => "0000001000101011", 
    81 => "0000101111111011", 82 => "0000000111110010", 83 => "0000000001110010", 
    84 => "1111111110011010", 85 => "1111101011011101", 86 => "1111111110111001", 
    87 => "0000001100101011", 88 => "0000010001011000", 89 => "1110011111110010", 
    90 => "0000111001011001", 91 => "0000001011110101", 92 => "0000000000010100", 
    93 => "0000011011100100", 94 => "0000001011000011", 95 => "0001010110011000", 
    96 => "1110111110001011", 97 => "1110111011110111", 98 => "1111110101101011", 
    99 => "1111110011010010", 100 => "0001111110110000", 101 => "1111101001000111", 
    102 => "1111111110110010", 103 => "1111101001100010", 104 => "1111110100101001", 
    105 => "0000010001011011", 106 => "0000011001011111", 107 => "1111110100101111", 
    108 => "1111111111000101", 109 => "1111110100101011", 110 => "0000010101100100", 
    111 => "0000010110011111", 112 => "1111110111110101", 113 => "0000101101101101", 
    114 => "1111111011011001", 115 => "1111111100110001", 116 => "0000000010111010", 
    117 => "0000000000000000", 118 => "1111111111010110", 119 => "1111111110110101", 
    120 => "1111100111010011", 121 => "1111110110011110", 122 => "0000001010010110", 
    123 => "0000001100011110", 124 => "0010111111110110", 125 => "0000000001101101", 
    126 => "0000001100111010", 127 => "1111110110001010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActThq is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActThq is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActThq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActThq_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActThq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


