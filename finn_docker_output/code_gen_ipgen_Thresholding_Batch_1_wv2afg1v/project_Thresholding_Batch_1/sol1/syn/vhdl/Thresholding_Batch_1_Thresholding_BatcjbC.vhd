-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Thresholding_Batch_1_Thresholding_BatcjbC_rom is 
    generic(
             DWIDTH     : integer := 19; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Thresholding_Batch_1_Thresholding_BatcjbC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000111010000010", 1 => "0000010001010100001", 
    2 => "0000001110010111101", 3 => "0000010110001101111", 
    4 => "0000010101000001110", 5 => "0000001111001010000", 
    6 => "1111111100001100100", 7 => "0000000011010011011", 
    8 => "1111101101101100101", 9 => "1111101011101011010", 
    10 => "0000011110010010010", 11 => "0000001101101001100", 
    12 => "0000000111101001111", 13 => "1111111101011010111", 
    14 => "0000010101001111001", 15 => "1111100111110011011", 
    16 => "1111110011001001011", 17 => "0000010100001011101", 
    18 => "0000010000110011011", 19 => "0000001110011111101", 
    20 => "1111100000110010001", 21 => "0001000001111000011", 
    22 => "1111000110010111001", 23 => "1111101100111001101", 
    24 => "0000011001010000101", 25 => "0000010000111110010", 
    26 => "1111111000010110000", 27 => "0000111000001100101", 
    28 => "1111100000110110011", 29 => "0000010001100011110", 
    30 => "1111011001110100111", 31 => "1111111101100000001", 
    32 => "1010100101101000111", 33 => "1111111000010110110", 
    34 => "1111101111110010010", 35 => "1111101111011101111", 
    36 => "1111011111000111110", 37 => "1111110110110101001", 
    38 => "1111101100010010100", 39 => "1111111000110001000", 
    40 => "1111110010101010100", 41 => "1111111000011010010", 
    42 => "1111110011100110001", 43 => "0000000100111001000", 
    44 => "0000011000110010001", 45 => "1111011000100101011", 
    46 => "1111011010001110001", 47 => "1111101010000000011", 
    48 => "0000011001001111001", 49 => "0000001010011110010", 
    50 => "1111011000100010000", 51 => "0000001101010011001", 
    52 => "0000011000100011100", 53 => "0001101000011011011", 
    54 => "0001000010010101011", 55 => "0000100101000111000", 
    56 => "1111100111110011100", 57 => "0000011001001111101", 
    58 => "1111111011000011100", 59 => "1111101111101000111", 
    60 => "1111110011110011001", 61 => "0000100111110111010", 
    62 => "1111110010010011011", 63 => "0010001010110110000", 
    64 => "0000010000111001011", 65 => "0000011110001001110", 
    66 => "1111110100100000010", 67 => "0000000111101001101", 
    68 => "0001110101011100101", 69 => "1111101110110110111", 
    70 => "1011111101010110110", 71 => "0000011101010011000", 
    72 => "0000001111100110101", 73 => "0000011101100100100", 
    74 => "0000000101111101001", 75 => "1111101010001111100", 
    76 => "0000100110000010011", 77 => "0000010001111011100", 
    78 => "1111111000101000010", 79 => "1111110000010010100", 
    80 => "0000001001100100010", 81 => "1111111110111010011", 
    82 => "1111100100101001011", 83 => "1111001010010111001", 
    84 => "1111101101101111100", 85 => "1111111110100111101", 
    86 => "0000001110010101101", 87 => "1111110010000000000", 
    88 => "1111110100100001110", 89 => "1111110110001101010", 
    90 => "1111110111011100100", 91 => "1111010111000000011", 
    92 => "0000000111111000100", 93 => "0000001000011011000", 
    94 => "1111110100100111000", 95 => "1111110011101001001", 
    96 => "1111111101100100011", 97 => "1111111000100111000", 
    98 => "1111110110100100010", 99 => "1111111000110010111", 
    100 => "0000010111000001100", 101 => "0000100101111001010", 
    102 => "1111110011000000010", 103 => "1111010110111000010", 
    104 => "0000000010100011000", 105 => "1111101101011000001", 
    106 => "0000101100110110111", 107 => "0000001111001000010", 
    108 => "1111100111011001100", 109 => "1110110011111110001", 
    110 => "0000001100101010001", 111 => "0000110100000000000", 
    112 => "1111110010001001001", 113 => "1111110010010010010", 
    114 => "0010010111010110001", 115 => "1111110100110010101", 
    116 => "1111111011111101001", 117 => "1111110000100100000", 
    118 => "0000010010000001010", 119 => "0000010010010110111", 
    120 => "1111110100101001101", 121 => "1111101111011101101", 
    122 => "0000011100010111011", 123 => "0000010011011110010", 
    124 => "1111101001101000111", 125 => "1111000110110101011", 
    126 => "0000101110010110011", 127 => "1111101111001101001" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Thresholding_Batch_1_Thresholding_BatcjbC is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Thresholding_Batch_1_Thresholding_BatcjbC is
    component Thresholding_Batch_1_Thresholding_BatcjbC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Thresholding_Batch_1_Thresholding_BatcjbC_rom_U :  component Thresholding_Batch_1_Thresholding_BatcjbC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


