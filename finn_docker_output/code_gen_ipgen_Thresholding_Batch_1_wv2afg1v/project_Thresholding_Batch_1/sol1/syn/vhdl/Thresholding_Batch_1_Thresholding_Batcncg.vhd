-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Thresholding_Batch_1_Thresholding_Batcncg_rom is 
    generic(
             DWIDTH     : integer := 19; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Thresholding_Batch_1_Thresholding_Batcncg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000001000110010111", 1 => "0000010011000110001", 
    2 => "0000001111000101001", 3 => "0000010111000110000", 
    4 => "0000011001000001100", 5 => "0000010001110001000", 
    6 => "1111111101010000100", 7 => "0000000101001010110", 
    8 => "1111110011001101100", 9 => "1111101100100111001", 
    10 => "0000100001000111010", 11 => "0000001110001011001", 
    12 => "0000001000011011011", 13 => "1111111110100010111", 
    14 => "0000011001011000111", 15 => "1111101011101101101", 
    16 => "1111110100000011111", 17 => "0000010101100001101", 
    18 => "0000010001101010001", 19 => "0000001111100011010", 
    20 => "1111100110010011000", 21 => "0001011000101000100", 
    22 => "1111001101101000110", 23 => "1111101110110001010", 
    24 => "0000100001111100110", 25 => "0000010010101100001", 
    26 => "1111111001010110101", 27 => "0000111011011010010", 
    28 => "1111100011100100011", 29 => "0000010010000001001", 
    30 => "1111100101011011010", 31 => "1111111110000111001", 
    32 => "1011001110110000111", 33 => "1111111010010110111", 
    34 => "1111110001010101111", 35 => "1111110001010100001", 
    36 => "1111100011000111000", 37 => "1111111000011110001", 
    38 => "1111101101011101010", 39 => "1111111010000011111", 
    40 => "1111110011100000110", 41 => "1111111001010101010", 
    42 => "1111110100110010101", 43 => "0000000110110001001", 
    44 => "0000100000101111000", 45 => "1111011100101100100", 
    46 => "1111011011111101010", 47 => "1111101100011011101", 
    48 => "0000011011110100010", 49 => "0000001100010011111", 
    50 => "1111011100011011101", 51 => "0000001101111100111", 
    52 => "0000011001101010011", 53 => "0010001011110001100", 
    54 => "0001000110101100011", 55 => "0000100110110100111", 
    56 => "1111101010101001111", 57 => "0000011111111011000", 
    58 => "1111111100111000010", 59 => "1111110001100001001", 
    60 => "1111110110000101001", 61 => "0000101001101000011", 
    62 => "1111110100101011111", 63 => "0010101000010101011", 
    64 => "0000010010011111011", 65 => "0000100011111011101", 
    66 => "1111110101011101011", 67 => "0000001000001000010", 
    68 => "0010000001001100111", 69 => "1111110000001101100", 
    70 => "1100011101100111000", 71 => "0000100110101111001", 
    72 => "0000010011011010101", 73 => "0000011110110010100", 
    74 => "0000001000000000100", 75 => "1111101100110001010", 
    76 => "0000101000011001001", 77 => "0000010010100000101", 
    78 => "1111111010001011010", 79 => "1111110001111000101", 
    80 => "0000001010001001001", 81 => "1111111111111110000", 
    82 => "1111101000000001011", 83 => "1111001110100011100", 
    84 => "1111110000111000110", 85 => "0000000000011001100", 
    86 => "0000001111100101110", 87 => "1111110010110111111", 
    88 => "1111110110010010101", 89 => "1111110110110010011", 
    90 => "1111111000011011110", 91 => "1111011101000100100", 
    92 => "0000001001110010111", 93 => "0000001001011101100", 
    94 => "1111110101101010111", 95 => "1111110101000010010", 
    96 => "1111111110111111010", 97 => "1111111010101101000", 
    98 => "1111111000100001011", 99 => "1111111001101110000", 
    100 => "0000011000101111011", 101 => "0000110010001110001", 
    102 => "1111110100010101100", 103 => "1111011011111011010", 
    104 => "0000000100000010010", 105 => "1111101111101011111", 
    106 => "0000111001111111001", 107 => "0000001111110101101", 
    108 => "1111101000111110110", 109 => "1111000100010110100", 
    110 => "0000001110000100011", 111 => "0000111111000110010", 
    112 => "1111110011101010001", 113 => "1111110111011011001", 
    114 => "0010111100111010000", 115 => "1111110110010110111", 
    116 => "1111111101010011111", 117 => "1111110011010101101", 
    118 => "0000010011011010010", 119 => "0000010100100011110", 
    120 => "1111110110010101110", 121 => "1111110001010110101", 
    122 => "0000011101101101010", 123 => "0000011000110000001", 
    124 => "1111101011011000010", 125 => "1111001100100100001", 
    126 => "0000111001101010100", 127 => "1111110100000101000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Thresholding_Batch_1_Thresholding_Batcncg is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Thresholding_Batch_1_Thresholding_Batcncg is
    component Thresholding_Batch_1_Thresholding_Batcncg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Thresholding_Batch_1_Thresholding_Batcncg_rom_U :  component Thresholding_Batch_1_Thresholding_Batcncg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


