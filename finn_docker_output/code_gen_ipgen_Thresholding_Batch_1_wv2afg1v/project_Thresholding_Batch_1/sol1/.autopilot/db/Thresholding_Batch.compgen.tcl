# This script segment is generated automatically by AutoPilot

# Memory (RAM/ROM)  definition:
set ID 1
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_Batcbkb
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000000100001011000" "0000001101110000000" "0000001100111100101" "0000010100011101101" "0000001101000010010" "0000001001111011111" "1111111010000100100" "1111111111100100110" "1111100010101011000" "1111101001110011100" "0000011000101000100" "0000001100100110010" "0000000110000110101" "1111111011001010111" "0000001100111011101" "1111011111111111000" "1111110001010100011" "0000010001011111110" "0000001111000101110" "0000001100011000011" "1111010101110000100" "0000010100011000000" "1110110111110011110" "1111101001001010011" "0000000111111000001" "0000001101100010011" "1111110110010100101" "0000110001110001011" "1111011011011010011" "0000010000101000111" "1111000010101000001" "1111111100010010010" "1001010011011000111" "1111110100010110011" "1111101100101011000" "1111101011110001011" "1111010111001001010" "1111110011100011010" "1111101001111101001" "1111110110001011011" "1111110000111110001" "1111110110100100100" "1111110001001101001" "0000000001001000100" "0000001000111000010" "1111010000010111010" "1111010110101111111" "1111100101001010001" "0000010100000101001" "0000000110110010111" "1111010000101110101" "0000001011111111011" "0000010110010101111" "0000100001101111000" "0000111001100111011" "0000100001101011001" "1111100010000110100" "0000001011111001001" "1111110111011010001" "1111101011111000010" "1111101111001111011" "0000100100010101010" "1111101101100010011" "0001001111110111001" "0000001101101101001" "0000010010100110010" "1111110010100110010" "0000000110101100011" "0001011101111100010" "1111101100001001101" "1010111100110110010" "0000001010011010110" "0000000111111110011" "0000011011001000011" "0000000001110110011" "1111100101001100010" "0000100001010101001" "0000010000110001010" "1111110101100010100" "1111101101000110100" "0000001000011010101" "1111111100110011000" "1111011101111001010" "1111000001111110010" "1111100111011101010" "1111111011000011111" "0000001011110101100" "1111110000010000010" "1111110001000000000" "1111110101000011000" "1111110101011110001" "1111001010111000000" "0000000100000011110" "0000000110010101111" "1111110010011111010" "1111110000110110110" "1111111010101110101" "1111110100011011000" "1111110010101010010" "1111110110111100110" "0000010011100101101" "0000001101001111100" "1111110000010101110" "1111001100110010011" "1111111111100100101" "1111101000110000110" "0000010010100110010" "0000001101101101011" "1111100100001111000" "1110010011001101100" "0000001001110101111" "0000011101110011100" "1111101111000111001" "1111101000000000011" "0001001100001110100" "1111110001101010001" "1111111001001111100" "1111101011000000110" "0000001111001111010" "0000001101111101010" "1111110001010001010" "1111101011101011111" "0000011001101011111" "0000001000111010101" "1111100110001010010" "1110111011010111110" "0000010111101110000" "1111100101011101100" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 2
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_Batccud
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000000100100011110" "0000001110001100100" "0000001101001000000" "0000010100101011101" "0000001110000010001" "0000001010100101101" "1111111010010101100" "0000000000000010100" "1111100100000011001" "1111101010000010100" "0000011001010101110" "0000001100101110101" "0000000110010011000" "1111111011011100111" "0000001101111110001" "1111100000111101101" "1111110001100011000" "0000010001110101010" "0000001111010011100" "0000001100101001010" "1111010111001000110" "0000011010000100001" "1110111001101000001" "1111101001101000011" "0000001010000011010" "0000001101111101111" "1111110110100100111" "0000110010100100110" "1111011100000101111" "0000010000110000010" "1111000101100001110" "1111111100011100000" "1001011101101010111" "1111110100110110011" "1111101101000011111" "1111101100001110111" "1111011000001001001" "1111110011111101100" "1111101010001111110" "1111110110100000001" "1111110001001011110" "1111110110110011010" "1111110001100000010" "0000000001100110101" "0000001010110111100" "1111010001011001000" "1111010111001011101" "1111100101110000111" "0000010100101110011" "0000000111010000011" "1111010001101101000" "0000001100001001111" "0000010110100111100" "0000101010100100101" "0000111010101101001" "0000100010000110100" "1111100010110100001" "0000001101100011111" "1111110111110111010" "1111101100010110010" "1111101111110011111" "0000100100110001100" "1111101110001000100" "0001010111001111000" "0000001110000110110" "0000010100000010101" "1111110010110101100" "0000000110110100000" "0001100000111000010" "1111101100011111010" "1011000100111010010" "0000001100110001110" "0000001000111011011" "0000011011011011111" "0000000010010111010" "1111100101110100101" "0000100001111010110" "0000010000111010100" "1111110101111011010" "1111101101100000000" "0000001000100011110" "1111111101000100000" "1111011110101111010" "1111000011000001011" "1111101000001111100" "1111111011100000011" "0000001100001001100" "1111110000011110010" "1111110001011100010" "1111110101001100010" "1111110101101101111" "1111001100011001001" "0000000100100010010" "0000000110100110100" "1111110010110000010" "1111110001001101000" "1111111011000101011" "1111110100111100100" "1111110011001001100" "1111110111001011100" "0000010100000001001" "0000010000010100101" "1111110000101011001" "1111001110000011001" "1111111111111100100" "1111101001010101110" "0000010101111000011" "0000001101111000110" "1111100100101000010" "1110010111010011100" "0000001010001100011" "0000100000100101001" "1111101111011111011" "1111101001010010101" "0001010101100111011" "1111110010000011010" "1111111001100101010" "1111101011101101001" "0000001111100101100" "0000001110100000011" "1111110001101100011" "1111101100001010001" "0000011010000001010" "0000001010001111001" "1111100110100110001" "1110111100110011100" "0000011010100011001" "1111100110101011011" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 3
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_BatcdEe
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000000100111100011" "0000001110101001000" "0000001101010011011" "0000010100111001110" "0000001111000010001" "0000001011001111011" "1111111010100110100" "0000000000100000011" "1111100101011011011" "1111101010010001100" "0000011010000010111" "0000001100110111000" "0000000110011111100" "1111111011101110111" "0000001111000000100" "1111100001111100001" "1111110001110001101" "0000010010001010101" "0000001111100001001" "0000001100111010001" "1111011000100001000" "0000011111110000001" "1110111011011100101" "1111101010000110010" "0000001100001110010" "0000001110011001011" "1111110110110101000" "0000110011011000001" "1111011100110001011" "0000010000110111101" "1111001000011011011" "1111111100100101110" "1001100111111100111" "1111110101010110100" "1111101101011100110" "1111101100101100100" "1111011001001000111" "1111110100010111110" "1111101010100010100" "1111110110110100110" "1111110001011001010" "1111110111000010000" "1111110001110011011" "0000000010000100101" "0000001100110110110" "1111010010011010110" "1111010111100111011" "1111100110010111101" "0000010101010111101" "0000000111101101110" "1111010010101011011" "0000001100010100011" "0000010110111001010" "0000110011011010001" "0000111011110010111" "0000100010100010000" "1111100011100001110" "0000001111001110110" "1111111000010100100" "1111101100110100011" "1111110000011000011" "0000100101001101110" "1111101110101110101" "0001011110100110111" "0000001110100000010" "0000010101011111001" "1111110011000100110" "0000000110111011110" "0001100011110100011" "1111101100110101000" "1011001100111110011" "0000001111001000111" "0000001001111000011" "0000011011101111100" "0000000010111000001" "1111100110011101000" "0000100010100000011" "0000010001000011111" "1111110110010100000" "1111101101111001100" "0000001000101101000" "1111111101010100111" "1111011111100101010" "1111000100000100100" "1111101001000001110" "1111111011111100110" "0000001100011101100" "1111110000101100010" "1111110001111000011" "1111110101010101100" "1111110101111101110" "1111001101111010001" "0000000101000000111" "0000000110110111001" "1111110011000001010" "1111110001100011011" "1111111011011100001" "1111110101011110000" "1111110011101000110" "1111110111011010010" "0000010100011100101" "0000010011011001111" "1111110001000000011" "1111001111010011111" "0000000000010100010" "1111101001111010101" "0000011001001010100" "0000001110000100000" "1111100101000001101" "1110011011011001101" "0000001010100011000" "0000100011010110101" "1111101111110111101" "1111101010100100111" "0001011111000000011" "1111110010011100010" "1111111001111010111" "1111101100011001101" "0000001111111011110" "0000001111000011101" "1111110010000111011" "1111101100101000011" "0000011010010110110" "0000001011100011100" "1111100111000010000" "1110111110001111010" "0000011101011000001" "1111100111111001011" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 4
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_BatceOg
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000000101010101000" "0000001111000101100" "0000001101011110110" "0000010101000111110" "0000010000000010000" "0000001011111001001" "1111111010110111100" "0000000000111110010" "1111100110110011101" "1111101010100000011" "0000011010110000001" "0000001100111111100" "0000000110101011111" "1111111100000000111" "0000010000000011000" "1111100010111010110" "1111110010000000010" "0000010010100000001" "0000001111101110111" "0000001101001011001" "1111011001111001001" "0000100101011100001" "1110111101010001000" "1111101010100100001" "0000001110011001011" "0000001110110100111" "1111110111000101001" "0000110100001011101" "1111011101011100111" "0000010000111111000" "1111001011010100111" "1111111100101111100" "1001110010001110111" "1111110101110110100" "1111101101110101101" "1111101101001010000" "1111011010001000110" "1111110100110010000" "1111101010110101001" "1111110111001001100" "1111110001100110110" "1111110111010000101" "1111110010000110100" "0000000010100010110" "0000001110110110000" "1111010011011100101" "1111011000000011001" "1111100110111110100" "0000010110000000111" "0000001000001011001" "1111010011101001111" "0000001100011110110" "0000010111001011000" "0000111100001111101" "0000111100111000101" "0000100010111101100" "1111100100001111011" "0000010000111001100" "1111111000110001101" "1111101101010010100" "1111110000111100110" "0000100101101010000" "1111101111010100110" "0001100101111110110" "0000001110111001110" "0000010110111011101" "1111110011010100000" "0000000111000011011" "0001100110110000011" "1111101101001010101" "1011010101000010011" "0000010001011111111" "0000001010110101011" "0000011100000011000" "0000000011011001000" "1111100111000101100" "0000100011000110001" "0000010001001101001" "1111110110101100101" "1111101110010011000" "0000001000110110010" "1111111101100101110" "1111100000011011010" "1111000101000111100" "1111101001110100001" "1111111100011001010" "0000001100110001100" "1111110000111010001" "1111110010010100101" "1111110101011110111" "1111110110001101100" "1111001111011011001" "0000000101011111100" "0000000111000111110" "1111110011010010001" "1111110001111001101" "1111111011110010111" "1111110101111111100" "1111110100001000000" "1111110111101001000" "0000010100111000000" "0000010110011111001" "1111110001010101110" "1111010000100100101" "0000000000101100000" "1111101010011111100" "0000011100011100100" "0000001110001111011" "1111100101011010111" "1110011111011111110" "0000001010111001100" "0000100110001000010" "1111110000001111111" "1111101011110111000" "0001101000011001011" "1111110010110101011" "1111111010010000101" "1111101101000110000" "0000010000010010000" "0000001111100110111" "1111110010100010011" "1111101101000110100" "0000011010101100010" "0000001100111000000" "1111100111011101110" "1110111111101010111" "0000100000001101001" "1111101001000111011" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 5
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_BatcfYi
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000000101101101101" "0000001111100010000" "0000001101101010001" "0000010101010101110" "0000010001000010000" "0000001100100010111" "1111111011001000100" "0000000001011100000" "1111101000001011110" "1111101010101111011" "0000011011011101011" "0000001101000111111" "0000000110111000010" "1111111100010010111" "0000010001000101011" "1111100011111001010" "1111110010001110111" "0000010010110101101" "0000001111111100101" "0000001101011100000" "1111011011010001011" "0000101011001000010" "1110111111000101011" "1111101011000010000" "0000010000100100011" "0000001111010000010" "1111110111010101011" "0000110100111111000" "1111011110001000011" "0000010001000110011" "1111001110001110100" "1111111100111001010" "1001111100100000111" "1111110110010110100" "1111101110001110101" "1111101101100111101" "1111011011001000100" "1111110101001100010" "1111101011000111111" "1111110111011110010" "1111110001110100011" "1111110111011111011" "1111110010011001101" "0000000011000000110" "0000010000110101001" "1111010100011110011" "1111011000011111000" "1111100111100101010" "0000010110101010001" "0000001000101000101" "1111010100101000010" "0000001100101001010" "0000010111011100110" "0001000101000101010" "0000111101111110011" "0000100011011001000" "1111100100111101000" "0000010010100100011" "1111111001001110111" "1111101101110000100" "1111110001100001010" "0000100110000110010" "1111101111111010111" "0001101101010110100" "0000001111010011010" "0000011000011000000" "1111110011100011010" "0000000111001011000" "0001101001101100011" "1111101101100000010" "1011011101000110100" "0000010011110110111" "0000001011110010100" "0000011100010110100" "0000000011111001110" "1111100111101101111" "0000100011101011110" "0000010001010110011" "1111110111000101011" "1111101110101100100" "0000001000111111100" "1111111101110110110" "1111100001010001010" "1111000110001010101" "1111101010100110011" "1111111100110101110" "0000001101000101100" "1111110001001000001" "1111110010110000111" "1111110101101000001" "1111110110011101010" "1111010000111100001" "0000000101111110001" "0000000111011000011" "1111110011100011001" "1111110010001111111" "1111111100001001100" "1111110110100001000" "1111110100100111010" "1111110111110111110" "0000010101010011100" "0000011001100100011" "1111110001101011000" "1111010001110101011" "0000000001000011111" "1111101011000100100" "0000011111101110101" "0000001110011010110" "1111100101110100010" "1110100011100101110" "0000001011010000000" "0000101000111001110" "1111110000101000001" "1111101101001001010" "0001110001110010010" "1111110011001110011" "1111111010100110010" "1111101101110010011" "0000010000101000010" "0000010000001010000" "1111110010111101100" "1111101101100100110" "0000011011000001101" "0000001110001100100" "1111100111111001101" "1111000001000110101" "0000100011000010010" "1111101010010101011" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 6
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_Batcg8j
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000000110000110010" "0000001111111110100" "0000001101110101100" "0000010101100011110" "0000010010000001111" "0000001101001100110" "1111111011011001100" "0000000001111001111" "1111101001100100000" "1111101010111110011" "0000011100001010101" "0000001101010000010" "0000000111000100101" "1111111100100100111" "0000010010000111111" "1111100100110111110" "1111110010011101100" "0000010011001011001" "0000010000001010010" "0000001101101100111" "1111011100101001100" "0000110000110100010" "1111000000111001111" "1111101011011111111" "0000010010101111011" "0000001111101011110" "1111110111100101100" "0000110101110010011" "1111011110110011111" "0000010001001101101" "1111010001001000001" "1111111101000011000" "1010000110110010111" "1111110110110110101" "1111101110100111100" "1111101110000101001" "1111011100001000011" "1111110101100110100" "1111101011011010100" "1111110111110010111" "1111110010000001111" "1111110111101110001" "1111110010101100110" "0000000011011110110" "0000010010110100011" "1111010101100000001" "1111011000111010110" "1111101000001100000" "0000010111010011011" "0000001001000110000" "1111010101100110110" "0000001100110011110" "0000010111101110011" "0001001101111010110" "0000111111000100001" "0000100011110100100" "1111100101101010101" "0000010100001111010" "1111111001101100000" "1111101110001110101" "1111110010000101110" "0000100110100010100" "1111110000100001000" "0001110100101110011" "0000001111101100110" "0000011001110100100" "1111110011110010100" "0000000111010010101" "0001101100101000100" "1111101101110101111" "1011100101001010100" "0000010110001101111" "0000001100101111100" "0000011100101010000" "0000000100011010101" "1111101000010110010" "0000100100010001011" "0000010001011111101" "1111110111011110001" "1111101111000110000" "0000001001001000101" "1111111110000111101" "1111100010000111010" "1111000111001101110" "1111101011011000101" "1111111101010010010" "0000001101011001101" "1111110001010110001" "1111110011001101001" "1111110101110001011" "1111110110101101001" "1111010010011101010" "0000000110011100101" "0000000111101001000" "1111110011110100001" "1111110010100110010" "1111111100100000010" "1111110111000010100" "1111110101000110100" "1111111000000110101" "0000010101101111000" "0000011100101001101" "1111110010000000011" "1111010011000110001" "0000000001011011101" "1111101011101001011" "0000100011000000101" "0000001110100110001" "1111100110001101100" "1110100111101011111" "0000001011100110101" "0000101011101011011" "1111110001000000011" "1111101110011011100" "0001111011001011010" "1111110011100111100" "1111111010111100000" "1111101110011110110" "0000010000111110100" "0000010000101101010" "1111110011011000100" "1111101110000011000" "0000011011010111001" "0000001111100000111" "1111101000010101011" "1111000010100010010" "0000100101110111010" "1111101011100011010" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 7
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_Batchbi
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000000110011111000" "0000010000011011001" "0000001110000000111" "0000010101110001111" "0000010011000001111" "0000001101110110100" "1111111011101010100" "0000000010010111110" "1111101010111100010" "1111101011001101011" "0000011100110111111" "0000001101011000101" "0000000111010001000" "1111111100110110111" "0000010011001010010" "1111100101110110011" "1111110010101100001" "0000010011100000101" "0000010000011000000" "0000001101111101110" "1111011110000001110" "0000110110100000010" "1111000010101110010" "1111101011111101111" "0000010100111010100" "0000010000000111010" "1111110111110101101" "0000110110100101110" "1111011111011111011" "0000010001010101000" "1111010100000001110" "1111111101001100101" "1010010001000100111" "1111110111010110101" "1111101111000000011" "1111101110100010110" "1111011101001000001" "1111110110000000110" "1111101011101101010" "1111111000000111101" "1111110010001111011" "1111110111111100111" "1111110010111111111" "0000000011111100111" "0000010100110011101" "1111010110100001111" "1111011001010110100" "1111101000110010111" "0000010111111100101" "0000001001100011011" "1111010110100101001" "0000001100111110001" "0000011000000000001" "0001010110110000010" "0001000000001001111" "0000100100010000000" "1111100110011000010" "0000010101111010000" "1111111010001001001" "1111101110101100101" "1111110010101010010" "0000100110111110110" "1111110001000111001" "0001111100000110010" "0000010000000110010" "0000011011010000111" "1111110100000001110" "0000000111011010010" "0001101111100100100" "1111101110001011101" "1011101101001110101" "0000011000100101000" "0000001101101100100" "0000011100111101100" "0000000100111011100" "1111101000111110110" "0000100100110111001" "0000010001101001000" "1111110111110110111" "1111101111011111100" "0000001001010001111" "1111111110011000100" "1111100010111101010" "1111001000010000111" "1111101100001011000" "1111111101101110101" "0000001101101101101" "1111110001100100001" "1111110011101001010" "1111110101111010101" "1111110110111100111" "1111010011111110010" "0000000110111011010" "0000000111111001110" "1111110100000101000" "1111110010111100100" "1111111100110111000" "1111110111100100000" "1111110101100101110" "1111111000010101011" "0000010110001010100" "0000011111101110110" "1111110010010101101" "1111010100010110111" "0000000001110011100" "1111101100001110011" "0000100110010010110" "0000001110110001100" "1111100110100110111" "1110101011110010000" "0000001011111101001" "0000101110011100111" "1111110001011000101" "1111101111101101110" "0010000100100100010" "1111110100000000100" "1111111011010001110" "1111101111001011001" "0000010001010100110" "0000010001010000100" "1111110011110011100" "1111101110100001010" "0000011011101100100" "0000010000110101011" "1111101000110001010" "1111000011111110000" "0000101000101100010" "1111101100110001010" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 8
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_Batcibs
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000000110110111101" "0000010000110111101" "0000001110001100010" "0000010101111111111" "0000010100000001110" "0000001110100000010" "1111111011111011100" "0000000010110101100" "1111101100010100100" "1111101011011100010" "0000011101100101001" "0000001101100001001" "0000000111011101011" "1111111101001000111" "0000010100001100110" "1111100110110100111" "1111110010111010110" "0000010011110110001" "0000010000100101101" "0000001110001110101" "1111011111011010000" "0000111100001100011" "1111000100100010101" "1111101100011011110" "0000010111000101100" "0000010000100010110" "1111111000000101111" "0000110111011001010" "1111100000001010111" "0000010001011100011" "1111010110111011010" "1111111101010110011" "1010011011010110111" "1111110111110110110" "1111101111011001010" "1111101111000000010" "1111011110001000000" "1111110110011011000" "1111101011111111111" "1111111000011100011" "1111110010011101000" "1111111000001011101" "1111110011010011000" "0000000100011010111" "0000010110110010111" "1111010111100011101" "1111011001110010010" "1111101001011001101" "0000011000100101111" "0000001010000000111" "1111010111100011100" "0000001101001000101" "0000011000010001111" "0001011111100101111" "0001000001001111101" "0000100100101011100" "1111100111000101111" "0000010111100100111" "1111111010100110011" "1111101111001010110" "1111110011001110110" "0000100111011011000" "1111110001101101010" "0010000011011110001" "0000010000011111111" "0000011100101101011" "1111110100010001000" "0000000111100010000" "0001110010100000101" "1111101110100001010" "1011110101010010101" "0000011010111100000" "0000001110101001100" "0000011101010001000" "0000000101011100010" "1111101001100111001" "0000100101011100110" "0000010001110010010" "1111111000001111101" "1111101111111001000" "0000001001011011001" "1111111110101001011" "1111100011110011010" "1111001001010100000" "1111101100111101010" "1111111110001011001" "0000001110000001101" "1111110001110010000" "1111110100000101100" "1111110110000100000" "1111110111001100110" "1111010101011111010" "0000000111011001111" "0000001000001010011" "1111110100010110000" "1111110011010010110" "1111111101001101110" "1111111000000101100" "1111110110000101000" "1111111000100100001" "0000010110100110000" "0000100010110100000" "1111110010101011000" "1111010101100111100" "0000000010001011010" "1111101100110011010" "0000101001100100111" "0000001110111100111" "1111100111000000001" "1110101111111000001" "0000001100010011101" "0000110001001110100" "1111110001110000111" "1111110001000000000" "0010001101111101001" "1111110100011001101" "1111111011100111011" "1111101111110111101" "0000010001101011000" "0000010001110011101" "1111110100001110101" "1111101110111111100" "0000011100000010000" "0000010010001001111" "1111101001001101001" "1111000101011001101" "0000101011100001010" "1111101101111111010" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 9
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_BatcjbC
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000000111010000010" "0000010001010100001" "0000001110010111101" "0000010110001101111" "0000010101000001110" "0000001111001010000" "1111111100001100100" "0000000011010011011" "1111101101101100101" "1111101011101011010" "0000011110010010010" "0000001101101001100" "0000000111101001111" "1111111101011010111" "0000010101001111001" "1111100111110011011" "1111110011001001011" "0000010100001011101" "0000010000110011011" "0000001110011111101" "1111100000110010001" "0001000001111000011" "1111000110010111001" "1111101100111001101" "0000011001010000101" "0000010000111110010" "1111111000010110000" "0000111000001100101" "1111100000110110011" "0000010001100011110" "1111011001110100111" "1111111101100000001" "1010100101101000111" "1111111000010110110" "1111101111110010010" "1111101111011101111" "1111011111000111110" "1111110110110101001" "1111101100010010100" "1111111000110001000" "1111110010101010100" "1111111000011010010" "1111110011100110001" "0000000100111001000" "0000011000110010001" "1111011000100101011" "1111011010001110001" "1111101010000000011" "0000011001001111001" "0000001010011110010" "1111011000100010000" "0000001101010011001" "0000011000100011100" "0001101000011011011" "0001000010010101011" "0000100101000111000" "1111100111110011100" "0000011001001111101" "1111111011000011100" "1111101111101000111" "1111110011110011001" "0000100111110111010" "1111110010010011011" "0010001010110110000" "0000010000111001011" "0000011110001001110" "1111110100100000010" "0000000111101001101" "0001110101011100101" "1111101110110110111" "1011111101010110110" "0000011101010011000" "0000001111100110101" "0000011101100100100" "0000000101111101001" "1111101010001111100" "0000100110000010011" "0000010001111011100" "1111111000101000010" "1111110000010010100" "0000001001100100010" "1111111110111010011" "1111100100101001011" "1111001010010111001" "1111101101101111100" "1111111110100111101" "0000001110010101101" "1111110010000000000" "1111110100100001110" "1111110110001101010" "1111110111011100100" "1111010111000000011" "0000000111111000100" "0000001000011011000" "1111110100100111000" "1111110011101001001" "1111111101100100011" "1111111000100111000" "1111110110100100010" "1111111000110010111" "0000010111000001100" "0000100101111001010" "1111110011000000010" "1111010110111000010" "0000000010100011000" "1111101101011000001" "0000101100110110111" "0000001111001000010" "1111100111011001100" "1110110011111110001" "0000001100101010001" "0000110100000000000" "1111110010001001001" "1111110010010010010" "0010010111010110001" "1111110100110010101" "1111111011111101001" "1111110000100100000" "0000010010000001010" "0000010010010110111" "1111110100101001101" "1111101111011101101" "0000011100010111011" "0000010011011110010" "1111101001101000111" "1111000110110101011" "0000101110010110011" "1111101111001101001" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 10
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_BatckbM
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000000111101000111" "0000010001110000101" "0000001110100011000" "0000010110011011111" "0000010110000001101" "0000001111110011110" "1111111100011101100" "0000000011110001010" "1111101111000100111" "1111101011111010010" "0000011110111111100" "0000001101110001111" "0000000111110110010" "1111111101101100111" "0000010110010001101" "1111101000110010000" "1111110011011000000" "0000010100100001001" "0000010001000001001" "0000001110110000100" "1111100010001010011" "0001000111100100011" "1111001000001011100" "1111101101010111100" "0000011011011011101" "0000010001011001101" "1111111000100110001" "0000111001000000000" "1111100001100001111" "0000010001101011001" "1111011100101110100" "1111111101101001111" "1010101111111010111" "1111111000110110110" "1111110000001011001" "1111101111111011100" "1111100000000111101" "1111110111001111011" "1111101100100101010" "1111111001000101110" "1111110010111000001" "1111111000101001000" "1111110011111001010" "0000000101010111000" "0000011010110001010" "1111011001100111010" "1111011010101001111" "1111101010100111010" "0000011001111000011" "0000001010111011101" "1111011001100000011" "0000001101011101100" "0000011000110101010" "0001110001010000111" "0001000011011011001" "0000100101100010100" "1111101000100001001" "0000011010111010100" "1111111011100000110" "1111110000000110111" "1111110100010111101" "0000101000010011100" "1111110010111001100" "0010010010001101111" "0000010001010010111" "0000011111100110010" "1111110100101111100" "0000000111110001010" "0001111000011000110" "1111101111001100101" "1100000101011010110" "0000011111101010000" "0000010000100011101" "0000011101111000000" "0000000110011110000" "1111101010111000000" "0000100110101000001" "0000010010000100111" "1111111001000001000" "1111110000101100001" "0000001001101101100" "1111111111001011010" "1111100101011111011" "1111001011011010010" "1111101110100001111" "1111111111000100001" "0000001110101001101" "1111110010001110000" "1111110100111110000" "1111110110010110100" "1111110111101100010" "1111011000100001011" "0000001000010111000" "0000001000101011101" "1111110100111000000" "1111110011111111011" "1111111101111011001" "1111111001001000100" "1111110111000011100" "1111111001000001101" "0000010111011100111" "0000101000111110100" "1111110011010101101" "1111011000001001000" "0000000010111010111" "1111101101111101001" "0000110000001001000" "0000001111010011101" "1111100111110010110" "1110111000000100010" "0000001101000000110" "0000110110110001101" "1111110010100001011" "1111110011100100011" "0010100000101111001" "1111110101001011110" "1111111100010010110" "1111110001010000011" "0000010010010111100" "0000010010111010001" "1111110101000100101" "1111101111111011111" "0000011100101100111" "0000010100110010110" "1111101010000100110" "1111001000010001001" "0000110001001011011" "1111110000011011001" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 11
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_BatclbW
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000001000000001101" "0000010010001101001" "0000001110101110011" "0000010110101001111" "0000010111000001101" "0000010000011101100" "1111111100101110100" "0000000100001111000" "1111110000011101001" "1111101100001001010" "0000011111101100110" "0000001101111010010" "0000001000000010101" "1111111101111110111" "0000010111010100000" "1111101001110000100" "1111110011100110101" "0000010100110110101" "0000010001001110110" "0000001111000001011" "1111100011100010101" "0001001101010000100" "1111001001111111111" "1111101101110101011" "0000011101100110110" "0000010001110101001" "1111111000110110011" "0000111001110011011" "1111100010001101011" "0000010001110010011" "1111011111101000001" "1111111101110011101" "1010111010001100111" "1111111001010110111" "1111110000100100000" "1111110000011001000" "1111100001000111011" "1111110111101001101" "1111101100110111111" "1111111001011010100" "1111110011000101101" "1111111000110111110" "1111110100001100011" "0000000101110101001" "0000011100110000100" "1111011010101001000" "1111011011000101101" "1111101011001110000" "0000011010100001101" "0000001011011001001" "1111011010011110110" "0000001101101000000" "0000011001000111000" "0001111010000110100" "0001000100100000111" "0000100101111110000" "1111101001001110101" "0000011100100101010" "1111111011111101111" "1111110000100101000" "1111110100111100001" "0000101000101111110" "1111110011011111101" "0010011001100101101" "0000010001101100011" "0000100001000010110" "1111110100111110111" "0000000111111000111" "0001111011010100110" "1111101111100010010" "1100001101011110111" "0000100010000001001" "0000010001100000101" "0000011110001011100" "0000000110111110111" "1111101011100000011" "0000100111001101110" "0000010010001110001" "1111111001011001110" "1111110001000101101" "0000001001110110110" "1111111111011100001" "1111100110010101011" "1111001100011101010" "1111101111010100001" "1111111111100000100" "0000001110111101101" "1111110010011100000" "1111110101011010001" "1111110110011111110" "1111110111111100001" "1111011010000010011" "0000001000110101101" "0000001000111100010" "1111110101001000111" "1111110100010101101" "1111111110010001111" "1111111001101010000" "1111110111100010110" "1111111001010000011" "0000010111111000011" "0000101100000011101" "1111110011101010111" "1111011001011001110" "0000000011010010101" "1111101110100010000" "0000110011011011000" "0000001111011110111" "1111101000001100001" "1110111100001010011" "0000001101010111010" "0000111001100011001" "1111110010111001101" "1111110100110110101" "0010101010001000001" "1111110101100100110" "1111111100101000100" "1111110001111100110" "0000010010101101110" "0000010011011101011" "1111110101011111110" "1111110000011010001" "0000011101000010011" "0000010110000111010" "1111101010100000101" "1111001001101100110" "0000110100000000011" "1111110001101001001" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 12
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_Batcmb6
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000001000011010010" "0000010010101001101" "0000001110111001110" "0000010110111000000" "0000011000000001100" "0000010001000111010" "1111111100111111100" "0000000100101100111" "1111110001110101011" "1111101100011000001" "0000100000011010000" "0000001110000010110" "0000001000001111000" "1111111110010000111" "0000011000010110100" "1111101010101111001" "1111110011110101010" "0000010101001100001" "0000010001011100100" "0000001111010010010" "1111100100111010110" "0001010010111100100" "1111001011110100011" "1111101110010011010" "0000011111110001110" "0000010010010000101" "1111111001000110100" "0000111010100110110" "1111100010111000111" "0000010001111001110" "1111100010100001110" "1111111101111101011" "1011000100011110111" "1111111001110110111" "1111110000111100111" "1111110000110110101" "1111100010000111010" "1111111000000011111" "1111101101001010101" "1111111001101111001" "1111110011010011001" "1111111001000110100" "1111110100011111100" "0000000110010011001" "0000011110101111110" "1111011011101010110" "1111011011100001100" "1111101011110100110" "0000011011001010111" "0000001011110110100" "1111011011011101010" "0000001101110010011" "0000011001011000101" "0010000010111100000" "0001000101100110101" "0000100110011001011" "1111101001111100010" "0000011110010000001" "1111111100011011000" "1111110001000011001" "1111110101100000101" "0000101001001100001" "1111110100000101110" "0010100000111101100" "0000010010000101111" "0000100010011111001" "1111110101001110001" "0000001000000000100" "0001111110010000110" "1111101111110111111" "1100010101100010111" "0000100100011000001" "0000010010011101101" "0000011110011111000" "0000000111011111101" "1111101100001000110" "0000100111110011011" "0000010010010111011" "1111111001110010100" "1111110001011111001" "0000001001111111111" "1111111111101101001" "1111100111001011011" "1111001101100000011" "1111110000000110011" "1111111111111101000" "0000001111010001101" "1111110010101010000" "1111110101110110011" "1111110110101001001" "1111111000001011111" "1111011011100011011" "0000001001010100010" "0000001001001100111" "1111110101011001111" "1111110100101100000" "1111111110101000101" "1111111010001011100" "1111111000000010001" "1111111001011111010" "0000011000010011111" "0000101111001000111" "1111110100000000010" "1111011010101010100" "0000000011101010100" "1111101111000110111" "0000110110101101001" "0000001111101010010" "1111101000100101011" "1111000000010000011" "0000001101101101110" "0000111100010100110" "1111110011010001111" "1111110110001000111" "0010110011100001000" "1111110101111101111" "1111111100111110001" "1111110010101001010" "0000010011000100000" "0000010100000000100" "1111110101111010110" "1111110000111000011" "0000011101010111110" "0000010111011011101" "1111101010111100011" "1111001011001000100" "0000110110110101011" "1111110010110111001" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 13
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_Batcncg
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000001000110010111" "0000010011000110001" "0000001111000101001" "0000010111000110000" "0000011001000001100" "0000010001110001000" "1111111101010000100" "0000000101001010110" "1111110011001101100" "1111101100100111001" "0000100001000111010" "0000001110001011001" "0000001000011011011" "1111111110100010111" "0000011001011000111" "1111101011101101101" "1111110100000011111" "0000010101100001101" "0000010001101010001" "0000001111100011010" "1111100110010011000" "0001011000101000100" "1111001101101000110" "1111101110110001010" "0000100001111100110" "0000010010101100001" "1111111001010110101" "0000111011011010010" "1111100011100100011" "0000010010000001001" "1111100101011011010" "1111111110000111001" "1011001110110000111" "1111111010010110111" "1111110001010101111" "1111110001010100001" "1111100011000111000" "1111111000011110001" "1111101101011101010" "1111111010000011111" "1111110011100000110" "1111111001010101010" "1111110100110010101" "0000000110110001001" "0000100000101111000" "1111011100101100100" "1111011011111101010" "1111101100011011101" "0000011011110100010" "0000001100010011111" "1111011100011011101" "0000001101111100111" "0000011001101010011" "0010001011110001100" "0001000110101100011" "0000100110110100111" "1111101010101001111" "0000011111111011000" "1111111100111000010" "1111110001100001001" "1111110110000101001" "0000101001101000011" "1111110100101011111" "0010101000010101011" "0000010010011111011" "0000100011111011101" "1111110101011101011" "0000001000001000010" "0010000001001100111" "1111110000001101100" "1100011101100111000" "0000100110101111001" "0000010011011010101" "0000011110110010100" "0000001000000000100" "1111101100110001010" "0000101000011001001" "0000010010100000101" "1111111010001011010" "1111110001111000101" "0000001010001001001" "1111111111111110000" "1111101000000001011" "1111001110100011100" "1111110000111000110" "0000000000011001100" "0000001111100101110" "1111110010110111111" "1111110110010010101" "1111110110110010011" "1111111000011011110" "1111011101000100100" "0000001001110010111" "0000001001011101100" "1111110101101010111" "1111110101000010010" "1111111110111111010" "1111111010101101000" "1111111000100001011" "1111111001101110000" "0000011000101111011" "0000110010001110001" "1111110100010101100" "1111011011111011010" "0000000100000010010" "1111101111101011111" "0000111001111111001" "0000001111110101101" "1111101000111110110" "1111000100010110100" "0000001110000100011" "0000111111000110010" "1111110011101010001" "1111110111011011001" "0010111100111010000" "1111110110010110111" "1111111101010011111" "1111110011010101101" "0000010011011010010" "0000010100100011110" "1111110110010101110" "1111110001010110101" "0000011101101101010" "0000011000110000001" "1111101011011000010" "1111001100100100001" "0000111001101010100" "1111110100000101000" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 14
set hasByteEnable 0
set MemName Thresholding_Batch_1_Thresholding_Batcocq
set CoreName ap_simcore_mem
set PortList { 1 3 }
set DataWd 19
set AddrRange 128
set AddrWd 7
set impl_style distributed
set TrueReset 0
set IsROM 1
set ROMData { "0000001001001011100" "0000010011100010101" "0000001111010000100" "0000010111010100000" "0000011010000001011" "0000010010011010110" "1111111101100001100" "0000000101101000100" "1111110100100101110" "1111101100110110001" "0000100001110100100" "0000001110010011100" "0000001000100111110" "1111111110110100110" "0000011010011011011" "1111101100101100001" "1111110100010010100" "0000010101110111001" "0000010001110111111" "0000001111110100001" "1111100111101011010" "0001011110010100101" "1111001111011101001" "1111101111001111001" "0000100100000111111" "0000010011000111100" "1111111001100110111" "0000111100001101101" "1111100100001111111" "0000010010001000100" "1111101000010100111" "1111111110010000111" "1011011001000010111" "1111111010110111000" "1111110001101110110" "1111110001110001110" "1111100100000110111" "1111111000111000011" "1111101101110000000" "1111111010011000101" "1111110011101110010" "1111111001100011111" "1111110101000101110" "0000000111001111010" "0000100010101110010" "1111011101101110010" "1111011100011001000" "1111101101000010011" "0000011100011101100" "0000001100110001011" "1111011101011010000" "0000001110000111011" "0000011001111100001" "0010010100100111001" "0001000111110010001" "0000100111010000011" "1111101011010111100" "0000100001100101110" "1111111101010101011" "1111110001111111010" "1111110110101001100" "0000101010000100101" "1111110101010010000" "0010101111101101010" "0000010010111001000" "0000100101011000000" "1111110101101100101" "0000001000001111111" "0010000100001000111" "1111110000100011010" "1100100101101011000" "0000101001000110001" "0000010100010111110" "0000011111000110000" "0000001000100001011" "1111101101011001101" "0000101000111110110" "0000010010101010000" "1111111010100100000" "1111110010010010001" "0000001010010010011" "0000000000001110111" "1111101000110111011" "1111001111100110101" "1111110001101011000" "0000000000110101111" "0000001111111001110" "1111110011000101111" "1111110110101110111" "1111110110111011101" "1111111000101011100" "1111011110100101100" "0000001010010001011" "0000001001101110001" "1111110101111011110" "1111110101011000100" "1111111111010110000" "1111111011001110100" "1111111001000000101" "1111111001111100110" "0000011001001010111" "0000110101010011011" "1111110100101010111" "1111011101001100000" "0000000100011010000" "1111110000010000110" "0000111101010001010" "0000010000000001000" "1111101001011000000" "1111001000011100101" "0000001110011010111" "0001000001110111110" "1111110100000010011" "1111111000101101011" "0011000110010011000" "1111110110101111111" "1111111101101001100" "1111110100000010000" "0000010011110000100" "0000010101000111000" "1111110110110000111" "1111110001110100110" "0000011110000010101" "0000011010000100101" "1111101011110100001" "1111001101111111111" "0000111100011111100" "1111110101010011000" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.254
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_2P_LUTRAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# clear list
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_begin
    cg_default_interface_gen_bundle_begin
    AESL_LIB_XILADAPTER::native_axis_begin
}

# Native AXIS:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::native_axis_add] == "::AESL_LIB_XILADAPTER::native_axis_add"} {
eval "::AESL_LIB_XILADAPTER::native_axis_add { \
    id 15 \
    name in_V_V \
    reset_level 1 \
    sync_rst true \
    corename {} \
    metadata {  } \
    op interface \
    ports { in_V_V_TDATA { I 24 vector } in_V_V_TVALID { I 1 bit } in_V_V_TREADY { O 1 bit } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'in_V_V'"
}
}


# Native AXIS:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::native_axis_add] == "::AESL_LIB_XILADAPTER::native_axis_add"} {
eval "::AESL_LIB_XILADAPTER::native_axis_add { \
    id 16 \
    name out_V_V \
    reset_level 1 \
    sync_rst true \
    corename {} \
    metadata {  } \
    op interface \
    ports { out_V_V_TDATA { O 8 vector } out_V_V_TVALID { O 1 bit } out_V_V_TREADY { I 1 bit } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'out_V_V'"
}
}


# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -1 \
    name ap_ctrl \
    type ap_ctrl \
    reset_level 1 \
    sync_rst true \
    corename ap_ctrl \
    op interface \
    ports { ap_start { I 1 bit } ap_ready { O 1 bit } ap_done { O 1 bit } ap_idle { O 1 bit } } \
} "
}


# Adapter definition:
set PortName ap_clk
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_clock] == "cg_default_interface_gen_clock"} {
eval "cg_default_interface_gen_clock { \
    id -2 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_clk \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_rst
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_reset] == "cg_default_interface_gen_reset"} {
eval "cg_default_interface_gen_reset { \
    id -3 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_rst \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-114\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}



# merge
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_end
    cg_default_interface_gen_bundle_end
    AESL_LIB_XILADAPTER::native_axis_end
}


