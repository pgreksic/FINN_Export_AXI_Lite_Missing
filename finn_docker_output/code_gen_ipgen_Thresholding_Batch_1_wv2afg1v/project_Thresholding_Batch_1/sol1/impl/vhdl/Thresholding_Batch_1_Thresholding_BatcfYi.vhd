-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Thresholding_Batch_1_Thresholding_BatcfYi_rom is 
    generic(
             DWIDTH     : integer := 19; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Thresholding_Batch_1_Thresholding_BatcfYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000101101101101", 1 => "0000001111100010000", 
    2 => "0000001101101010001", 3 => "0000010101010101110", 
    4 => "0000010001000010000", 5 => "0000001100100010111", 
    6 => "1111111011001000100", 7 => "0000000001011100000", 
    8 => "1111101000001011110", 9 => "1111101010101111011", 
    10 => "0000011011011101011", 11 => "0000001101000111111", 
    12 => "0000000110111000010", 13 => "1111111100010010111", 
    14 => "0000010001000101011", 15 => "1111100011111001010", 
    16 => "1111110010001110111", 17 => "0000010010110101101", 
    18 => "0000001111111100101", 19 => "0000001101011100000", 
    20 => "1111011011010001011", 21 => "0000101011001000010", 
    22 => "1110111111000101011", 23 => "1111101011000010000", 
    24 => "0000010000100100011", 25 => "0000001111010000010", 
    26 => "1111110111010101011", 27 => "0000110100111111000", 
    28 => "1111011110001000011", 29 => "0000010001000110011", 
    30 => "1111001110001110100", 31 => "1111111100111001010", 
    32 => "1001111100100000111", 33 => "1111110110010110100", 
    34 => "1111101110001110101", 35 => "1111101101100111101", 
    36 => "1111011011001000100", 37 => "1111110101001100010", 
    38 => "1111101011000111111", 39 => "1111110111011110010", 
    40 => "1111110001110100011", 41 => "1111110111011111011", 
    42 => "1111110010011001101", 43 => "0000000011000000110", 
    44 => "0000010000110101001", 45 => "1111010100011110011", 
    46 => "1111011000011111000", 47 => "1111100111100101010", 
    48 => "0000010110101010001", 49 => "0000001000101000101", 
    50 => "1111010100101000010", 51 => "0000001100101001010", 
    52 => "0000010111011100110", 53 => "0001000101000101010", 
    54 => "0000111101111110011", 55 => "0000100011011001000", 
    56 => "1111100100111101000", 57 => "0000010010100100011", 
    58 => "1111111001001110111", 59 => "1111101101110000100", 
    60 => "1111110001100001010", 61 => "0000100110000110010", 
    62 => "1111101111111010111", 63 => "0001101101010110100", 
    64 => "0000001111010011010", 65 => "0000011000011000000", 
    66 => "1111110011100011010", 67 => "0000000111001011000", 
    68 => "0001101001101100011", 69 => "1111101101100000010", 
    70 => "1011011101000110100", 71 => "0000010011110110111", 
    72 => "0000001011110010100", 73 => "0000011100010110100", 
    74 => "0000000011111001110", 75 => "1111100111101101111", 
    76 => "0000100011101011110", 77 => "0000010001010110011", 
    78 => "1111110111000101011", 79 => "1111101110101100100", 
    80 => "0000001000111111100", 81 => "1111111101110110110", 
    82 => "1111100001010001010", 83 => "1111000110001010101", 
    84 => "1111101010100110011", 85 => "1111111100110101110", 
    86 => "0000001101000101100", 87 => "1111110001001000001", 
    88 => "1111110010110000111", 89 => "1111110101101000001", 
    90 => "1111110110011101010", 91 => "1111010000111100001", 
    92 => "0000000101111110001", 93 => "0000000111011000011", 
    94 => "1111110011100011001", 95 => "1111110010001111111", 
    96 => "1111111100001001100", 97 => "1111110110100001000", 
    98 => "1111110100100111010", 99 => "1111110111110111110", 
    100 => "0000010101010011100", 101 => "0000011001100100011", 
    102 => "1111110001101011000", 103 => "1111010001110101011", 
    104 => "0000000001000011111", 105 => "1111101011000100100", 
    106 => "0000011111101110101", 107 => "0000001110011010110", 
    108 => "1111100101110100010", 109 => "1110100011100101110", 
    110 => "0000001011010000000", 111 => "0000101000111001110", 
    112 => "1111110000101000001", 113 => "1111101101001001010", 
    114 => "0001110001110010010", 115 => "1111110011001110011", 
    116 => "1111111010100110010", 117 => "1111101101110010011", 
    118 => "0000010000101000010", 119 => "0000010000001010000", 
    120 => "1111110010111101100", 121 => "1111101101100100110", 
    122 => "0000011011000001101", 123 => "0000001110001100100", 
    124 => "1111100111111001101", 125 => "1111000001000110101", 
    126 => "0000100011000010010", 127 => "1111101010010101011" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Thresholding_Batch_1_Thresholding_BatcfYi is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Thresholding_Batch_1_Thresholding_BatcfYi is
    component Thresholding_Batch_1_Thresholding_BatcfYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Thresholding_Batch_1_Thresholding_BatcfYi_rom_U :  component Thresholding_Batch_1_Thresholding_BatcfYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


