// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Thresholding_Batch_2_Thresholding_Batch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_V_TDATA,
        in_V_V_TVALID,
        in_V_V_TREADY,
        out_V_V_TDATA,
        out_V_V_TVALID,
        out_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in_V_V_TDATA;
input   in_V_V_TVALID;
output   in_V_V_TREADY;
output  [7:0] out_V_V_TDATA;
output   out_V_V_TVALID;
input   out_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_V_TREADY;
reg out_V_V_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] threshs_m_thresholds_13_address0;
reg    threshs_m_thresholds_13_ce0;
wire   [17:0] threshs_m_thresholds_13_q0;
wire   [5:0] threshs_m_thresholds_12_address0;
reg    threshs_m_thresholds_12_ce0;
wire   [17:0] threshs_m_thresholds_12_q0;
wire   [5:0] threshs_m_thresholds_7_address0;
reg    threshs_m_thresholds_7_ce0;
wire   [17:0] threshs_m_thresholds_7_q0;
wire   [5:0] threshs_m_thresholds_6_address0;
reg    threshs_m_thresholds_6_ce0;
wire   [17:0] threshs_m_thresholds_6_q0;
wire   [5:0] threshs_m_thresholds_5_address0;
reg    threshs_m_thresholds_5_ce0;
wire   [17:0] threshs_m_thresholds_5_q0;
wire   [5:0] threshs_m_thresholds_4_address0;
reg    threshs_m_thresholds_4_ce0;
wire   [17:0] threshs_m_thresholds_4_q0;
wire   [5:0] threshs_m_thresholds_3_address0;
reg    threshs_m_thresholds_3_ce0;
wire   [16:0] threshs_m_thresholds_3_q0;
wire   [5:0] threshs_m_thresholds_2_address0;
reg    threshs_m_thresholds_2_ce0;
wire   [16:0] threshs_m_thresholds_2_q0;
wire   [5:0] threshs_m_thresholds_1_address0;
reg    threshs_m_thresholds_1_ce0;
wire   [16:0] threshs_m_thresholds_1_q0;
wire   [5:0] threshs_m_thresholds_address0;
reg    threshs_m_thresholds_ce0;
wire   [16:0] threshs_m_thresholds_q0;
wire   [5:0] threshs_m_thresholds_11_address0;
reg    threshs_m_thresholds_11_ce0;
wire   [16:0] threshs_m_thresholds_11_q0;
wire   [5:0] threshs_m_thresholds_10_address0;
reg    threshs_m_thresholds_10_ce0;
wire   [16:0] threshs_m_thresholds_10_q0;
wire   [5:0] threshs_m_thresholds_9_address0;
reg    threshs_m_thresholds_9_ce0;
wire   [16:0] threshs_m_thresholds_9_q0;
wire   [5:0] threshs_m_thresholds_8_address0;
reg    threshs_m_thresholds_8_ce0;
wire   [16:0] threshs_m_thresholds_8_q0;
reg    in_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln221_fu_299_p2;
reg    out_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln221_reg_686;
reg   [0:0] icmp_ln221_reg_686_pp0_iter1_reg;
reg   [31:0] nf_assign_reg_277;
reg   [15:0] i_0_reg_288;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] i_fu_305_p2;
reg  signed [15:0] tmp_V_1_reg_695;
wire   [31:0] nf_1_fu_341_p3;
wire   [0:0] icmp_ln899_fu_355_p2;
reg   [0:0] icmp_ln899_reg_776;
wire   [0:0] icmp_ln899_1_fu_361_p2;
reg   [0:0] icmp_ln899_1_reg_781;
wire   [0:0] icmp_ln899_2_fu_367_p2;
reg   [0:0] icmp_ln899_2_reg_786;
wire   [0:0] icmp_ln899_3_fu_373_p2;
reg   [0:0] icmp_ln899_3_reg_791;
wire   [0:0] icmp_ln899_4_fu_379_p2;
reg   [0:0] icmp_ln899_4_reg_796;
wire   [0:0] icmp_ln899_5_fu_385_p2;
reg   [0:0] icmp_ln899_5_reg_801;
wire   [0:0] icmp_ln899_6_fu_391_p2;
reg   [0:0] icmp_ln899_6_reg_806;
wire   [0:0] icmp_ln899_10_fu_445_p2;
reg   [0:0] icmp_ln899_10_reg_811;
wire   [0:0] icmp_ln899_11_fu_451_p2;
reg   [0:0] icmp_ln899_11_reg_816;
wire   [0:0] icmp_ln899_12_fu_457_p2;
reg   [0:0] icmp_ln899_12_reg_821;
wire   [0:0] icmp_ln899_13_fu_463_p2;
reg   [0:0] icmp_ln899_13_reg_826;
wire   [1:0] add_ln700_7_fu_475_p2;
reg   [1:0] add_ln700_7_reg_831;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] zext_ln142_fu_311_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] nf_fu_329_p2;
wire   [0:0] icmp_ln235_fu_335_p2;
wire  signed [17:0] sext_ln68_fu_349_p1;
wire  signed [16:0] sext_ln137_fu_352_p1;
wire   [0:0] icmp_ln899_7_fu_397_p2;
wire   [0:0] xor_ln899_7_fu_403_p2;
wire   [0:0] icmp_ln899_8_fu_413_p2;
wire   [0:0] xor_ln899_8_fu_419_p2;
wire   [0:0] icmp_ln899_9_fu_429_p2;
wire   [0:0] xor_ln899_9_fu_435_p2;
wire   [1:0] zext_ln142_8_fu_425_p1;
wire   [1:0] zext_ln142_9_fu_441_p1;
wire   [1:0] add_ln700_6_fu_469_p2;
wire   [1:0] zext_ln142_7_fu_409_p1;
wire   [0:0] xor_ln899_fu_481_p2;
wire   [0:0] xor_ln899_1_fu_494_p2;
wire   [0:0] xor_ln899_2_fu_503_p2;
wire   [0:0] xor_ln899_3_fu_512_p2;
wire   [0:0] xor_ln899_4_fu_521_p2;
wire   [0:0] xor_ln899_5_fu_530_p2;
wire   [0:0] xor_ln899_6_fu_539_p2;
wire   [0:0] xor_ln899_10_fu_548_p2;
wire   [0:0] xor_ln899_11_fu_557_p2;
wire   [0:0] xor_ln899_12_fu_566_p2;
wire   [0:0] xor_ln899_13_fu_575_p2;
wire   [1:0] zext_ln142_1_fu_499_p1;
wire   [1:0] zext_ln142_2_fu_508_p1;
wire   [1:0] add_ln700_fu_584_p2;
wire   [3:0] zext_ln700_1_fu_590_p1;
wire   [3:0] select_ln700_fu_486_p3;
wire   [1:0] zext_ln142_3_fu_517_p1;
wire   [1:0] zext_ln142_4_fu_526_p1;
wire   [1:0] add_ln700_2_fu_600_p2;
wire   [1:0] zext_ln142_5_fu_535_p1;
wire   [1:0] zext_ln142_6_fu_544_p1;
wire   [1:0] add_ln700_3_fu_610_p2;
wire   [2:0] zext_ln700_3_fu_616_p1;
wire   [2:0] zext_ln700_2_fu_606_p1;
wire   [2:0] add_ln700_4_fu_620_p2;
wire   [3:0] zext_ln700_4_fu_626_p1;
wire   [3:0] add_ln700_1_fu_594_p2;
wire   [1:0] zext_ln142_10_fu_553_p1;
wire   [1:0] zext_ln142_11_fu_562_p1;
wire   [1:0] add_ln700_8_fu_639_p2;
wire   [1:0] zext_ln142_12_fu_571_p1;
wire   [1:0] zext_ln700_fu_580_p1;
wire   [1:0] add_ln700_9_fu_649_p2;
wire   [2:0] zext_ln700_7_fu_655_p1;
wire   [2:0] zext_ln700_6_fu_645_p1;
wire   [2:0] add_ln700_10_fu_659_p2;
wire   [2:0] zext_ln700_5_fu_636_p1;
wire   [2:0] add_ln700_11_fu_665_p2;
wire   [3:0] zext_ln700_8_fu_671_p1;
wire   [3:0] add_ln700_5_fu_630_p2;
wire   [3:0] tmp_V_fu_675_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Thresholding_Batch_2_Thresholding_Batcbkb #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_13_address0),
    .ce0(threshs_m_thresholds_13_ce0),
    .q0(threshs_m_thresholds_13_q0)
);

Thresholding_Batch_2_Thresholding_Batccud #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_12_address0),
    .ce0(threshs_m_thresholds_12_ce0),
    .q0(threshs_m_thresholds_12_q0)
);

Thresholding_Batch_2_Thresholding_BatcdEe #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_7_address0),
    .ce0(threshs_m_thresholds_7_ce0),
    .q0(threshs_m_thresholds_7_q0)
);

Thresholding_Batch_2_Thresholding_BatceOg #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_6_address0),
    .ce0(threshs_m_thresholds_6_ce0),
    .q0(threshs_m_thresholds_6_q0)
);

Thresholding_Batch_2_Thresholding_BatcfYi #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_5_address0),
    .ce0(threshs_m_thresholds_5_ce0),
    .q0(threshs_m_thresholds_5_q0)
);

Thresholding_Batch_2_Thresholding_Batcg8j #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_4_address0),
    .ce0(threshs_m_thresholds_4_ce0),
    .q0(threshs_m_thresholds_4_q0)
);

Thresholding_Batch_2_Thresholding_Batchbi #(
    .DataWidth( 17 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_3_address0),
    .ce0(threshs_m_thresholds_3_ce0),
    .q0(threshs_m_thresholds_3_q0)
);

Thresholding_Batch_2_Thresholding_Batcibs #(
    .DataWidth( 17 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_2_address0),
    .ce0(threshs_m_thresholds_2_ce0),
    .q0(threshs_m_thresholds_2_q0)
);

Thresholding_Batch_2_Thresholding_BatcjbC #(
    .DataWidth( 17 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_1_address0),
    .ce0(threshs_m_thresholds_1_ce0),
    .q0(threshs_m_thresholds_1_q0)
);

Thresholding_Batch_2_Thresholding_BatckbM #(
    .DataWidth( 17 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_address0),
    .ce0(threshs_m_thresholds_ce0),
    .q0(threshs_m_thresholds_q0)
);

Thresholding_Batch_2_Thresholding_BatclbW #(
    .DataWidth( 17 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_11_address0),
    .ce0(threshs_m_thresholds_11_ce0),
    .q0(threshs_m_thresholds_11_q0)
);

Thresholding_Batch_2_Thresholding_Batcmb6 #(
    .DataWidth( 17 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_10_address0),
    .ce0(threshs_m_thresholds_10_ce0),
    .q0(threshs_m_thresholds_10_q0)
);

Thresholding_Batch_2_Thresholding_Batcncg #(
    .DataWidth( 17 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_9_address0),
    .ce0(threshs_m_thresholds_9_ce0),
    .q0(threshs_m_thresholds_9_q0)
);

Thresholding_Batch_2_Thresholding_Batcocq #(
    .DataWidth( 17 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
threshs_m_thresholds_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_8_address0),
    .ce0(threshs_m_thresholds_8_ce0),
    .q0(threshs_m_thresholds_8_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln221_fu_299_p2 == 1'd0))) begin
        i_0_reg_288 <= i_fu_305_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_288 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln221_fu_299_p2 == 1'd0))) begin
        nf_assign_reg_277 <= nf_1_fu_341_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        nf_assign_reg_277 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln221_reg_686 == 1'd0))) begin
        add_ln700_7_reg_831 <= add_ln700_7_fu_475_p2;
        icmp_ln899_10_reg_811 <= icmp_ln899_10_fu_445_p2;
        icmp_ln899_11_reg_816 <= icmp_ln899_11_fu_451_p2;
        icmp_ln899_12_reg_821 <= icmp_ln899_12_fu_457_p2;
        icmp_ln899_13_reg_826 <= icmp_ln899_13_fu_463_p2;
        icmp_ln899_1_reg_781 <= icmp_ln899_1_fu_361_p2;
        icmp_ln899_2_reg_786 <= icmp_ln899_2_fu_367_p2;
        icmp_ln899_3_reg_791 <= icmp_ln899_3_fu_373_p2;
        icmp_ln899_4_reg_796 <= icmp_ln899_4_fu_379_p2;
        icmp_ln899_5_reg_801 <= icmp_ln899_5_fu_385_p2;
        icmp_ln899_6_reg_806 <= icmp_ln899_6_fu_391_p2;
        icmp_ln899_reg_776 <= icmp_ln899_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln221_reg_686 <= icmp_ln221_fu_299_p2;
        icmp_ln221_reg_686_pp0_iter1_reg <= icmp_ln221_reg_686;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln221_fu_299_p2 == 1'd0))) begin
        tmp_V_1_reg_695 <= in_V_V_TDATA;
    end
end

always @ (*) begin
    if ((icmp_ln221_fu_299_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln221_fu_299_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_V_V_TDATA_blk_n = in_V_V_TVALID;
    end else begin
        in_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln221_fu_299_p2 == 1'd0))) begin
        in_V_V_TREADY = 1'b1;
    end else begin
        in_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln221_reg_686_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        out_V_V_TDATA_blk_n = out_V_V_TREADY;
    end else begin
        out_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln221_reg_686_pp0_iter1_reg == 1'd0))) begin
        out_V_V_TVALID = 1'b1;
    end else begin
        out_V_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_10_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_11_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_12_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_13_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_1_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_2_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_3_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_4_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_5_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_6_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_7_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_8_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_9_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        threshs_m_thresholds_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln221_fu_299_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln221_fu_299_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_10_fu_659_p2 = (zext_ln700_7_fu_655_p1 + zext_ln700_6_fu_645_p1);

assign add_ln700_11_fu_665_p2 = (add_ln700_10_fu_659_p2 + zext_ln700_5_fu_636_p1);

assign add_ln700_1_fu_594_p2 = (zext_ln700_1_fu_590_p1 + select_ln700_fu_486_p3);

assign add_ln700_2_fu_600_p2 = (zext_ln142_3_fu_517_p1 + zext_ln142_4_fu_526_p1);

assign add_ln700_3_fu_610_p2 = (zext_ln142_5_fu_535_p1 + zext_ln142_6_fu_544_p1);

assign add_ln700_4_fu_620_p2 = (zext_ln700_3_fu_616_p1 + zext_ln700_2_fu_606_p1);

assign add_ln700_5_fu_630_p2 = (zext_ln700_4_fu_626_p1 + add_ln700_1_fu_594_p2);

assign add_ln700_6_fu_469_p2 = (zext_ln142_8_fu_425_p1 + zext_ln142_9_fu_441_p1);

assign add_ln700_7_fu_475_p2 = (add_ln700_6_fu_469_p2 + zext_ln142_7_fu_409_p1);

assign add_ln700_8_fu_639_p2 = (zext_ln142_10_fu_553_p1 + zext_ln142_11_fu_562_p1);

assign add_ln700_9_fu_649_p2 = (zext_ln142_12_fu_571_p1 + zext_ln700_fu_580_p1);

assign add_ln700_fu_584_p2 = (zext_ln142_1_fu_499_p1 + zext_ln142_2_fu_508_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln221_fu_299_p2 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln221_fu_299_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln221_fu_299_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((in_V_V_TVALID == 1'b0) & (icmp_ln221_fu_299_p2 == 1'd0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((out_V_V_TREADY == 1'b0) & (icmp_ln221_reg_686_pp0_iter1_reg == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_305_p2 = (i_0_reg_288 + 16'd1);

assign icmp_ln221_fu_299_p2 = ((i_0_reg_288 == 16'd50176) ? 1'b1 : 1'b0);

assign icmp_ln235_fu_335_p2 = ((nf_fu_329_p2 == 32'd64) ? 1'b1 : 1'b0);

assign icmp_ln899_10_fu_445_p2 = (($signed(sext_ln137_fu_352_p1) < $signed(threshs_m_thresholds_11_q0)) ? 1'b1 : 1'b0);

assign icmp_ln899_11_fu_451_p2 = (($signed(sext_ln137_fu_352_p1) < $signed(threshs_m_thresholds_10_q0)) ? 1'b1 : 1'b0);

assign icmp_ln899_12_fu_457_p2 = (($signed(sext_ln137_fu_352_p1) < $signed(threshs_m_thresholds_9_q0)) ? 1'b1 : 1'b0);

assign icmp_ln899_13_fu_463_p2 = (($signed(sext_ln137_fu_352_p1) < $signed(threshs_m_thresholds_8_q0)) ? 1'b1 : 1'b0);

assign icmp_ln899_1_fu_361_p2 = (($signed(sext_ln68_fu_349_p1) < $signed(threshs_m_thresholds_12_q0)) ? 1'b1 : 1'b0);

assign icmp_ln899_2_fu_367_p2 = (($signed(sext_ln68_fu_349_p1) < $signed(threshs_m_thresholds_7_q0)) ? 1'b1 : 1'b0);

assign icmp_ln899_3_fu_373_p2 = (($signed(sext_ln68_fu_349_p1) < $signed(threshs_m_thresholds_6_q0)) ? 1'b1 : 1'b0);

assign icmp_ln899_4_fu_379_p2 = (($signed(sext_ln68_fu_349_p1) < $signed(threshs_m_thresholds_5_q0)) ? 1'b1 : 1'b0);

assign icmp_ln899_5_fu_385_p2 = (($signed(sext_ln68_fu_349_p1) < $signed(threshs_m_thresholds_4_q0)) ? 1'b1 : 1'b0);

assign icmp_ln899_6_fu_391_p2 = (($signed(sext_ln137_fu_352_p1) < $signed(threshs_m_thresholds_3_q0)) ? 1'b1 : 1'b0);

assign icmp_ln899_7_fu_397_p2 = (($signed(sext_ln137_fu_352_p1) < $signed(threshs_m_thresholds_2_q0)) ? 1'b1 : 1'b0);

assign icmp_ln899_8_fu_413_p2 = (($signed(sext_ln137_fu_352_p1) < $signed(threshs_m_thresholds_1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln899_9_fu_429_p2 = (($signed(sext_ln137_fu_352_p1) < $signed(threshs_m_thresholds_q0)) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_355_p2 = (($signed(sext_ln68_fu_349_p1) < $signed(threshs_m_thresholds_13_q0)) ? 1'b1 : 1'b0);

assign nf_1_fu_341_p3 = ((icmp_ln235_fu_335_p2[0:0] === 1'b1) ? 32'd0 : nf_fu_329_p2);

assign nf_fu_329_p2 = (nf_assign_reg_277 + 32'd1);

assign out_V_V_TDATA = tmp_V_fu_675_p2;

assign select_ln700_fu_486_p3 = ((xor_ln899_fu_481_p2[0:0] === 1'b1) ? 4'd10 : 4'd9);

assign sext_ln137_fu_352_p1 = tmp_V_1_reg_695;

assign sext_ln68_fu_349_p1 = tmp_V_1_reg_695;

assign threshs_m_thresholds_10_address0 = zext_ln142_fu_311_p1;

assign threshs_m_thresholds_11_address0 = zext_ln142_fu_311_p1;

assign threshs_m_thresholds_12_address0 = zext_ln142_fu_311_p1;

assign threshs_m_thresholds_13_address0 = zext_ln142_fu_311_p1;

assign threshs_m_thresholds_1_address0 = zext_ln142_fu_311_p1;

assign threshs_m_thresholds_2_address0 = zext_ln142_fu_311_p1;

assign threshs_m_thresholds_3_address0 = zext_ln142_fu_311_p1;

assign threshs_m_thresholds_4_address0 = zext_ln142_fu_311_p1;

assign threshs_m_thresholds_5_address0 = zext_ln142_fu_311_p1;

assign threshs_m_thresholds_6_address0 = zext_ln142_fu_311_p1;

assign threshs_m_thresholds_7_address0 = zext_ln142_fu_311_p1;

assign threshs_m_thresholds_8_address0 = zext_ln142_fu_311_p1;

assign threshs_m_thresholds_9_address0 = zext_ln142_fu_311_p1;

assign threshs_m_thresholds_address0 = zext_ln142_fu_311_p1;

assign tmp_V_fu_675_p2 = (zext_ln700_8_fu_671_p1 + add_ln700_5_fu_630_p2);

assign xor_ln899_10_fu_548_p2 = (icmp_ln899_10_reg_811 ^ 1'd1);

assign xor_ln899_11_fu_557_p2 = (icmp_ln899_11_reg_816 ^ 1'd1);

assign xor_ln899_12_fu_566_p2 = (icmp_ln899_12_reg_821 ^ 1'd1);

assign xor_ln899_13_fu_575_p2 = (icmp_ln899_13_reg_826 ^ 1'd1);

assign xor_ln899_1_fu_494_p2 = (icmp_ln899_1_reg_781 ^ 1'd1);

assign xor_ln899_2_fu_503_p2 = (icmp_ln899_2_reg_786 ^ 1'd1);

assign xor_ln899_3_fu_512_p2 = (icmp_ln899_3_reg_791 ^ 1'd1);

assign xor_ln899_4_fu_521_p2 = (icmp_ln899_4_reg_796 ^ 1'd1);

assign xor_ln899_5_fu_530_p2 = (icmp_ln899_5_reg_801 ^ 1'd1);

assign xor_ln899_6_fu_539_p2 = (icmp_ln899_6_reg_806 ^ 1'd1);

assign xor_ln899_7_fu_403_p2 = (icmp_ln899_7_fu_397_p2 ^ 1'd1);

assign xor_ln899_8_fu_419_p2 = (icmp_ln899_8_fu_413_p2 ^ 1'd1);

assign xor_ln899_9_fu_435_p2 = (icmp_ln899_9_fu_429_p2 ^ 1'd1);

assign xor_ln899_fu_481_p2 = (icmp_ln899_reg_776 ^ 1'd1);

assign zext_ln142_10_fu_553_p1 = xor_ln899_10_fu_548_p2;

assign zext_ln142_11_fu_562_p1 = xor_ln899_11_fu_557_p2;

assign zext_ln142_12_fu_571_p1 = xor_ln899_12_fu_566_p2;

assign zext_ln142_1_fu_499_p1 = xor_ln899_1_fu_494_p2;

assign zext_ln142_2_fu_508_p1 = xor_ln899_2_fu_503_p2;

assign zext_ln142_3_fu_517_p1 = xor_ln899_3_fu_512_p2;

assign zext_ln142_4_fu_526_p1 = xor_ln899_4_fu_521_p2;

assign zext_ln142_5_fu_535_p1 = xor_ln899_5_fu_530_p2;

assign zext_ln142_6_fu_544_p1 = xor_ln899_6_fu_539_p2;

assign zext_ln142_7_fu_409_p1 = xor_ln899_7_fu_403_p2;

assign zext_ln142_8_fu_425_p1 = xor_ln899_8_fu_419_p2;

assign zext_ln142_9_fu_441_p1 = xor_ln899_9_fu_435_p2;

assign zext_ln142_fu_311_p1 = nf_assign_reg_277;

assign zext_ln700_1_fu_590_p1 = add_ln700_fu_584_p2;

assign zext_ln700_2_fu_606_p1 = add_ln700_2_fu_600_p2;

assign zext_ln700_3_fu_616_p1 = add_ln700_3_fu_610_p2;

assign zext_ln700_4_fu_626_p1 = add_ln700_4_fu_620_p2;

assign zext_ln700_5_fu_636_p1 = add_ln700_7_reg_831;

assign zext_ln700_6_fu_645_p1 = add_ln700_8_fu_639_p2;

assign zext_ln700_7_fu_655_p1 = add_ln700_9_fu_649_p2;

assign zext_ln700_8_fu_671_p1 = add_ln700_11_fu_665_p2;

assign zext_ln700_fu_580_p1 = xor_ln899_13_fu_575_p2;

endmodule //Thresholding_Batch_2_Thresholding_Batch
