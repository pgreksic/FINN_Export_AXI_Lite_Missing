// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_ST_fsm_state1 = "1";
const sc_lv<3> StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_ST_fsm_state4 = "100";
const bool StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_const_boolean_1 = true;
const sc_lv<32> StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_const_lv32_1 = "1";
const bool StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_const_boolean_0 = false;
const sc_lv<1> StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_const_lv1_0 = "0";
const sc_lv<1> StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_const_lv1_1 = "1";
const sc_lv<16> StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_const_lv16_0 = "0000000000000000";
const sc_lv<8> StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_const_lv8_0 = "00000000";
const sc_lv<8> StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_const_lv8_80 = "10000000";
const sc_lv<8> StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_const_lv8_1 = "1";
const sc_lv<32> StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::ap_const_lv32_2 = "10";

StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in_V_V_TVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln402_fu_88_p2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_V_V_TVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln402_fu_88_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_V_V_TVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln402_fu_88_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( in_V_V_TVALID );
    sensitive << ( icmp_ln402_fu_88_p2 );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( out_V_V_TREADY );
    sensitive << ( icmp_ln411_reg_154 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln402_fu_88_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_r_V_phi_fu_65_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( r_V_reg_61 );
    sensitive << ( icmp_ln402_reg_135 );
    sensitive << ( tmp_V_reg_144 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_i_fu_111_p2);
    sensitive << ( i_1_fu_44 );

    SC_METHOD(thread_icmp_ln402_fu_88_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( t_0_reg_72 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln411_fu_117_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln402_fu_88_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( i_fu_111_p2 );

    SC_METHOD(thread_in_V_V_TDATA_blk_n);
    sensitive << ( in_V_V_TVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln402_fu_88_p2 );

    SC_METHOD(thread_in_V_V_TREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln402_fu_88_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_V_TDATA);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln411_reg_154 );
    sensitive << ( p_Result_s_reg_149 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_V_TDATA_blk_n);
    sensitive << ( out_V_V_TREADY );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln411_reg_154 );

    SC_METHOD(thread_out_V_V_TVALID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln411_reg_154 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_p_Result_s_fu_103_p3);
    sensitive << ( in_V_V_TDATA );
    sensitive << ( ap_phi_mux_r_V_phi_fu_65_p4 );

    SC_METHOD(thread_t_fu_94_p2);
    sensitive << ( t_0_reg_72 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln402_fu_88_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V_V_TDATA, "(port)in_V_V_TDATA");
    sc_trace(mVcdFile, in_V_V_TVALID, "(port)in_V_V_TVALID");
    sc_trace(mVcdFile, in_V_V_TREADY, "(port)in_V_V_TREADY");
    sc_trace(mVcdFile, out_V_V_TDATA, "(port)out_V_V_TDATA");
    sc_trace(mVcdFile, out_V_V_TVALID, "(port)out_V_V_TVALID");
    sc_trace(mVcdFile, out_V_V_TREADY, "(port)out_V_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_V_V_TDATA_blk_n, "in_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln402_fu_88_p2, "icmp_ln402_fu_88_p2");
    sc_trace(mVcdFile, out_V_V_TDATA_blk_n, "out_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, icmp_ln411_reg_154, "icmp_ln411_reg_154");
    sc_trace(mVcdFile, r_V_reg_61, "r_V_reg_61");
    sc_trace(mVcdFile, t_0_reg_72, "t_0_reg_72");
    sc_trace(mVcdFile, icmp_ln402_reg_135, "icmp_ln402_reg_135");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, t_fu_94_p2, "t_fu_94_p2");
    sc_trace(mVcdFile, tmp_V_reg_144, "tmp_V_reg_144");
    sc_trace(mVcdFile, p_Result_s_fu_103_p3, "p_Result_s_fu_103_p3");
    sc_trace(mVcdFile, p_Result_s_reg_149, "p_Result_s_reg_149");
    sc_trace(mVcdFile, icmp_ln411_fu_117_p2, "icmp_ln411_fu_117_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_phi_mux_r_V_phi_fu_65_p4, "ap_phi_mux_r_V_phi_fu_65_p4");
    sc_trace(mVcdFile, i_1_fu_44, "i_1_fu_44");
    sc_trace(mVcdFile, i_fu_111_p2, "i_fu_111_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::~StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln411_fu_117_p2.read()))) {
        i_1_fu_44 = i_fu_111_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_0) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln411_fu_117_p2.read())))) {
        i_1_fu_44 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln402_reg_135.read()))) {
        r_V_reg_61 = tmp_V_reg_144.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        r_V_reg_61 = ap_const_lv16_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        t_0_reg_72 = t_fu_94_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        t_0_reg_72 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln402_reg_135 = icmp_ln402_fu_88_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln411_reg_154 = icmp_ln411_fu_117_p2.read();
        p_Result_s_reg_149 = p_Result_s_fu_103_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_V_reg_144 = in_V_V_TDATA.read();
    }
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read()));
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())));
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())));
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = (esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read()));
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(icmp_ln411_reg_154.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_TREADY.read()));
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_phi_mux_r_V_phi_fu_65_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln402_reg_135.read()))) {
        ap_phi_mux_r_V_phi_fu_65_p4 = tmp_V_reg_144.read();
    } else {
        ap_phi_mux_r_V_phi_fu_65_p4 = r_V_reg_61.read();
    }
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_i_fu_111_p2() {
    i_fu_111_p2 = (!i_1_fu_44.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_1_fu_44.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_icmp_ln402_fu_88_p2() {
    icmp_ln402_fu_88_p2 = (!t_0_reg_72.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(t_0_reg_72.read() == ap_const_lv8_80);
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_icmp_ln411_fu_117_p2() {
    icmp_ln411_fu_117_p2 = (!i_fu_111_p2.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<1>(): sc_lv<1>(i_fu_111_p2.read() == ap_const_lv32_2);
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_in_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_0))) {
        in_V_V_TDATA_blk_n = in_V_V_TVALID.read();
    } else {
        in_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_in_V_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_V_V_TREADY = ap_const_logic_1;
    } else {
        in_V_V_TREADY = ap_const_logic_0;
    }
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_out_V_V_TDATA() {
    out_V_V_TDATA = p_Result_s_reg_149.read();
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_out_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln411_reg_154.read(), ap_const_lv1_1))) {
        out_V_V_TDATA_blk_n = out_V_V_TREADY.read();
    } else {
        out_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_out_V_V_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln411_reg_154.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_V_V_TVALID = ap_const_logic_1;
    } else {
        out_V_V_TVALID = ap_const_logic_0;
    }
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_p_Result_s_fu_103_p3() {
    p_Result_s_fu_103_p3 = esl_concat<16,16>(in_V_V_TDATA.read(), ap_phi_mux_r_V_phi_fu_65_p4.read());
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_t_fu_94_p2() {
    t_fu_94_p2 = (!t_0_reg_72.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(t_0_reg_72.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void StreamingDataWidthConverter_Batch_3_StreamingDataWidthCo_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln402_fu_88_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

