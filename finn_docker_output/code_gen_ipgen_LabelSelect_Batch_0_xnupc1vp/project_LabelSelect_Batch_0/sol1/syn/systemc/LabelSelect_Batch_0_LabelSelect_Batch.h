// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _LabelSelect_Batch_0_LabelSelect_Batch_HH_
#define _LabelSelect_Batch_0_LabelSelect_Batch_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct LabelSelect_Batch_0_LabelSelect_Batch : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > in_V_V_TDATA;
    sc_in< sc_logic > in_V_V_TVALID;
    sc_out< sc_logic > in_V_V_TREADY;
    sc_out< sc_lv<8> > out_V_V_TDATA;
    sc_out< sc_logic > out_V_V_TVALID;
    sc_in< sc_logic > out_V_V_TREADY;


    // Module declarations
    LabelSelect_Batch_0_LabelSelect_Batch(sc_module_name name);
    SC_HAS_PROCESS(LabelSelect_Batch_0_LabelSelect_Batch);

    ~LabelSelect_Batch_0_LabelSelect_Batch();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln374_fu_83_p2;
    sc_signal< sc_logic > out_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > add_ln397_fu_89_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<16> > topval_0_V_1_fu_105_p3;
    sc_signal< sc_lv<16> > topval_V_0_0_reg_57;
    sc_signal< sc_lv<3> > idx_0_0_reg_68;
    sc_signal< sc_lv<8> > tmp_V_fu_40;
    sc_signal< sc_lv<8> > toplabels_0_V_1_fu_113_p3;
    sc_signal< sc_lv<1> > icmp_ln895_fu_95_p2;
    sc_signal< sc_lv<8> > toplabels_0_V_fu_101_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<16> ap_const_lv16_8000;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln397_fu_89_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_icmp_ln374_fu_83_p2();
    void thread_icmp_ln895_fu_95_p2();
    void thread_in_V_V_TDATA_blk_n();
    void thread_in_V_V_TREADY();
    void thread_out_V_V_TDATA();
    void thread_out_V_V_TDATA_blk_n();
    void thread_out_V_V_TVALID();
    void thread_toplabels_0_V_1_fu_113_p3();
    void thread_toplabels_0_V_fu_101_p1();
    void thread_topval_0_V_1_fu_105_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
