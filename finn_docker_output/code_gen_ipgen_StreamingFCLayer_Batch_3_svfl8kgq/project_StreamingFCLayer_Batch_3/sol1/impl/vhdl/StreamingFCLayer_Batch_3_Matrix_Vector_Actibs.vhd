-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Actibs_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_Actibs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000100101000000", 1 => "0000010110001101", 2 => "1111110100110101", 
    3 => "1111101101111011", 4 => "1111101001111001", 5 => "0000000101010100", 
    6 => "0000001011000101", 7 => "1111101111101000", 8 => "1111011001010000", 
    9 => "1111001111110000", 10 => "0000000011000101", 11 => "0000110010011111", 
    12 => "1111101111010100", 13 => "0000011001000000", 14 => "1110001100101110", 
    15 => "0000011101111001", 16 => "0000000011001101", 17 => "1111110011111010", 
    18 => "0000110010100001", 19 => "1111110011000011", 20 => "0000000001101000", 
    21 => "0000001000100111", 22 => "0000010011010000", 23 => "0000101010000011", 
    24 => "0000010111000000", 25 => "1111110000010001", 26 => "1111111000000100", 
    27 => "1111101010100001", 28 => "1111000000111000", 29 => "0000000001100100", 
    30 => "0000000001111010", 31 => "1111100011011001", 32 => "0000001101011010", 
    33 => "1111110011001011", 34 => "0000010011000111", 35 => "0000001111111101", 
    36 => "0000000011010000", 37 => "0000011111010010", 38 => "0001000110001100", 
    39 => "1111110010100000", 40 => "1111101111110110", 41 => "1111110110101010", 
    42 => "1111101001111010", 43 => "0000110000011010", 44 => "1111110111010110", 
    45 => "0000010000111110", 46 => "0000000111110101", 47 => "1111110011100100", 
    48 => "1111110101111001", 49 => "0000010111000011", 50 => "0000010100010011", 
    51 => "1111111000110000", 52 => "1111111100010111", 53 => "1111101110011010", 
    54 => "0000000111001101", 55 => "1111101010101111", 56 => "1111111111011110", 
    57 => "1111111010001010", 58 => "1111110011111010", 59 => "1111111010000000", 
    60 => "1111100001001011", 61 => "0000000111110100", 62 => "0000000111001100", 
    63 => "0000000010011100", 64 => "1111100111111010", 65 => "1111010011000000", 
    66 => "0000000111011101", 67 => "0000001010111000", 68 => "0001001100111110", 
    69 => "1111111101100010", 70 => "1111110011110001", 71 => "1111111110011010", 
    72 => "0000010111011000", 73 => "1110111111111101", 74 => "0000010101011011", 
    75 => "0000001011001111", 76 => "1111111001111001", 77 => "0000101101111011", 
    78 => "0000001011010001", 79 => "1111011111100111", 80 => "1111011110110111", 
    81 => "1111011001010000", 82 => "0000011000101110", 83 => "1111101100010111", 
    84 => "1111110101101100", 85 => "1111101111010101", 86 => "0000011100010011", 
    87 => "0000001011001111", 88 => "1111110001110100", 89 => "0001101001011110", 
    90 => "1111111110111000", 91 => "0000000100010100", 92 => "1110110000111101", 
    93 => "1111110100011010", 94 => "1110111110001101", 95 => "0000001001110111", 
    96 => "1111100111010000", 97 => "0000011100011001", 98 => "1111110100011100", 
    99 => "0000110011011011", 100 => "1111111001110010", 101 => "0000110000000010", 
    102 => "0000011010011110", 103 => "0000000111000101", 104 => "1111110100101011", 
    105 => "0000000111001001", 106 => "0000001110101000", 107 => "1111110111110110", 
    108 => "0000000001110010", 109 => "0000101001111001", 110 => "0000000000100100", 
    111 => "0000110100101100", 112 => "1111110110100011", 113 => "0000010011001001", 
    114 => "1111110110001001", 115 => "1111100001101000", 116 => "0001000001111000", 
    117 => "0101111100100111", 118 => "0000000101100000", 119 => "1111101010101010", 
    120 => "1111100000111100", 121 => "1111111000100011", 122 => "0000100100110000", 
    123 => "1111111111000001", 124 => "0000000001010011", 125 => "0000001110001010", 
    126 => "1111110101111001", 127 => "0000110111010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Actibs is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_Actibs is
    component StreamingFCLayer_Batch_3_Matrix_Vector_Actibs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_Actibs_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_Actibs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


