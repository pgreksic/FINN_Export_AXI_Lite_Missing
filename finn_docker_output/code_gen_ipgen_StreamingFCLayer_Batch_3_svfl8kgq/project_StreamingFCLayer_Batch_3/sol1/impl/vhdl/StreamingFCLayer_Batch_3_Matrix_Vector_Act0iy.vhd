-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Act0iy_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_Act0iy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111011011100", 1 => "1111111100111010", 2 => "1111110101010110", 
    3 => "0000111111100011", 4 => "1111111101110111", 5 => "0000001000111101", 
    6 => "1111100101011001", 7 => "0000011100001010", 8 => "0000000000110110", 
    9 => "0000111000110101", 10 => "0000111101000010", 11 => "0000001110001100", 
    12 => "1111111101000011", 13 => "1111110100100000", 14 => "0000010100111111", 
    15 => "1111111000110111", 16 => "0000110101110100", 17 => "0000001111011011", 
    18 => "1111111100101110", 19 => "0000101000101110", 20 => "1111110101001011", 
    21 => "1111110101111001", 22 => "1111101000101011", 23 => "1111010111001110", 
    24 => "1111100101110101", 25 => "0000010000011100", 26 => "1001011100000000", 
    27 => "0000000101010101", 28 => "1111110100110001", 29 => "1111010010110111", 
    30 => "0000010110111010", 31 => "1111110100110001", 32 => "0100110110000010", 
    33 => "1111101010011010", 34 => "0000011000111111", 35 => "0001001101100101", 
    36 => "1111101001000110", 37 => "1111110011101010", 38 => "0000011011110000", 
    39 => "0000000010001101", 40 => "1111110101010101", 41 => "0000010010110010", 
    42 => "0000001101111111", 43 => "1111111001000110", 44 => "0000010011010111", 
    45 => "0000100011110100", 46 => "1111110011100101", 47 => "1111110010111100", 
    48 => "0000110011010101", 49 => "1111011111011000", 50 => "0000100011110010", 
    51 => "0000010001110110", 52 => "1111110110001001", 53 => "1111001001100101", 
    54 => "0000110111110001", 55 => "0000011000100100", 56 => "0000010100110001", 
    57 => "1111111100000101", 58 => "1111011100001100", 59 => "0000000010011010", 
    60 => "1111101111011101", 61 => "0000000001100110", 62 => "0000010101101110", 
    63 => "0000010001001011", 64 => "0000011100100110", 65 => "0000000001000000", 
    66 => "1111101110001000", 67 => "1111110111000101", 68 => "1111111110010000", 
    69 => "1111101101011001", 70 => "0000011110011010", 71 => "0000000101110110", 
    72 => "0000100111010000", 73 => "1111101000000011", 74 => "0000011110101011", 
    75 => "0000011101100110", 76 => "0000001001100000", 77 => "0000001010001100", 
    78 => "1111011101110000", 79 => "1111110100100000", 80 => "1111101011101100", 
    81 => "0000010111001010", 82 => "0000001001010111", 83 => "0000000100000000", 
    84 => "0000000001001001", 85 => "1111110101101111", 86 => "1111110011011111", 
    87 => "1111110100010010", 88 => "1111110011111000", 89 => "1111111010110101", 
    90 => "1111011011101101", 91 => "0000110111101010", 92 => "1111011100101110", 
    93 => "1111111000100100", 94 => "0001010001100111", 95 => "0000111000110110", 
    96 => "1111110011110111", 97 => "1111110010110001", 98 => "0000000010011000", 
    99 => "0000111010110111", 100 => "0000100111011010", 101 => "0000001100001100", 
    102 => "1111110001000000", 103 => "1111010100010100", 104 => "0000001011010100", 
    105 => "0000001110000000", 106 => "0000001001011101", 107 => "0000000010001111", 
    108 => "0000000110101000", 109 => "0000000101001001", 110 => "0000000001001000", 
    111 => "0000101110101001", 112 => "0000001001001100", 113 => "1111111111011001", 
    114 => "0000001110101001", 115 => "0000011000110000", 116 => "1111111111010111", 
    117 => "0000101010011111", 118 => "0000001111111011", 119 => "1111011011101111", 
    120 => "1111101110110110", 121 => "0000010101110100", 122 => "0000001101010001", 
    123 => "0000000100111100", 124 => "0000001101110010", 125 => "1111101100110111", 
    126 => "0000000101000111", 127 => "0000000010100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Act0iy is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_Act0iy is
    component StreamingFCLayer_Batch_3_Matrix_Vector_Act0iy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_Act0iy_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_Act0iy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


