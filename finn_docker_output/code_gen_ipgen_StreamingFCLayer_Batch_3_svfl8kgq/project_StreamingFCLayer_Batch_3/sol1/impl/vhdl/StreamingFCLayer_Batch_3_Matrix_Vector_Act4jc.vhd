-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Act4jc_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_Act4jc_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111100000000", 1 => "1111111101100010", 2 => "1111110101101110", 
    3 => "0001000010010100", 4 => "1111111110011111", 5 => "0000001001100110", 
    6 => "1111100111100111", 7 => "0000011100101011", 8 => "0000000001100101", 
    9 => "0000111011001110", 10 => "0001000100100101", 11 => "0000001110100100", 
    12 => "1111111101100010", 13 => "1111110101000000", 14 => "0000010101011011", 
    15 => "1111111001010111", 16 => "0000111100101100", 17 => "0000001111111101", 
    18 => "1111111100111101", 19 => "0000101010011110", 20 => "1111110101111110", 
    21 => "1111111000011111", 22 => "1111101001010101", 23 => "1111011001000101", 
    24 => "1111100111011101", 25 => "0000010000110011", 26 => "1001011100000000", 
    27 => "0000000110000001", 28 => "1111110101010000", 29 => "1111010110101010", 
    30 => "0000010111010100", 31 => "1111110101001001", 32 => "0101010011011100", 
    33 => "1111101010111010", 34 => "0000011001011101", 35 => "0001010001100111", 
    36 => "1111101001100001", 37 => "1111110101000001", 38 => "0000011110000110", 
    39 => "0000000010101101", 40 => "1111110101111000", 41 => "0000010100101111", 
    42 => "0000001110100111", 43 => "1111111010010100", 44 => "0000010100000001", 
    45 => "0000100101101001", 46 => "1111110100000111", 47 => "1111110011100111", 
    48 => "0000110110101001", 49 => "1111100000110100", 50 => "0000100101101001", 
    51 => "0000010010010110", 52 => "1111110110110101", 53 => "1111001011010111", 
    54 => "0000111100110100", 55 => "0000011001001111", 56 => "0000010110101010", 
    57 => "1111111100110100", 58 => "1111100001011101", 59 => "0000000011000001", 
    60 => "1111101111111110", 61 => "0000000010010000", 62 => "0000010110010001", 
    63 => "0000010001100001", 64 => "0000011110101001", 65 => "0000000001010110", 
    66 => "1111101111011000", 67 => "1111110111100110", 68 => "1111111110101110", 
    69 => "1111101101111001", 70 => "0000100100001111", 71 => "0000000110010010", 
    72 => "0000101000111101", 73 => "1111101001100111", 74 => "0000100010011111", 
    75 => "0000011111011100", 76 => "0000001001111110", 77 => "0000001100110000", 
    78 => "1111011111000111", 79 => "1111110101000100", 80 => "1111110000011010", 
    81 => "0000010111101000", 82 => "0000001001111001", 83 => "0000000101010011", 
    84 => "0000000001101010", 85 => "1111110110110010", 86 => "1111110100010011", 
    87 => "1111110100100001", 88 => "1111110100001110", 89 => "1111111011011000", 
    90 => "1111011101001001", 91 => "0000111010000110", 92 => "1111100000000100", 
    93 => "1111111001010000", 94 => "0001100010101010", 95 => "0000111110001010", 
    96 => "1111110100010111", 97 => "1111110011001101", 98 => "0000000010110011", 
    99 => "0001000111000010", 100 => "0000101000110001", 101 => "0000001100111010", 
    102 => "1111110001101100", 103 => "1111010110110101", 104 => "0000001011111100", 
    105 => "0000001110100101", 106 => "0000001001110010", 107 => "0000000011010101", 
    108 => "0000000111000101", 109 => "0000000110110001", 110 => "0000000001100101", 
    111 => "0000110001011001", 112 => "0000001001011111", 113 => "0000000000101100", 
    114 => "0000001111111111", 115 => "0000011001000110", 116 => "1111111111110010", 
    117 => "0000110010110001", 118 => "0000010000011010", 119 => "1111011100001100", 
    120 => "1111101111001011", 121 => "0000010110001011", 122 => "0000001110010101", 
    123 => "0000000101011011", 124 => "0000001110001100", 125 => "1111101101101010", 
    126 => "0000000101011101", 127 => "0000000011110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Act4jc is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_Act4jc is
    component StreamingFCLayer_Batch_3_Matrix_Vector_Act4jc_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_Act4jc_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_Act4jc_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


