-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActRg6_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActRg6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111010001010", 1 => "1111111011011111", 2 => "1111110100011110", 
    3 => "0000111001010101", 4 => "1111111100011110", 5 => "0000000111100010", 
    6 => "1111100000011001", 7 => "0000011011000000", 8 => "1111111111001100", 
    9 => "0000110011011110", 10 => "0000101100000110", 11 => "0000001101010101", 
    12 => "1111111011111011", 13 => "1111110011011000", 14 => "0000010100000000", 
    15 => "1111110111101110", 16 => "0000100110010110", 17 => "0000001110001111", 
    18 => "1111111100001011", 19 => "0000100100110001", 20 => "1111110011011000", 
    21 => "1111110000000101", 22 => "1111100111001101", 23 => "1111010011000100", 
    24 => "1111100010001010", 25 => "0000001111101001", 26 => "1001011100000000", 
    27 => "0000000011110010", 28 => "1111110011101010", 29 => "1111001010010110", 
    30 => "0000010110000000", 31 => "1111110011111011", 32 => "0011110011110110", 
    33 => "1111101001010011", 34 => "0000010111111101", 35 => "0001000100011111", 
    36 => "1111101000001000", 37 => "1111110000100110", 38 => "0000010110100000", 
    39 => "0000000001000101", 40 => "1111110100000110", 41 => "0000001110011000", 
    42 => "0000001100100100", 43 => "1111110110011000", 44 => "0000010001111001", 
    45 => "0000011111101101", 46 => "1111110010010111", 47 => "1111110001011100", 
    48 => "0000101011111000", 49 => "1111011100001010", 50 => "0000011111100110", 
    51 => "0000010000101110", 52 => "1111110100100101", 53 => "1111000101100101", 
    54 => "0000101100011010", 55 => "0000010111000011", 56 => "0000010000100000", 
    57 => "1111111010011001", 58 => "1111010000010101", 59 => "0000000001000000", 
    60 => "1111101110010011", 61 => "0000000000000101", 62 => "0000010100011111", 
    63 => "0000010000010111", 64 => "0000011000000001", 65 => "0000000000001111", 
    66 => "1111101011010110", 67 => "1111110101111011", 68 => "1111111101001101", 
    69 => "1111101100010001", 70 => "0000010001010100", 71 => "0000000100111000", 
    72 => "0000100011011101", 73 => "1111100100100001", 74 => "0000010110000110", 
    75 => "0000011001011100", 76 => "0000001000011101", 77 => "0000000100011100", 
    78 => "1111011010101100", 79 => "1111110011010000", 80 => "1111100001000110", 
    81 => "0000010110000110", 82 => "0000001000001010", 83 => "0000000001000111", 
    84 => "0000000000000000", 85 => "1111110011011010", 86 => "1111110001101010", 
    87 => "1111110011110000", 88 => "1111110011000111", 89 => "1111111001100111", 
    90 => "1111011000011110", 91 => "0000110010001010", 92 => "1111010101001101", 
    93 => "1111110111000000", 94 => "0000101011010000", 95 => "0000101100110111", 
    96 => "1111110010101110", 97 => "1111110001110001", 98 => "0000000001011100", 
    99 => "0000011111011110", 100 => "0000100100010110", 101 => "0000001010100100", 
    102 => "1111101111011101", 103 => "1111001110101010", 104 => "0000001001111010", 
    105 => "0000001100101110", 106 => "0000001000101101", 107 => "1111111111110011", 
    108 => "0000000101100101", 109 => "0000000001100000", 110 => "0000000000001001", 
    111 => "0000101000011011", 112 => "0000001000100010", 113 => "1111111100011111", 
    114 => "0000001011100110", 115 => "0000010111111110", 116 => "1111111110011100", 
    117 => "0000010111110110", 118 => "0000001110110100", 119 => "1111011010101101", 
    120 => "1111101110000110", 121 => "0000010100111111", 122 => "0000001010111000", 
    123 => "0000000011110111", 124 => "0000001100110110", 125 => "1111101011000100", 
    126 => "0000000100010110", 127 => "1111111111111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActRg6 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActRg6 is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActRg6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActRg6_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActRg6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


