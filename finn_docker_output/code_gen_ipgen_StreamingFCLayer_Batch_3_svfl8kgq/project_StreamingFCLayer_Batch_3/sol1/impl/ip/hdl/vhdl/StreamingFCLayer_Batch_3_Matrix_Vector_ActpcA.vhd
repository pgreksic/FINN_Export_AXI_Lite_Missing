-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActpcA_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActpcA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000100000001", 1 => "1111011001110111", 2 => "0000001001100001", 
    3 => "0000010010111111", 4 => "0000010111111101", 5 => "0000010011000011", 
    6 => "0000001101010101", 7 => "1111101001110011", 8 => "1111111100001111", 
    9 => "0000000011000000", 10 => "0000011111101110", 11 => "0000010111010001", 
    12 => "1100111001011101", 13 => "1011101000100001", 14 => "0000000101001101", 
    15 => "0000000100101110", 16 => "1111111100101101", 17 => "0010010011101111", 
    18 => "1111100100010000", 19 => "0000100000101111", 20 => "1111101101101010", 
    21 => "1111011001101110", 22 => "1111110011110000", 23 => "1100110111110110", 
    24 => "1111111111111100", 25 => "0000001111001100", 26 => "0000000001001101", 
    27 => "1111110011111110", 28 => "1111101011000001", 29 => "1111110010101110", 
    30 => "1111101111111101", 31 => "1111101100011100", 32 => "0000001011011010", 
    33 => "0000000010100000", 34 => "0000001011101001", 35 => "1111111101011010", 
    36 => "0000100111110111", 37 => "0000010111101100", 38 => "1111111011010111", 
    39 => "0000000001000000", 40 => "1111111001011111", 41 => "0000000000001011", 
    42 => "0000001010011110", 43 => "1111111100100010", 44 => "0000001001010111", 
    45 => "0000001000101010", 46 => "1111111101011101", 47 => "1111111101111001", 
    48 => "1111101101000110", 49 => "1111101111011111", 50 => "1111001101011100", 
    51 => "1111011101100110", 52 => "0000000100110110", 53 => "0000010011011110", 
    54 => "1111011001010000", 55 => "0000010001111011", 56 => "0000000110010101", 
    57 => "0000010110011001", 58 => "1111010001101011", 59 => "0000111001010011", 
    60 => "1111101000100000", 61 => "1111110101000101", 62 => "0000010001010111", 
    63 => "1111110000110011", 64 => "0000010001110011", 65 => "0000001111011111", 
    66 => "0000000100010100", 67 => "0000101001011010", 68 => "0000110011011010", 
    69 => "0000010001111001", 70 => "1111111000011011", 71 => "1111010010010101", 
    72 => "1110001001011010", 73 => "1111101000101001", 74 => "0000001001000001", 
    75 => "0000010010101110", 76 => "1111100110011010", 77 => "0000111000111110", 
    78 => "1110101111011011", 79 => "1111111001010111", 80 => "1111100100011100", 
    81 => "1111111010110110", 82 => "0000010101011110", 83 => "0000000011001001", 
    84 => "1101100111000111", 85 => "1111101110100100", 86 => "0000010000010100", 
    87 => "0000001110101101", 88 => "0000000111100001", 89 => "0000110100000010", 
    90 => "1111110110100110", 91 => "0000000100110010", 92 => "1111011101111101", 
    93 => "0000001100100110", 94 => "0000100000000000", 95 => "0000011011000011", 
    96 => "1111111001101100", 97 => "1110110010011000", 98 => "1111100111111110", 
    99 => "1111110010101101", 100 => "0000001100111101", 101 => "0000001110111011", 
    102 => "0000001100100011", 103 => "1111010111001111", 104 => "1111110100111011", 
    105 => "1111110010110010", 106 => "1111111100001110", 107 => "0000010011010110", 
    108 => "1111111001011010", 109 => "1111000111011010", 110 => "1111110001100000", 
    111 => "1111101110111000", 112 => "1111110110100111", 113 => "1111101110110101", 
    114 => "1111110111101001", 115 => "1111011111011110", 116 => "1110001110000000", 
    117 => "0000000010110010", 118 => "1111101110010100", 119 => "0000000101001110", 
    120 => "1111101110000110", 121 => "1111110110011100", 122 => "1111101100110011", 
    123 => "1111111011100000", 124 => "0000100011011111", 125 => "1111101110110110", 
    126 => "1111111000110000", 127 => "0000000111101101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActpcA is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActpcA is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActpcA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActpcA_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActpcA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


