-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActxdS_rom is 
    generic(
             DWIDTH     : integer := 15; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActxdS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000000111011001", 1 => "111011110001010", 2 => "000001010100000", 
    3 => "000011101011010", 4 => "000011001001011", 5 => "000010111110010", 
    6 => "000010000110101", 7 => "111101010110001", 8 => "111111101010011", 
    9 => "000000100000101", 10 => "000100011011011", 11 => "000100110010011", 
    12 => "101010100101010", 13 => "100011010100011", 14 => "000000111011010", 
    15 => "000000110001010", 16 => "111111101100100", 17 => "010110110011100", 
    18 => "111100101000011", 19 => "000100110010111", 20 => "111101110101000", 
    21 => "111011111100011", 22 => "111110101101010", 23 => "101101100001100", 
    24 => "000000000101110", 25 => "000010001000010", 26 => "000000001110101", 
    27 => "111110110011100", 28 => "111101100000000", 29 => "111110011101010", 
    30 => "111110010001000", 31 => "111101101101001", 32 => "000001100010000", 
    33 => "000000011011010", 34 => "000001100010010", 35 => "111111110010000", 
    36 => "000101111001010", 37 => "000011101111000", 38 => "111111100100010", 
    39 => "000000010001000", 40 => "111111010011000", 41 => "000000001000100", 
    42 => "000001100000001", 43 => "111111101011010", 44 => "000001010011111", 
    45 => "000001001011110", 46 => "000000000110110", 47 => "111111111001111", 
    48 => "111101110001000", 49 => "111110000011001", 50 => "111010010110001", 
    51 => "111100001110000", 52 => "000000110101011", 53 => "000010100010000", 
    54 => "111011011101100", 55 => "000010010111110", 56 => "000000111011001", 
    57 => "000011000000111", 58 => "111100010101110", 59 => "001001000110100", 
    60 => "111101001100000", 61 => "111110110010101", 62 => "000010010010110", 
    63 => "111110001111001", 64 => "000101111111110", 65 => "000010000100010", 
    66 => "000000101011101", 67 => "000101100011101", 68 => "001100000011101", 
    69 => "000010010110111", 70 => "111111001111010", 71 => "111011000000000", 
    72 => "110101001111010", 73 => "111101001101101", 74 => "000001010000011", 
    75 => "000010011100010", 76 => "111101100100110", 77 => "001011011110000", 
    78 => "110111101011111", 79 => "111111010001011", 80 => "111100101010111", 
    81 => "111111011110101", 82 => "000011000111101", 83 => "000000100010011", 
    84 => "110011111111001", 85 => "111101111101101", 86 => "000010001010111", 
    87 => "000001111110000", 88 => "000001000100111", 89 => "000110111111110", 
    90 => "111110111100111", 91 => "000000101100110", 92 => "111011111001100", 
    93 => "000001101011101", 94 => "000100001001111", 95 => "000011100000000", 
    96 => "111111010101101", 97 => "111010011101011", 98 => "111101001000011", 
    99 => "111110011101000", 100 => "000001101110100", 101 => "000001111111110", 
    102 => "000001101000111", 103 => "111011100101100", 104 => "111110110100101", 
    105 => "111110011101111", 106 => "111111101100001", 107 => "000010100100101", 
    108 => "111111010111000", 109 => "111001111100000", 110 => "111110011001101", 
    111 => "111110000010011", 112 => "111110111111011", 113 => "111110001011101", 
    114 => "111111000110110", 115 => "111100001111111", 116 => "111000011001000", 
    117 => "000000100100111", 118 => "111101111100011", 119 => "000000110000110", 
    120 => "111101111000010", 121 => "111110111110000", 122 => "111101101111010", 
    123 => "111111100100010", 124 => "000101110100100", 125 => "111101111110101", 
    126 => "111111001100110", 127 => "000001000110101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActxdS is
    generic (
        DataWidth : INTEGER := 15;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActxdS is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActxdS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActxdS_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActxdS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


