-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActrcU_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActrcU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000100110111", 1 => "1111011010111100", 2 => "0000001001110001", 
    3 => "0000010101100110", 4 => "0000011000010001", 5 => "0000010100001111", 
    6 => "0000001110001101", 7 => "1111101010000011", 8 => "1111111100100000", 
    9 => "0000000011010001", 10 => "0000100000101001", 11 => "0000011011000001", 
    12 => "1101000000010000", 13 => "1011110101000010", 14 => "0000000101110001", 
    15 => "0000000101000101", 16 => "1111111100111011", 17 => "0010011100011010", 
    18 => "1111100100011101", 19 => "0000100010001001", 20 => "1111101101111010", 
    21 => "1111011011001011", 22 => "1111110100001111", 23 => "1101000100111011", 
    24 => "0000000000001000", 25 => "0000001111101010", 26 => "0000000001010111", 
    27 => "1111110100100101", 28 => "1111101011010001", 29 => "1111110010111101", 
    30 => "1111110000100000", 31 => "1111101100110000", 32 => "0000001011100111", 
    33 => "0000000010101110", 34 => "0000001011110100", 35 => "1111111101101000", 
    36 => "0000101001101100", 37 => "0000011001001111", 38 => "1111111011101010", 
    39 => "0000000001010010", 40 => "1111111001101110", 41 => "0000000000011001", 
    42 => "0000001010110111", 43 => "1111111100110000", 44 => "0000001001101001", 
    45 => "0000001000110111", 46 => "1111111110010011", 47 => "1111111110001110", 
    48 => "1111101101010110", 49 => "1111101111101110", 50 => "1111001110110001", 
    51 => "1111011110101001", 52 => "0000000101010011", 53 => "0000010011101010", 
    54 => "1111011001110111", 55 => "0000010010001100", 56 => "0000000110100110", 
    57 => "0000010110110101", 58 => "1111010101111100", 59 => "0000111101001011", 
    60 => "1111101000110000", 61 => "1111110101011001", 62 => "0000010001100110", 
    63 => "1111110001000100", 64 => "0000011001010101", 65 => "0000001111101111", 
    66 => "0000000100100110", 67 => "0000101010001011", 68 => "0000111110101011", 
    69 => "0000010010001001", 70 => "1111111000110011", 71 => "1111010011110000", 
    72 => "1110010001100010", 73 => "1111101000111010", 74 => "0000001001010001", 
    75 => "0000010010111011", 76 => "1111100111111101", 77 => "0001000001101010", 
    78 => "1110110010111100", 79 => "1111111001100100", 80 => "1111100100101011", 
    81 => "1111111011000110", 82 => "0000010110010110", 83 => "0000000011011100", 
    84 => "1101110101010011", 85 => "1111101110110110", 86 => "0000010000100101", 
    87 => "0000001110111101", 88 => "0000000111110011", 89 => "0000110101000001", 
    90 => "1111110110110110", 91 => "0000000100111111", 92 => "1111011110010001", 
    93 => "0000001100110100", 94 => "0000100000010011", 95 => "0000011011010011", 
    96 => "1111111001111100", 97 => "1110111010101101", 98 => "1111101000010000", 
    99 => "1111110010111100", 100 => "0000001101001010", 101 => "0000001111001100", 
    102 => "0000001100101100", 103 => "1111011000100111", 104 => "1111110101010110", 
    105 => "1111110011000001", 106 => "1111111100100011", 107 => "0000010011101010", 
    108 => "1111111001110001", 109 => "1111001001011011", 110 => "1111110001111011", 
    111 => "1111101111001111", 112 => "1111110110111100", 113 => "1111101111011111", 
    114 => "1111110111111100", 115 => "1111100000000110", 116 => "1110011011010010", 
    117 => "0000000011001111", 118 => "1111101110101000", 119 => "0000000101011100", 
    120 => "1111101110010101", 121 => "1111110110110001", 122 => "1111101101000101", 
    123 => "1111111011110001", 124 => "0000100110010001", 125 => "1111101111000110", 
    126 => "1111111000111101", 127 => "0000000111111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActrcU is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActrcU is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActrcU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActrcU_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActrcU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


