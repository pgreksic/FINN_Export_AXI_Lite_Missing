-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActPgM_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActPgM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101001101110", 1 => "0000010001101000", 2 => "1111011111111011", 
    3 => "1111111010000110", 4 => "0000000010100110", 5 => "0000000110010010", 
    6 => "0000101000011010", 7 => "0000000011001000", 8 => "1111100101001111", 
    9 => "0000001111001010", 10 => "1111111111010010", 11 => "0100110111111010", 
    12 => "0000100111101000", 13 => "1111101110011010", 14 => "1111011111010011", 
    15 => "0000010011011000", 16 => "1111100101011101", 17 => "1111110011111100", 
    18 => "0000001110110111", 19 => "0000010110101010", 20 => "1111111111000011", 
    21 => "0000000001101111", 22 => "1111111010101010", 23 => "1111101100100100", 
    24 => "0000011110001101", 25 => "0000000000111100", 26 => "0000010111011100", 
    27 => "1111101111110001", 28 => "1111111010100000", 29 => "0000000110010001", 
    30 => "1111111000100001", 31 => "1111110010010110", 32 => "0000011100001100", 
    33 => "1111110010000101", 34 => "0000000111011101", 35 => "0000110001011110", 
    36 => "0000000110100101", 37 => "0000001111011110", 38 => "1111101111010010", 
    39 => "1111100000011111", 40 => "1111101100111100", 41 => "0000100111110100", 
    42 => "1010110110110111", 43 => "0000000111011111", 44 => "1111010011011111", 
    45 => "1111111010001101", 46 => "1111111011111001", 47 => "0000011011001100", 
    48 => "1111101101111101", 49 => "1110101110110000", 50 => "1111011000100110", 
    51 => "0000001000000100", 52 => "1111111010000000", 53 => "1100000011000110", 
    54 => "1111010011100100", 55 => "0000001101111010", 56 => "1111011111010011", 
    57 => "1111111100011110", 58 => "0000000100010000", 59 => "0000001010110110", 
    60 => "0000001110111110", 61 => "1111111111011101", 62 => "1111101001010001", 
    63 => "0000001001111010", 64 => "0000010001100000", 65 => "0000011001011011", 
    66 => "0110011111110000", 67 => "0000000110011010", 68 => "0000010111011100", 
    69 => "1111110000000011", 70 => "1111110011000111", 71 => "0000000101110011", 
    72 => "1111011100010101", 73 => "0000000011011111", 74 => "1010110111010110", 
    75 => "0000000000010100", 76 => "1111110010110000", 77 => "0000000000010111", 
    78 => "1111011101110111", 79 => "0000000111000011", 80 => "0000001111100101", 
    81 => "0000100001001010", 82 => "0000000011010011", 83 => "0000000100100011", 
    84 => "1001011100000000", 85 => "0000110101110010", 86 => "0000000011110110", 
    87 => "0000000001100111", 88 => "1111110101000000", 89 => "0010100000001111", 
    90 => "1111111111001000", 91 => "1111110000110001", 92 => "1111111110000100", 
    93 => "1111110011001101", 94 => "0000001000011000", 95 => "1111111111011111", 
    96 => "1111111101010100", 97 => "0000101000100110", 98 => "0000000100110011", 
    99 => "1111111001101111", 100 => "0000010001011000", 101 => "0000000000000100", 
    102 => "1111101011110010", 103 => "1111110001110110", 104 => "0000000001001010", 
    105 => "0000010001101100", 106 => "1110100010100010", 107 => "0000000110000000", 
    108 => "0000001100001110", 109 => "0000101011101011", 110 => "0000000101010110", 
    111 => "1111000000001000", 112 => "0000001111111000", 113 => "1111111110100101", 
    114 => "1111100011000110", 115 => "0000010000101000", 116 => "1111111110111001", 
    117 => "0000000100000011", 118 => "1111101111101101", 119 => "0000000101001101", 
    120 => "0000000010011010", 121 => "1111011000101010", 122 => "0001100111100000", 
    123 => "1111101100000110", 124 => "1111111110011010", 125 => "0000011110001011", 
    126 => "0000110000010001", 127 => "0000010101101110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActPgM is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActPgM is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActPgM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActPgM_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActPgM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


