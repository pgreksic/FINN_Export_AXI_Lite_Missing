-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActDeQ_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActDeQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101000010100", 1 => "0000001111110110", 2 => "1111011101110110", 
    3 => "1111111001000010", 4 => "0000000001001000", 5 => "0000000100101101", 
    6 => "0000011110010001", 7 => "0000000001101001", 8 => "1111100011101000", 
    9 => "0000001101101100", 10 => "1111111110010010", 11 => "0001101011011101", 
    12 => "0000100001110101", 13 => "1111011001010000", 14 => "1111011000001101", 
    15 => "0000001100111001", 16 => "1111011111010001", 17 => "1111110010101111", 
    18 => "0000001001011010", 19 => "0000010101010001", 20 => "1111111011100000", 
    21 => "0000000000010011", 22 => "1111110000111001", 23 => "1111101010011001", 
    24 => "0000011000110111", 25 => "1111111111010001", 26 => "0000010101101110", 
    27 => "1111101101100000", 28 => "1111111000100110", 29 => "0000000100101000", 
    30 => "1111110111000001", 31 => "1111110000111000", 32 => "0000011010010001", 
    33 => "1111110000110011", 34 => "0000000101110110", 35 => "0000010110101100", 
    36 => "0000000100101110", 37 => "0000001101010100", 38 => "1111101101111011", 
    39 => "1111001001110001", 40 => "1111101010001110", 41 => "0000100010010010", 
    42 => "1001011100000000", 43 => "0000000101111000", 44 => "1110010101000101", 
    45 => "1111111000010010", 46 => "1111111010010010", 47 => "0000011001100010", 
    48 => "1111101001100100", 49 => "1101001010001001", 50 => "1111010010100001", 
    51 => "0000000101111011", 52 => "1111111000110101", 53 => "1011001010001101", 
    54 => "1101011101001110", 55 => "0000001100101000", 56 => "1111011010011110", 
    57 => "1111111011000100", 58 => "0000000010100010", 59 => "0000001001011000", 
    60 => "0000001101001101", 61 => "1111111110010010", 62 => "1111001111001000", 
    63 => "0000001000100000", 64 => "0000010000010110", 65 => "0000010100001001", 
    66 => "0101001100110110", 67 => "0000000011101101", 68 => "0000010100110110", 
    69 => "1111101101110111", 70 => "1111110001101011", 71 => "0000000100110000", 
    72 => "1111010111101000", 73 => "0000000001110001", 74 => "1001111010010001", 
    75 => "1111111110110000", 76 => "1111110001010010", 77 => "1111111110101001", 
    78 => "1111001101101000", 79 => "0000000100101001", 80 => "0000001101110101", 
    81 => "0000011100001110", 82 => "0000000001011010", 83 => "0000000011001110", 
    84 => "1001011100000000", 85 => "0000100000101010", 86 => "0000000010000000", 
    87 => "0000000000001101", 88 => "1111110100011001", 89 => "0001110010100101", 
    90 => "1111111101010100", 91 => "1111101111000011", 92 => "1111111100010110", 
    93 => "1111110001101101", 94 => "0000000101101100", 95 => "1111111101110101", 
    96 => "1111111100011110", 97 => "0000100011110010", 98 => "0000000011001110", 
    99 => "1111110111111110", 100 => "0000001111111010", 101 => "1111111110011011", 
    102 => "1111101010010011", 103 => "1111101110010101", 104 => "1111111111101011", 
    105 => "0000001111111101", 106 => "1101110101011110", 107 => "0000000100010111", 
    108 => "0000001010011110", 109 => "0000011111110100", 110 => "0000000011110000", 
    111 => "1110101111110110", 112 => "0000001110001110", 113 => "1111111100111000", 
    114 => "1111011110110011", 115 => "0000001111001101", 116 => "1111111110000011", 
    117 => "0000000010000111", 118 => "1111101110001010", 119 => "0000000011001111", 
    120 => "0000000001011011", 121 => "1111010000000001", 122 => "0001010010111000", 
    123 => "1111101010110000", 124 => "1111111010101100", 125 => "0000011100110011", 
    126 => "0000101010011000", 127 => "0000010100100111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActDeQ is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActDeQ is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActDeQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActDeQ_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActDeQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


