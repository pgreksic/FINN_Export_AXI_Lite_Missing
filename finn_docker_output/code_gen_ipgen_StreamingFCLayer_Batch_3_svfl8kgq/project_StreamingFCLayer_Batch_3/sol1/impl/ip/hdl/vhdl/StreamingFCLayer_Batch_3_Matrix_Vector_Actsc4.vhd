-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Actsc4_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_Actsc4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000101010010", 1 => "1111011011011110", 2 => "0000001001111001", 
    3 => "0000010110111001", 4 => "0000011000011010", 5 => "0000010100110101", 
    6 => "0000001110101001", 7 => "1111101010001010", 8 => "1111111100101000", 
    9 => "0000000011011010", 10 => "0000100001000111", 11 => "0000011100111001", 
    12 => "1101000011101010", 13 => "1011111011010010", 14 => "0000000110000010", 
    15 => "0000000101010001", 16 => "1111111101000010", 17 => "0010100000110000", 
    18 => "1111100100100011", 19 => "0000100010110110", 20 => "1111101110000001", 
    21 => "1111011011111010", 22 => "1111110100011110", 23 => "1101001011011110", 
    24 => "0000000000001110", 25 => "0000001111111001", 26 => "0000000001011100", 
    27 => "1111110100111001", 28 => "1111101011011000", 29 => "1111110011000101", 
    30 => "1111110000110001", 31 => "1111101100111001", 32 => "0000001011101110", 
    33 => "0000000010110110", 34 => "0000001011111001", 35 => "1111111101101110", 
    36 => "0000101010100110", 37 => "0000011010000000", 38 => "1111111011110011", 
    39 => "0000000001011011", 40 => "1111111001110101", 41 => "0000000000100000", 
    42 => "0000001011000011", 43 => "1111111100110111", 44 => "0000001001110010", 
    45 => "0000001000111110", 46 => "1111111110101110", 47 => "1111111110011001", 
    48 => "1111101101011111", 49 => "1111101111110101", 50 => "1111001111011100", 
    51 => "1111011111001010", 52 => "0000000101100010", 53 => "0000010011110001", 
    54 => "1111011010001011", 55 => "0000010010010100", 56 => "0000000110101111", 
    57 => "0000010111000010", 58 => "1111011000000100", 59 => "0000111111000111", 
    60 => "1111101000111000", 61 => "1111110101100011", 62 => "0000010001101110", 
    63 => "1111110001001101", 64 => "0000011101000111", 65 => "0000001111111000", 
    66 => "0000000100110000", 67 => "0000101010100011", 68 => "0001000100010100", 
    69 => "0000010010010000", 70 => "1111111000111110", 71 => "1111010100011101", 
    72 => "1110010101100110", 73 => "1111101001000010", 74 => "0000001001011001", 
    75 => "0000010011000010", 76 => "1111101000101111", 77 => "0001000110000000", 
    78 => "1110110100101101", 79 => "1111111001101010", 80 => "1111100100110010", 
    81 => "1111111011001110", 82 => "0000010110110010", 83 => "0000000011100101", 
    84 => "1101111100011010", 85 => "1111101110111111", 86 => "0000010000101101", 
    87 => "0000001111000110", 88 => "0000000111111011", 89 => "0000110101100000", 
    90 => "1111110110111110", 91 => "0000000101000101", 92 => "1111011110011011", 
    93 => "0000001100111011", 94 => "0000100000011101", 95 => "0000011011011010", 
    96 => "1111111010000101", 97 => "1110111110110111", 98 => "1111101000011000", 
    99 => "1111110011000011", 100 => "0000001101010001", 101 => "0000001111010101", 
    102 => "0000001100110000", 103 => "1111011001010010", 104 => "1111110101100011", 
    105 => "1111110011001001", 106 => "1111111100101101", 107 => "0000010011110100", 
    108 => "1111111001111101", 109 => "1111001010011100", 110 => "1111110010001001", 
    111 => "1111101111011010", 112 => "1111110111000111", 113 => "1111101111110100", 
    114 => "1111111000000110", 115 => "1111100000011010", 116 => "1110100001111011", 
    117 => "0000000011011110", 118 => "1111101110110010", 119 => "0000000101100011", 
    120 => "1111101110011100", 121 => "1111110110111011", 122 => "1111101101001110", 
    123 => "1111111011111001", 124 => "0000100111101001", 125 => "1111101111001110", 
    126 => "1111111001000100", 127 => "0000001000001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Actsc4 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_Actsc4 is
    component StreamingFCLayer_Batch_3_Matrix_Vector_Actsc4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_Actsc4_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_Actsc4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


