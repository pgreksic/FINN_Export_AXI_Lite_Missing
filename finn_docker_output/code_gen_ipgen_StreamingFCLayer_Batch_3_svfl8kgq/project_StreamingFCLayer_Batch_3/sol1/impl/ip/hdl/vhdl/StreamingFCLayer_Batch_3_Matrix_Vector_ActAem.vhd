-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActAem_rom is 
    generic(
             DWIDTH     : integer := 15; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActAem_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000001000101010", 1 => "111011111110010", 2 => "000001010111000", 
    3 => "000100001010100", 4 => "000011001101000", 5 => "000011001100011", 
    6 => "000010010001001", 7 => "111101011000111", 8 => "111111101101100", 
    9 => "000000100011111", 10 => "000100100110100", 11 => "000101011111011", 
    12 => "101011110110110", 13 => "100101101010100", 14 => "000001000001111", 
    15 => "000000110101101", 16 => "111111101111001", 17 => "011000011011100", 
    18 => "111100101010110", 19 => "000101000011101", 20 => "111101111000000", 
    21 => "111100001101110", 22 => "111110110011000", 23 => "101111111110100", 
    24 => "000000001000001", 25 => "000010001101110", 26 => "000000010000101", 
    27 => "111110111010111", 28 => "111101100010111", 29 => "111110100000000", 
    30 => "111110010111100", 31 => "111101110000110", 32 => "000001100100101", 
    33 => "000000011110000", 34 => "000001100100001", 35 => "111111110100100", 
    36 => "000110001111010", 37 => "000100000001101", 38 => "111111100111110", 
    39 => "000000010100010", 40 => "111111010101101", 41 => "000000001011010", 
    42 => "000001100100110", 43 => "111111101101110", 44 => "000001010111011", 
    45 => "000001001110010", 46 => "000000010001000", 47 => "111111111110000", 
    48 => "111101110100001", 49 => "111110000101111", 50 => "111010100110000", 
    51 => "111100011010100", 52 => "000000111011000", 53 => "000010100100010", 
    54 => "111011100100111", 55 => "000010011010111", 56 => "000000111110010", 
    57 => "000011000110000", 58 => "111101001000111", 59 => "001001110101001", 
    60 => "111101001111000", 61 => "111110110110011", 62 => "000010010101110", 
    63 => "111110010010100", 64 => "000111011010010", 65 => "000010000111011", 
    66 => "000000101111001", 67 => "000101101100110", 68 => "001110001010110", 
    69 => "000010011001110", 70 => "111111010011110", 71 => "111011010001001", 
    72 => "110110110000110", 73 => "111101010000111", 74 => "000001010011100", 
    75 => "000010011110110", 76 => "111101110111010", 77 => "001101000110011", 
    78 => "111000010110001", 79 => "111111010011110", 80 => "111100101101101", 
    81 => "111111100001100", 82 => "000011010010001", 83 => "000000100101111", 
    84 => "110110101001100", 85 => "111110000001000", 86 => "000010001110000", 
    87 => "000010000001001", 88 => "000001001000001", 89 => "000111001011100", 
    90 => "111111000000000", 91 => "000000101111001", 92 => "111011111101001", 
    93 => "000001101110010", 94 => "000100001101100", 95 => "000011100010111", 
    96 => "111111011000110", 97 => "111100000001010", 98 => "111101001011101", 
    99 => "111110011111110", 100 => "000001110001001", 101 => "000010000011000", 
    102 => "000001101010101", 103 => "111011110101110", 104 => "111110111001101", 
    105 => "111110100000101", 106 => "111111110000001", 107 => "000010101000011", 
    108 => "111111011011011", 109 => "111010010100011", 110 => "111110011110101", 
    111 => "111110000110101", 112 => "111111000011011", 113 => "111110010011100", 
    114 => "111111001010011", 115 => "111100010111011", 116 => "111010111000011", 
    117 => "000000101010011", 118 => "111110000000001", 119 => "000000110011011", 
    120 => "111101111011001", 121 => "111111000010000", 122 => "111101110010101", 
    123 => "111111100111011", 124 => "000110010101110", 125 => "111110000001100", 
    126 => "111111001111010", 127 => "000001001010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActAem is
    generic (
        DataWidth : INTEGER := 15;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActAem is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActAem_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActAem_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActAem_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


