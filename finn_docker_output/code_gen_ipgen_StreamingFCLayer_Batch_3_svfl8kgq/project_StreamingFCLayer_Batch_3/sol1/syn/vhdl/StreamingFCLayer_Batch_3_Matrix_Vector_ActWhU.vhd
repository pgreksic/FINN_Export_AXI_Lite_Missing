-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActWhU_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActWhU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111010110111", 1 => "1111111100010010", 2 => "1111110100111101", 
    3 => "0000111100110010", 4 => "1111111101001111", 5 => "0000001000010101", 
    6 => "1111100011001010", 7 => "0000011011101001", 8 => "0000000000000111", 
    9 => "0000110110011100", 10 => "0000110101100000", 11 => "0000001101110100", 
    12 => "1111111100100011", 13 => "1111110100000000", 14 => "0000010100100011", 
    15 => "1111111000010111", 16 => "0000101110111100", 17 => "0000001110111001", 
    18 => "1111111100011111", 19 => "0000100110111101", 20 => "1111110100011000", 
    21 => "1111110011010100", 22 => "1111101000000001", 23 => "1111010101011000", 
    24 => "1111100100001101", 25 => "0000010000000110", 26 => "1001011100000000", 
    27 => "0000000100101001", 28 => "1111110100010001", 29 => "1111001111000101", 
    30 => "0000010110100000", 31 => "1111110100011001", 32 => "0100011000100111", 
    33 => "1111101001111011", 34 => "0000011000100010", 35 => "0001001001100010", 
    36 => "1111101000101010", 37 => "1111110010010011", 38 => "0000011001011011", 
    39 => "0000000001101101", 40 => "1111110100110010", 41 => "0000010000110100", 
    42 => "0000001101010111", 43 => "1111110111111001", 44 => "0000010010101101", 
    45 => "0000100001111111", 46 => "1111110011000010", 47 => "1111110010010001", 
    48 => "0000110000000001", 49 => "1111011101111101", 50 => "0000100001111011", 
    51 => "0000010001010110", 52 => "1111110101011100", 53 => "1111000111110011", 
    54 => "0000110010101110", 55 => "0000010111111001", 56 => "0000010010111000", 
    57 => "1111111011010101", 58 => "1111010110111011", 59 => "0000000001110010", 
    60 => "1111101110111100", 61 => "0000000000111011", 62 => "0000010101001011", 
    63 => "0000010000110100", 64 => "0000011010100100", 65 => "0000000000101010", 
    66 => "1111101100111001", 67 => "1111110110100100", 68 => "1111111101110010", 
    69 => "1111101100111001", 70 => "0000011000100101", 71 => "0000000101011011", 
    72 => "0000100101100100", 73 => "1111100110011111", 74 => "0000011010110111", 
    75 => "0000011011110000", 76 => "0000001001000010", 77 => "0000000111101000", 
    78 => "1111011100011001", 79 => "1111110011111100", 80 => "1111100110111111", 
    81 => "0000010110101100", 82 => "0000001000110101", 83 => "0000000010101110", 
    84 => "0000000000101001", 85 => "1111110100101101", 86 => "1111110010101011", 
    87 => "1111110100000011", 88 => "1111110011100010", 89 => "1111111010010011", 
    90 => "1111011010010001", 91 => "0000110101001110", 92 => "1111011001011001", 
    93 => "1111110111110111", 94 => "0001000000100100", 95 => "0000110011100001", 
    96 => "1111110011010111", 97 => "1111110010010101", 98 => "0000000001111101", 
    99 => "0000101110101100", 100 => "0000100110000011", 101 => "0000001011011110", 
    102 => "1111110000010100", 103 => "1111010001110011", 104 => "0000001010101100", 
    105 => "0000001101011100", 106 => "0000001001001000", 107 => "0000000001001010", 
    108 => "0000000110001010", 109 => "0000000011100001", 110 => "0000000000101100", 
    111 => "0000101011111000", 112 => "0000001000111001", 113 => "1111111110000110", 
    114 => "0000001101010010", 115 => "0000011000011001", 116 => "1111111110111101", 
    117 => "0000100010001101", 118 => "0000001111011011", 119 => "1111011011010001", 
    120 => "1111101110100001", 121 => "0000010101011100", 122 => "0000001100001101", 
    123 => "0000000100011101", 124 => "0000001101010111", 125 => "1111101100000100", 
    126 => "0000000100110001", 127 => "0000000001011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActWhU is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActWhU is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActWhU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActWhU_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActWhU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


