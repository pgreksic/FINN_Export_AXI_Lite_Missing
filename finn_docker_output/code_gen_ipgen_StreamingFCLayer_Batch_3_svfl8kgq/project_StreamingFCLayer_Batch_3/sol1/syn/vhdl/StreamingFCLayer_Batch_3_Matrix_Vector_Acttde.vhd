-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Acttde_rom is 
    generic(
             DWIDTH     : integer := 15; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_Acttde_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000000101101101", 1 => "111011100000001", 2 => "000001010000001", 
    3 => "000011000001100", 4 => "000011000100100", 5 => "000010101011010", 
    6 => "000001111000101", 7 => "111101010010010", 8 => "111111100110001", 
    9 => "000000011100010", 10 => "000100001100100", 11 => "000011110110010", 
    12 => "101000111000011", 13 => "100000001100010", 14 => "000000110010100", 
    15 => "000000101011100", 16 => "111111101001001", 17 => "010100101000101", 
    18 => "111100100101010", 19 => "000100011100011", 20 => "111101110001001", 
    21 => "111011100101000", 22 => "111110100101101", 23 => "101010010000001", 
    24 => "000000000010101", 25 => "000010000000111", 26 => "000000001100001", 
    27 => "111110101001101", 28 => "111101011100000", 29 => "111110011001100", 
    30 => "111110001000011", 31 => "111101101000011", 32 => "000001011110101", 
    33 => "000000010111101", 34 => "000001011111110", 35 => "111111101110101", 
    36 => "000101011100001", 37 => "000011010110010", 38 => "111111011111100", 
    39 => "000000001100100", 40 => "111111001111100", 41 => "000000000101000", 
    42 => "000001011010000", 43 => "111111100111110", 44 => "000001001111011", 
    45 => "000001001000100", 46 => "111111111001001", 47 => "111111110100100", 
    48 => "111101101100111", 49 => "111101111111100", 50 => "111010000000111", 
    51 => "111011111101011", 52 => "000000101110000", 53 => "000010011110111", 
    54 => "111011010011110", 55 => "000010010011101", 56 => "000000110110111", 
    57 => "000010111010000", 58 => "111011010001101", 59 => "001000001000100", 
    60 => "111101001000000", 61 => "111110101101101", 62 => "000010001110110", 
    63 => "111110001010110", 64 => "000100000111000", 65 => "000010000000000", 
    66 => "000000100111001", 67 => "000101010111011", 68 => "001001001111100", 
    69 => "000010010011000", 70 => "111111001001010", 71 => "111010101001011", 
    72 => "110011001101010", 73 => "111101001001011", 74 => "000001001100010", 
    75 => "000010011001000", 76 => "111101001100000", 77 => "001001010010111", 
    78 => "110110110011101", 79 => "111111001110001", 80 => "111100100111010", 
    81 => "111111011010110", 82 => "000010111001110", 83 => "000000011101110", 
    84 => "110000011100000", 85 => "111101111001000", 86 => "000010000110110", 
    87 => "000001111001110", 88 => "000001000000100", 89 => "000110110000000", 
    90 => "111110111000110", 91 => "000000101001100", 92 => "111011110100101", 
    93 => "000001101000010", 94 => "000100000100111", 95 => "000011011100010", 
    96 => "111111010001101", 97 => "111000011000001", 98 => "111101000100001", 
    99 => "111110011001010", 100 => "000001101011000", 101 => "000001111011101", 
    102 => "000001100110101", 103 => "111011001111110", 104 => "111110101110000", 
    105 => "111110011010000", 106 => "111111100111000", 107 => "000010011111110", 
    108 => "111111010001001", 109 => "111001011011101", 110 => "111110010010111", 
    111 => "111101111100101", 112 => "111110111010001", 113 => "111110000001001", 
    114 => "111111000010000", 115 => "111100000101110", 116 => "110101000100100", 
    117 => "000000011101100", 118 => "111101110111100", 119 => "000000101101010", 
    120 => "111101110100100", 121 => "111110111000110", 122 => "111101101010111", 
    123 => "111111100000001", 124 => "000101001000010", 125 => "111101111010101", 
    126 => "111111001001011", 127 => "000001000010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Acttde is
    generic (
        DataWidth : INTEGER := 15;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_Acttde is
    component StreamingFCLayer_Batch_3_Matrix_Vector_Acttde_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_Acttde_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_Acttde_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


