-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActXh4_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActXh4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111011000000", 1 => "1111111100011100", 2 => "1111110101000011", 
    3 => "0000111101011111", 4 => "1111111101011001", 5 => "0000001000011111", 
    6 => "1111100011101110", 7 => "0000011011110001", 8 => "0000000000010011", 
    9 => "0000110111000011", 10 => "0000110111011001", 11 => "0000001101111010", 
    12 => "1111111100101011", 13 => "1111110100001000", 14 => "0000010100101010", 
    15 => "1111111000011111", 16 => "0000110000101010", 17 => "0000001111000010", 
    18 => "1111111100100010", 19 => "0000100111011010", 20 => "1111110100100100", 
    21 => "1111110011111101", 22 => "1111101000001100", 23 => "1111010101110110", 
    24 => "1111100100100111", 25 => "0000010000001011", 26 => "1001011100000000", 
    27 => "0000000100110100", 28 => "1111110100011001", 29 => "1111010000000010", 
    30 => "0000010110100111", 31 => "1111110100011111", 32 => "0100011111111110", 
    33 => "1111101010000011", 34 => "0000011000101001", 35 => "0001001010100011", 
    36 => "1111101000110001", 37 => "1111110010101001", 38 => "0000011010000000", 
    39 => "0000000001110101", 40 => "1111110100111011", 41 => "0000010001010100", 
    42 => "0000001101100001", 43 => "1111111000001100", 44 => "0000010010111000", 
    45 => "0000100010011101", 46 => "1111110011001011", 47 => "1111110010011100", 
    48 => "0000110000110110", 49 => "1111011110010011", 50 => "0000100010011001", 
    51 => "0000010001011110", 52 => "1111110101100111", 53 => "1111001000010000", 
    54 => "0000110011111111", 55 => "0000011000000011", 56 => "0000010011010110", 
    57 => "1111111011100001", 58 => "1111011000001111", 59 => "0000000001111100", 
    60 => "1111101111000101", 61 => "0000000001000110", 62 => "0000010101010100", 
    63 => "0000010000111010", 64 => "0000011011000100", 65 => "0000000000110000", 
    66 => "1111101101001101", 67 => "1111110110101100", 68 => "1111111101111010", 
    69 => "1111101101000001", 70 => "0000011010000011", 71 => "0000000101100010", 
    72 => "0000100101111111", 73 => "1111100110111000", 74 => "0000011011110100", 
    75 => "0000011100001101", 76 => "0000001001001010", 77 => "0000001000010001", 
    78 => "1111011100101111", 79 => "1111110100000101", 80 => "1111101000001010", 
    81 => "0000010110110011", 82 => "0000001000111101", 83 => "0000000011000011", 
    84 => "0000000000110001", 85 => "1111110100111110", 86 => "1111110010111000", 
    87 => "1111110100000110", 88 => "1111110011101000", 89 => "1111111010011011", 
    90 => "1111011010101000", 91 => "0000110101110101", 92 => "1111011010001110", 
    93 => "1111111000000011", 94 => "0001000100110101", 95 => "0000110100110110", 
    96 => "1111110011011111", 97 => "1111110010011100", 98 => "0000000010000100", 
    99 => "0000110001101111", 100 => "0000100110011001", 101 => "0000001011101001", 
    102 => "1111110000011111", 103 => "1111010010011100", 104 => "0000001010110110", 
    105 => "0000001101100101", 106 => "0000001001001101", 107 => "0000000001011011", 
    108 => "0000000110010001", 109 => "0000000011111011", 110 => "0000000000110011", 
    111 => "0000101100100100", 112 => "0000001000111110", 113 => "1111111110011011", 
    114 => "0000001101101000", 115 => "0000011000011111", 116 => "1111111111000011", 
    117 => "0000100100010010", 118 => "0000001111100011", 119 => "1111011011011001", 
    120 => "1111101110100110", 121 => "0000010101100010", 122 => "0000001100011110", 
    123 => "0000000100100101", 124 => "0000001101011110", 125 => "1111101100010001", 
    126 => "0000000100110110", 127 => "0000000001101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActXh4 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActXh4 is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActXh4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActXh4_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActXh4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


