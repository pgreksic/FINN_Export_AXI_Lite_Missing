-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActMgi_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActMgi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101001011000", 1 => "0000010001001100", 2 => "1111011111011010", 
    3 => "1111111001110101", 4 => "0000000010001111", 5 => "0000000101111000", 
    6 => "0000100101111000", 7 => "0000000010110000", 8 => "1111100100110101", 
    9 => "0000001110110010", 10 => "1111111111000010", 11 => "0100000100110011", 
    12 => "0000100110001100", 13 => "1111101001001000", 14 => "1111011101100010", 
    15 => "0000010001110001", 16 => "1111100011111010", 17 => "1111110011101001", 
    18 => "0000001101100000", 19 => "0000010110010011", 20 => "1111111110001010", 
    21 => "0000000001011000", 22 => "1111111000001101", 23 => "1111101100000001", 
    24 => "0000011100111000", 25 => "0000000000100001", 26 => "0000010111000000", 
    27 => "1111101111001101", 28 => "1111111010000001", 29 => "0000000101110111", 
    30 => "1111111000001001", 31 => "1111110001111110", 32 => "0000011011101101", 
    33 => "1111110001110000", 34 => "0000000111000011", 35 => "0000101010110010", 
    36 => "0000000110000111", 37 => "0000001110111100", 38 => "1111101110111101", 
    39 => "1111011010110011", 40 => "1111101100010001", 41 => "0000100110011100", 
    42 => "1010011110001011", 43 => "0000000111000110", 44 => "1111000011111001", 
    45 => "1111111001101110", 46 => "1111111011011111", 47 => "0000011010110001", 
    48 => "1111101100110111", 49 => "1110010101100110", 50 => "1111010111000101", 
    51 => "0000000111100001", 52 => "1111111001101110", 53 => "1011110100110111", 
    54 => "1110110101111110", 55 => "0000001101100110", 56 => "1111011110000110", 
    57 => "1111111100001000", 58 => "0000000011110101", 59 => "0000001010011111", 
    60 => "0000001110100010", 61 => "1111111111001010", 62 => "1111100010101111", 
    63 => "0000001001100011", 64 => "0000010001001101", 65 => "0000011000000110", 
    66 => "0110001011000001", 67 => "0000000101101111", 68 => "0000010110110010", 
    69 => "1111101111100000", 70 => "1111110010110000", 71 => "0000000101100010", 
    72 => "1111011011001010", 73 => "0000000011000100", 74 => "1010101000000100", 
    75 => "1111111111111011", 76 => "1111110010011001", 77 => "1111111111111011", 
    78 => "1111011001110100", 79 => "0000000110011101", 80 => "0000001111001001", 
    81 => "0000011111111011", 82 => "0000000010110100", 83 => "0000000100001110", 
    84 => "1001011100000000", 85 => "0000110000100000", 86 => "0000000011011001", 
    87 => "0000000001010001", 88 => "1111110100110110", 89 => "0010010100110101", 
    90 => "1111111110101011", 91 => "1111110000010110", 92 => "1111111101101001", 
    93 => "1111110010110101", 94 => "0000000111101101", 95 => "1111111111000100", 
    96 => "1111111101000110", 97 => "0000100111011001", 98 => "0000000100011010", 
    99 => "1111111001010011", 100 => "0000010001000000", 101 => "1111111111101010", 
    102 => "1111101011011011", 103 => "1111110000111110", 104 => "0000000000110010", 
    105 => "0000010001010000", 106 => "1110010111010001", 107 => "0000000101100110", 
    108 => "0000001011110010", 109 => "0000101000101101", 110 => "0000000100111100", 
    111 => "1110111100000100", 112 => "0000001111011101", 113 => "1111111110001010", 
    114 => "1111100010000001", 115 => "0000010000010001", 116 => "1111111110101011", 
    117 => "0000000011100100", 118 => "1111101111010100", 119 => "0000000100101110", 
    120 => "0000000010001010", 121 => "1111010110100000", 122 => "0001100010010110", 
    123 => "1111101011110001", 124 => "1111111101011110", 125 => "0000011101110101", 
    126 => "0000101110110011", 127 => "0000010101011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActMgi is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActMgi is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActMgi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActMgi_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActMgi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


