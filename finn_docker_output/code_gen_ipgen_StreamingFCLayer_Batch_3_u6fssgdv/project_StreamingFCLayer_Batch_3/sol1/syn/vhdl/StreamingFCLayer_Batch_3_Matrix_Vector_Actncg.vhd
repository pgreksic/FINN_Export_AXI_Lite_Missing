-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Actncg_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_Actncg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000101011000111", 1 => "0000010110111000", 2 => "1111110101100000", 
    3 => "1111101110101100", 4 => "1111101010100111", 5 => "0000000101110111", 
    6 => "0000001011110010", 7 => "1111110000010001", 8 => "1111011011001001", 
    9 => "1111010101110111", 10 => "0000000011101101", 11 => "0000110100001010", 
    12 => "1111101111101000", 13 => "0000011001101110", 14 => "1110011001100110", 
    15 => "0000011111110111", 16 => "0000000011101101", 17 => "1111110100101110", 
    18 => "0000111011000110", 19 => "1111110011101011", 20 => "0000000010100010", 
    21 => "0000001001001110", 22 => "0000010100001010", 23 => "0000101010110110", 
    24 => "0000011001101110", 25 => "1111110000111001", 26 => "1111111000101100", 
    27 => "1111101011001010", 28 => "1111001110111111", 29 => "0000000010111110", 
    30 => "0000000010100001", 31 => "1111100011111111", 32 => "0000001110000011", 
    33 => "1111110011111111", 34 => "0000010100110001", 35 => "0000010000100010", 
    36 => "0000000011111111", 37 => "0000100101011111", 38 => "0001001101001010", 
    39 => "1111110011010101", 40 => "1111110000110000", 41 => "1111110111100001", 
    42 => "1111101011000010", 43 => "0000110010110111", 44 => "1111111000000101", 
    45 => "0000010010000010", 46 => "0000001000011101", 47 => "1111110100010001", 
    48 => "1111110110010001", 49 => "0000010111101011", 50 => "0000010101010101", 
    51 => "1111111001100111", 52 => "1111111101000010", 53 => "1111110000110110", 
    54 => "0000000111110000", 55 => "1111101011010110", 56 => "0000000001010001", 
    57 => "1111111011000000", 58 => "1111110100101111", 59 => "1111111010101101", 
    60 => "1111100011000001", 61 => "0000001000100101", 62 => "0000000111110000", 
    63 => "0000000011001101", 64 => "1111101000101011", 65 => "1111010100100000", 
    66 => "0000000111111011", 67 => "0000001011011101", 68 => "0001011111010000", 
    69 => "1111111110010011", 70 => "1111110100010010", 71 => "1111111111000011", 
    72 => "0000011000000001", 73 => "1111000111110011", 74 => "0000010110001111", 
    75 => "0000001011111001", 76 => "1111111010100001", 77 => "0000101111010110", 
    78 => "0000001100000001", 79 => "1111100001011000", 80 => "1111011111100100", 
    81 => "1111011100001010", 82 => "0000011001100101", 83 => "1111101101001001", 
    84 => "1111110110010111", 85 => "1111110000000111", 86 => "0000100001110000", 
    87 => "0000001011100110", 88 => "1111110010001101", 89 => "0001111000010011", 
    90 => "1111111111101011", 91 => "0000000100111110", 92 => "1111000111110011", 
    93 => "1111110100111010", 94 => "1111010010101110", 95 => "0000001010101011", 
    96 => "1111100111111100", 97 => "0000011101010000", 98 => "1111110101010101", 
    99 => "0000110110110110", 100 => "1111111010100011", 101 => "0000110111001011", 
    102 => "0000011011000010", 103 => "0000000111110100", 104 => "1111110101111000", 
    105 => "0000000111110111", 106 => "0000001111010010", 107 => "1111111001000011", 
    108 => "0000000010100111", 109 => "0000101111000100", 110 => "0000000001001001", 
    111 => "0000110111011100", 112 => "1111110111010010", 113 => "0000010011110011", 
    114 => "1111110110101100", 115 => "1111100110001110", 116 => "0001000111100100", 
    117 => "0110100100000001", 118 => "0000000111101000", 119 => "1111101110001101", 
    120 => "1111100011110000", 121 => "1111111001000000", 122 => "0000100101100011", 
    123 => "1111111111101001", 124 => "0000000001111101", 125 => "0000001111010010", 
    126 => "1111110110000111", 127 => "0000111101101000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Actncg is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_Actncg is
    component StreamingFCLayer_Batch_3_Matrix_Vector_Actncg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_Actncg_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_Actncg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


