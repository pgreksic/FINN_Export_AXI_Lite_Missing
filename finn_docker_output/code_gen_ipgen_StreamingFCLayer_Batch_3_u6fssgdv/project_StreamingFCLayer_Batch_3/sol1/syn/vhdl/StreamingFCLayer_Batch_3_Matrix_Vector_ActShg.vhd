-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActShg_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActShg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111010010011", 1 => "1111111011101001", 2 => "1111110100100100", 
    3 => "0000111010000010", 4 => "1111111100101000", 5 => "0000000111101100", 
    6 => "1111100000111100", 7 => "0000011011001000", 8 => "1111111111011000", 
    9 => "0000110100000100", 10 => "0000101101111110", 11 => "0000001101011011", 
    12 => "1111111100000011", 13 => "1111110011100000", 14 => "0000010100000111", 
    15 => "1111110111110110", 16 => "0000101000000100", 17 => "0000001110010111", 
    18 => "1111111100001111", 19 => "0000100101001101", 20 => "1111110011100100", 
    21 => "1111110000101110", 22 => "1111100111010111", 23 => "1111010011100010", 
    24 => "1111100010100100", 25 => "0000001111101111", 26 => "1001011100000000", 
    27 => "0000000011111101", 28 => "1111110011110010", 29 => "1111001011010010", 
    30 => "0000010110000110", 31 => "1111110100000001", 32 => "0011111011001101", 
    33 => "1111101001011011", 34 => "0000011000000100", 35 => "0001000101100000", 
    36 => "1111101000001110", 37 => "1111110000111100", 38 => "0000010111000101", 
    39 => "0000000001001101", 40 => "1111110100001111", 41 => "0000001110110111", 
    42 => "0000001100101110", 43 => "1111110110101100", 44 => "0000010010000011", 
    45 => "0000100000001011", 46 => "1111110010100000", 47 => "1111110001100111", 
    48 => "0000101100101101", 49 => "1111011100100001", 50 => "0000100000000100", 
    51 => "0000010000110110", 52 => "1111110100110000", 53 => "1111000110000010", 
    54 => "0000101101101011", 55 => "0000010111001110", 56 => "0000010000111111", 
    57 => "1111111010100101", 58 => "1111010001101001", 59 => "0000000001001010", 
    60 => "1111101110011011", 61 => "0000000000010000", 62 => "0000010100101000", 
    63 => "0000010000011101", 64 => "0000011000100001", 65 => "0000000000010100", 
    66 => "1111101011101010", 67 => "1111110110000011", 68 => "1111111101010101", 
    69 => "1111101100011001", 70 => "0000010010110001", 71 => "0000000100111111", 
    72 => "0000100011111000", 73 => "1111100100111010", 74 => "0000010111000011", 
    75 => "0000011001111010", 76 => "0000001000100100", 77 => "0000000101000101", 
    78 => "1111011011000010", 79 => "1111110011011001", 80 => "1111100010010010", 
    81 => "0000010110001101", 82 => "0000001000010010", 83 => "0000000001011100", 
    84 => "0000000000001000", 85 => "1111110011101011", 86 => "1111110001110111", 
    87 => "1111110011110011", 88 => "1111110011001101", 89 => "1111111001110000", 
    90 => "1111011000110101", 91 => "0000110010110001", 92 => "1111010110000011", 
    93 => "1111110111001011", 94 => "0000101111100001", 95 => "0000101110001100", 
    96 => "1111110010110110", 97 => "1111110001111000", 98 => "0000000001100011", 
    99 => "0000100010100001", 100 => "0000100100101100", 101 => "0000001010110000", 
    102 => "1111101111101000", 103 => "1111001111010010", 104 => "0000001010000100", 
    105 => "0000001100110111", 106 => "0000001000110010", 107 => "0000000000000100", 
    108 => "0000000101101100", 109 => "0000000001111010", 110 => "0000000000010000", 
    111 => "0000101001000111", 112 => "0000001000100110", 113 => "1111111100110011", 
    114 => "0000001011111100", 115 => "0000011000000011", 116 => "1111111110100010", 
    117 => "0000011001111011", 118 => "0000001110111100", 119 => "1111011010110100", 
    120 => "1111101110001011", 121 => "0000010101000101", 122 => "0000001011001001", 
    123 => "0000000011111110", 124 => "0000001100111101", 125 => "1111101011010001", 
    126 => "0000000100011011", 127 => "0000000000001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActShg is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActShg is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActShg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActShg_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActShg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


