-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActThq_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActThq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111010011100", 1 => "1111111011110011", 2 => "1111110100101010", 
    3 => "0000111010101110", 4 => "1111111100110010", 5 => "0000000111110110", 
    6 => "1111100001100000", 7 => "0000011011010000", 8 => "1111111111100100", 
    9 => "0000110100101010", 10 => "0000101111110111", 11 => "0000001101100001", 
    12 => "1111111100001011", 13 => "1111110011101000", 14 => "0000010100001110", 
    15 => "1111110111111110", 16 => "0000101001110010", 17 => "0000001110100000", 
    18 => "1111111100010011", 19 => "0000100101101001", 20 => "1111110011110001", 
    21 => "1111110001011000", 22 => "1111100111100010", 23 => "1111010011111111", 
    24 => "1111100010111111", 25 => "0000001111110101", 26 => "1001011100000000", 
    27 => "0000000100001000", 28 => "1111110011111010", 29 => "1111001100001111", 
    30 => "0000010110001101", 31 => "1111110100000111", 32 => "0100000010100100", 
    33 => "1111101001100011", 34 => "0000011000001100", 35 => "0001000110100000", 
    36 => "1111101000010101", 37 => "1111110001010010", 38 => "0000010111101011", 
    39 => "0000000001010101", 40 => "1111110100010111", 41 => "0000001111010110", 
    42 => "0000001100111000", 43 => "1111110110111111", 44 => "0000010010001110", 
    45 => "0000100000101000", 46 => "1111110010101000", 47 => "1111110001110010", 
    48 => "0000101101100010", 49 => "1111011100111000", 50 => "0000100000100001", 
    51 => "0000010000111110", 52 => "1111110100111011", 53 => "1111000110011110", 
    54 => "0000101110111100", 55 => "0000010111011001", 56 => "0000010001011101", 
    57 => "1111111010110001", 58 => "1111010010111110", 59 => "0000000001010100", 
    60 => "1111101110100100", 61 => "0000000000011011", 62 => "0000010100110001", 
    63 => "0000010000100011", 64 => "0000011001000010", 65 => "0000000000011010", 
    66 => "1111101011111110", 67 => "1111110110001011", 68 => "1111111101011100", 
    69 => "1111101100100001", 70 => "0000010100001110", 71 => "0000000101000110", 
    72 => "0000100100010011", 73 => "1111100101010100", 74 => "0000011000000000", 
    75 => "0000011010010111", 76 => "0000001000101100", 77 => "0000000101101110", 
    78 => "1111011011010111", 79 => "1111110011100010", 80 => "1111100011011101", 
    81 => "0000010110010101", 82 => "0000001000011011", 83 => "0000000001110000", 
    84 => "0000000000010001", 85 => "1111110011111011", 86 => "1111110010000100", 
    87 => "1111110011110111", 88 => "1111110011010010", 89 => "1111111001111000", 
    90 => "1111011001001100", 91 => "0000110011011000", 92 => "1111010110111000", 
    93 => "1111110111010110", 94 => "0000110011110010", 95 => "0000101111100010", 
    96 => "1111110010111111", 97 => "1111110001111111", 98 => "0000000001101001", 
    99 => "0000100101100100", 100 => "0000100101000010", 101 => "0000001010111011", 
    102 => "1111101111110011", 103 => "1111001111111011", 104 => "0000001010001110", 
    105 => "0000001101000000", 106 => "0000001000111000", 107 => "0000000000010101", 
    108 => "0000000101110011", 109 => "0000000010010100", 110 => "0000000000010111", 
    111 => "0000101001110011", 112 => "0000001000101011", 113 => "1111111101001000", 
    114 => "0000001100010001", 115 => "0000011000001001", 116 => "1111111110101001", 
    117 => "0000011011111111", 118 => "0000001111000100", 119 => "1111011010111011", 
    120 => "1111101110010001", 121 => "0000010101001011", 122 => "0000001011011010", 
    123 => "0000000100000110", 124 => "0000001101000100", 125 => "1111101011011110", 
    126 => "0000000100100001", 127 => "0000000000011110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActThq is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActThq is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActThq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActThq_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActThq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


