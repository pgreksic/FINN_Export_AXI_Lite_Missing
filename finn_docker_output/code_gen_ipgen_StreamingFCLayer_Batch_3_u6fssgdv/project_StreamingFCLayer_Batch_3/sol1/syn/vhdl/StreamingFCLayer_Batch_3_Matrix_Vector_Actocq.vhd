-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Actocq_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_Actocq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000101100010110", 1 => "0000010111000000", 2 => "1111110101101001", 
    3 => "1111101110110101", 4 => "1111101010110000", 5 => "0000000101111110", 
    6 => "0000001011111011", 7 => "1111110000011001", 8 => "1111011011100001", 
    9 => "1111010111000101", 10 => "0000000011110110", 11 => "0000110100100000", 
    12 => "1111101111101100", 13 => "0000011001110111", 14 => "1110011100001011", 
    15 => "0000100000010000", 16 => "0000000011110100", 17 => "1111110100111001", 
    18 => "0000111100110100", 19 => "1111110011110100", 20 => "0000000010101101", 
    21 => "0000001001010101", 22 => "0000010100010110", 23 => "0000101011000001", 
    24 => "0000011010010001", 25 => "1111110001000001", 26 => "1111111000110100", 
    27 => "1111101011010010", 28 => "1111010001110011", 29 => "0000000011010000", 
    30 => "0000000010101001", 31 => "1111100100000111", 32 => "0000001110001011", 
    33 => "1111110100001001", 34 => "0000010101000110", 35 => "0000010000101010", 
    36 => "0000000100001001", 37 => "0000100110101110", 38 => "0001001110100011", 
    39 => "1111110011100000", 40 => "1111110000111100", 41 => "1111110111101011", 
    42 => "1111101011010001", 43 => "0000110011010111", 44 => "1111111000001111", 
    45 => "0000010010001111", 46 => "0000001000100101", 47 => "1111110100011010", 
    48 => "1111110110010110", 49 => "0000010111110011", 50 => "0000010101100010", 
    51 => "1111111001110001", 52 => "1111111101001011", 53 => "1111110001010101", 
    54 => "0000000111110111", 55 => "1111101011011110", 56 => "0000000001101000", 
    57 => "1111111011001011", 58 => "1111110100111001", 59 => "1111111010110110", 
    60 => "1111100011011000", 61 => "0000001000101110", 62 => "0000000111111000", 
    63 => "0000000011010110", 64 => "1111101000110101", 65 => "1111010100110100", 
    66 => "0000001000000010", 67 => "0000001011100101", 68 => "0001100010111010", 
    69 => "1111111110011100", 70 => "1111110100011000", 71 => "1111111111001011", 
    72 => "0000011000001001", 73 => "1111001001011000", 74 => "0000010110011010", 
    75 => "0000001100000010", 76 => "1111111010101001", 77 => "0000101111101000", 
    78 => "0000001100001010", 79 => "1111100001101111", 80 => "1111011111101101", 
    81 => "1111011100101111", 82 => "0000011001110000", 83 => "1111101101010011", 
    84 => "1111110110100000", 85 => "1111110000010001", 86 => "0000100010110110", 
    87 => "0000001011101011", 88 => "1111110010010010", 89 => "0001111011010001", 
    90 => "1111111111110101", 91 => "0000000101000111", 92 => "1111001100010111", 
    93 => "1111110101000001", 94 => "1111010110110100", 95 => "0000001010110101", 
    96 => "1111101000000100", 97 => "0000011101011011", 98 => "1111110101100000", 
    99 => "0000110111100010", 100 => "1111111010101101", 101 => "0000111000100110", 
    102 => "0000011011001010", 103 => "0000000111111101", 104 => "1111110110000111", 
    105 => "0000001000000001", 106 => "0000001111011010", 107 => "1111111001010010", 
    108 => "0000000010110001", 109 => "0000110000000110", 110 => "0000000001010000", 
    111 => "0000110111111111", 112 => "1111110111011100", 113 => "0000010011111011", 
    114 => "1111110110110011", 115 => "1111100111001001", 116 => "0001001000101101", 
    117 => "0110100100000001", 118 => "0000001000000011", 119 => "1111101110111011", 
    120 => "1111100100010101", 121 => "1111111001000110", 122 => "0000100101101101", 
    123 => "1111111111110001", 124 => "0000000010000101", 125 => "0000001111100000", 
    126 => "1111110110001010", 127 => "0000111110111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Actocq is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_Actocq is
    component StreamingFCLayer_Batch_3_Matrix_Vector_Actocq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_Actocq_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_Actocq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


