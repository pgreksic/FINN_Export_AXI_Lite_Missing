-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActeOg_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActeOg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000100000000111", 1 => "0000010101101011", 2 => "1111110100010011", 
    3 => "1111101101010100", 4 => "1111101001010100", 5 => "0000000100111001", 
    6 => "0000001010100010", 7 => "1111101111000111", 8 => "1111010111101111", 
    9 => "1111001010110111", 10 => "0000000010100101", 11 => "0000110001001001", 
    12 => "1111101111000100", 13 => "0000011000011011", 14 => "1110000010011011", 
    15 => "0000011100010100", 16 => "0000000010110011", 17 => "1111110011010000", 
    18 => "0000101011101010", 19 => "1111110010100010", 20 => "0000000000111001", 
    21 => "0000001000001000", 22 => "0000010010100001", 23 => "0000101001011010", 
    24 => "0000010100110110", 25 => "1111101111110001", 26 => "1111110111100011", 
    27 => "1111101010000001", 28 => "1110110101100111", 29 => "0000000000011101", 
    30 => "0000000001011010", 31 => "1111100010111010", 32 => "0000001100111010", 
    33 => "1111110010100010", 34 => "0000010001110011", 35 => "0000001111100000", 
    36 => "0000000010101010", 37 => "0000011010010101", 38 => "0001000000101000", 
    39 => "1111110001110101", 40 => "1111101111000111", 41 => "1111110101111111", 
    42 => "1111101001000000", 43 => "0000101110011100", 44 => "1111110110110000", 
    45 => "0000010000000111", 46 => "0000000111010110", 47 => "1111110011000001", 
    48 => "1111110101100101", 49 => "0000010110100100", 50 => "0000010011011110", 
    51 => "1111111000000101", 52 => "1111111011110100", 53 => "1111101100011110", 
    54 => "0000000110110010", 55 => "1111101010001111", 56 => "1111111110000010", 
    57 => "1111111001011110", 58 => "1111110011001111", 59 => "1111111001011100", 
    60 => "1111011111101100", 61 => "0000000111001100", 62 => "0000000110110000", 
    63 => "0000000001110110", 64 => "1111100111010010", 65 => "1111010001110010", 
    66 => "0000000111000100", 67 => "0000001010011011", 68 => "0000111110010110", 
    69 => "1111111100111011", 70 => "1111110011010111", 71 => "1111111101111001", 
    72 => "0000010110110111", 73 => "1110111001101100", 74 => "0000010100110001", 
    75 => "0000001010101100", 76 => "1111111001011001", 77 => "0000101100110010", 
    78 => "0000001010101010", 79 => "1111011110001101", 80 => "1111011110010100", 
    81 => "1111010110111100", 82 => "0000011000000001", 83 => "1111101011101111", 
    84 => "1111110101001001", 85 => "1111101110101101", 86 => "0000010111111100", 
    87 => "0000001010111101", 88 => "1111110001100000", 89 => "0001011101100111", 
    90 => "1111111110010000", 91 => "0000000011110011", 92 => "1110011110101011", 
    93 => "1111110011111111", 94 => "1110101101110100", 95 => "0000001001001101", 
    96 => "1111100110101101", 97 => "0000011011101101", 98 => "1111110011101111", 
    99 => "0000110000101100", 100 => "1111111001001010", 101 => "0000101010010110", 
    102 => "0000011010000010", 103 => "0000000110011111", 104 => "1111110011101110", 
    105 => "0000000110100100", 106 => "0000001110000111", 107 => "1111110110111000", 
    108 => "0000000001001000", 109 => "0000100101110000", 110 => "0000000000000110", 
    111 => "0000110010100000", 112 => "1111110101111110", 113 => "0000010010101000", 
    114 => "1111110101101100", 115 => "1111011101111101", 116 => "0000111101010100", 
    117 => "0100011100011111", 118 => "0000000011110011", 119 => "1111100111110101", 
    120 => "1111011110101011", 121 => "1111111000001100", 122 => "0000100100000110", 
    123 => "1111111110100010", 124 => "0000000000110010", 125 => "0000001101010001", 
    126 => "1111110101101101", 127 => "0000110010001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActeOg is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActeOg is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActeOg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActeOg_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActeOg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


