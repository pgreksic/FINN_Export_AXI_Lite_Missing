-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActUhA_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActUhA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111010100101", 1 => "1111111011111101", 2 => "1111110100110000", 
    3 => "0000111011011010", 4 => "1111111100111100", 5 => "0000001000000001", 
    6 => "1111100010000011", 7 => "0000011011011001", 8 => "1111111111101111", 
    9 => "0000110101010000", 10 => "0000110001101111", 11 => "0000001101100111", 
    12 => "1111111100010011", 13 => "1111110011110000", 14 => "0000010100010101", 
    15 => "1111111000000110", 16 => "0000101011100000", 17 => "0000001110101000", 
    18 => "1111111100010111", 19 => "0000100110000101", 20 => "1111110011111110", 
    21 => "1111110010000001", 22 => "1111100111101100", 23 => "1111010100011101", 
    24 => "1111100011011001", 25 => "0000001111111010", 26 => "1001011100000000", 
    27 => "0000000100010011", 28 => "1111110100000010", 29 => "1111001101001100", 
    30 => "0000010110010011", 31 => "1111110100001101", 32 => "0100001001111010", 
    33 => "1111101001101011", 34 => "0000011000010011", 35 => "0001000111100001", 
    36 => "1111101000011100", 37 => "1111110001101000", 38 => "0000011000010000", 
    39 => "0000000001011101", 40 => "1111110100100000", 41 => "0000001111110110", 
    42 => "0000001101000011", 43 => "1111110111010010", 44 => "0000010010011000", 
    45 => "0000100001000101", 46 => "1111110010110001", 47 => "1111110001111100", 
    48 => "0000101110010111", 49 => "1111011101001111", 50 => "0000100000111111", 
    51 => "0000010001000110", 52 => "1111110101000110", 53 => "1111000110111010", 
    54 => "0000110000001101", 55 => "0000010111100011", 56 => "0000010001111011", 
    57 => "1111111010111101", 58 => "1111010100010010", 59 => "0000000001011110", 
    60 => "1111101110101100", 61 => "0000000000100110", 62 => "0000010100111001", 
    63 => "0000010000101000", 64 => "0000011001100010", 65 => "0000000000011111", 
    66 => "1111101100010001", 67 => "1111110110010100", 68 => "1111111101100011", 
    69 => "1111101100101001", 70 => "0000010101101011", 71 => "0000000101001101", 
    72 => "0000100100101110", 73 => "1111100101101101", 74 => "0000011000111101", 
    75 => "0000011010110101", 76 => "0000001000110011", 77 => "0000000110010110", 
    78 => "1111011011101101", 79 => "1111110011101011", 80 => "1111100100101000", 
    81 => "0000010110011100", 82 => "0000001000100011", 83 => "0000000010000101", 
    84 => "0000000000011001", 85 => "1111110100001100", 86 => "1111110010010001", 
    87 => "1111110011111011", 88 => "1111110011011000", 89 => "1111111010000001", 
    90 => "1111011001100011", 91 => "0000110011111111", 92 => "1111010111101110", 
    93 => "1111110111100001", 94 => "0000111000000011", 95 => "0000110000110111", 
    96 => "1111110011000111", 97 => "1111110010000111", 98 => "0000000001110000", 
    99 => "0000101000100110", 100 => "0000100101010111", 101 => "0000001011000111", 
    102 => "1111101111111110", 103 => "1111010000100011", 104 => "0000001010011000", 
    105 => "0000001101001001", 106 => "0000001000111101", 107 => "0000000000100111", 
    108 => "0000000101111011", 109 => "0000000010101110", 110 => "0000000000011110", 
    111 => "0000101010011111", 112 => "0000001000110000", 113 => "1111111101011101", 
    114 => "0000001100100111", 115 => "0000011000001110", 116 => "1111111110101111", 
    117 => "0000011110000100", 118 => "0000001111001100", 119 => "1111011011000011", 
    120 => "1111101110010110", 121 => "0000010101010000", 122 => "0000001011101011", 
    123 => "0000000100001110", 124 => "0000001101001010", 125 => "1111101011101010", 
    126 => "0000000100100110", 127 => "0000000000110001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActUhA is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActUhA is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActUhA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActUhA_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActUhA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


