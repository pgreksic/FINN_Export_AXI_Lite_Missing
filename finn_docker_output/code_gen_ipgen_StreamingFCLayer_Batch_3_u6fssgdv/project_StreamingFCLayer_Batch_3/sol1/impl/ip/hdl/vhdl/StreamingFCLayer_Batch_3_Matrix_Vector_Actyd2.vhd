-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Actyd2_rom is 
    generic(
             DWIDTH     : integer := 15; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_Actyd2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000000111110100", 1 => "111011110101101", 2 => "000001010101000", 
    3 => "000011110101101", 4 => "000011001010101", 5 => "000011000010111", 
    6 => "000010001010001", 7 => "111101010111000", 8 => "111111101011011", 
    9 => "000000100001110", 10 => "000100011111001", 11 => "000101000001011", 
    12 => "101011000000011", 13 => "100100000110011", 14 => "000000111101100", 
    15 => "000000110010110", 16 => "111111101101011", 17 => "010111010110001", 
    18 => "111100101001010", 19 => "000100111000100", 20 => "111101110110000", 
    21 => "111100000010001", 22 => "111110101111010", 23 => "101110010101110", 
    24 => "000000000110100", 25 => "000010001010001", 26 => "000000001111010", 
    27 => "111110110101111", 28 => "111101100000111", 29 => "111110011110001", 
    30 => "111110010011010", 31 => "111101101110011", 32 => "000001100010111", 
    33 => "000000011100010", 34 => "000001100010111", 35 => "111111110010111", 
    36 => "000110000000101", 37 => "000011110101001", 38 => "111111100101011", 
    39 => "000000010010000", 40 => "111111010011111", 41 => "000000001001011", 
    42 => "000001100001110", 43 => "111111101100001", 44 => "000001010101000", 
    45 => "000001001100101", 46 => "000000001010001", 47 => "111111111011010", 
    48 => "111101110010000", 49 => "111110000100001", 50 => "111010011011011", 
    51 => "111100010010010", 52 => "000000110111010", 53 => "000010100010110", 
    54 => "111011100000000", 55 => "000010011000111", 56 => "000000111100001", 
    57 => "000011000010101", 58 => "111100100110111", 59 => "001001010110000", 
    60 => "111101001101000", 61 => "111110110011111", 62 => "000010010011110", 
    63 => "111110010000010", 64 => "000110011101111", 65 => "000010000101010", 
    66 => "000000101100110", 67 => "000101100110110", 68 => "001100110000110", 
    69 => "000010010111110", 70 => "111111010000110", 71 => "111011000101110", 
    72 => "110101101111110", 73 => "111101001110110", 74 => "000001010001011", 
    75 => "000010011101001", 76 => "111101101010111", 77 => "001100000000110", 
    78 => "110111111010000", 79 => "111111010010001", 80 => "111100101011110", 
    81 => "111111011111101", 82 => "000011001011001", 83 => "000000100011100", 
    84 => "110100110111111", 85 => "111101111110110", 86 => "000010001100000", 
    87 => "000001111111000", 88 => "000001000101111", 89 => "000111000011101", 
    90 => "111110111101111", 91 => "000000101101100", 92 => "111011111010110", 
    93 => "000001101100100", 94 => "000100001011000", 95 => "000011100001000", 
    96 => "111111010110110", 97 => "111010111110101", 98 => "111101001001100", 
    99 => "111110011101111", 100 => "000001101111011", 101 => "000010000000111", 
    102 => "000001101001100", 103 => "111011101010111", 104 => "111110110110011", 
    105 => "111110011110110", 106 => "111111101101100", 107 => "000010100101111", 
    108 => "111111011000100", 109 => "111010000100001", 110 => "111110011011010", 
    111 => "111110000011111", 112 => "111111000000110", 113 => "111110001110010", 
    114 => "111111001000000", 115 => "111100010010011", 116 => "111001001110001", 
    117 => "000000100110110", 118 => "111101111101101", 119 => "000000110001101", 
    120 => "111101111001010", 121 => "111110111111011", 122 => "111101110000011", 
    123 => "111111100101010", 124 => "000101111111101", 125 => "111101111111100", 
    126 => "111111001101100", 127 => "000001000111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Actyd2 is
    generic (
        DataWidth : INTEGER := 15;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_Actyd2 is
    component StreamingFCLayer_Batch_3_Matrix_Vector_Actyd2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_Actyd2_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_Actyd2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


