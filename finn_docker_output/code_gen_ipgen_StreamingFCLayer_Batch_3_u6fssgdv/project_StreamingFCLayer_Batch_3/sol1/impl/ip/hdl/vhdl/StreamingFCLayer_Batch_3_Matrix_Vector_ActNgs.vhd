-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActNgs_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActNgs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101001011111", 1 => "0000010001010101", 2 => "1111011111100101", 
    3 => "1111111001111010", 4 => "0000000010010110", 5 => "0000000110000001", 
    6 => "0000100110101110", 7 => "0000000010111000", 8 => "1111100100111110", 
    9 => "0000001110111010", 10 => "1111111111000111", 11 => "0100010101110101", 
    12 => "0000100110101011", 13 => "1111101010111001", 14 => "1111011110001000", 
    15 => "0000010010010011", 16 => "1111100100011011", 17 => "1111110011101111", 
    18 => "0000001101111101", 19 => "0000010110011011", 20 => "1111111110011101", 
    21 => "0000000001100000", 22 => "1111111001000001", 23 => "1111101100001101", 
    24 => "0000011101010100", 25 => "0000000000101010", 26 => "0000010111001001", 
    27 => "1111101111011001", 28 => "1111111010001100", 29 => "0000000110000000", 
    30 => "1111111000010001", 31 => "1111110010000110", 32 => "0000011011111000", 
    33 => "1111110001110111", 34 => "0000000111001100", 35 => "0000101101000001", 
    36 => "0000000110010001", 37 => "0000001111000111", 38 => "1111101111000100", 
    39 => "1111011100101101", 40 => "1111101100011111", 41 => "0000100110111001", 
    42 => "1010100110011001", 43 => "0000000111001110", 44 => "1111001001000110", 
    45 => "1111111001111001", 46 => "1111111011101000", 47 => "0000011010111010", 
    48 => "1111101101001110", 49 => "1110011101111111", 50 => "1111010111100101", 
    51 => "0000000111101101", 52 => "1111111001110100", 53 => "1011111001100111", 
    54 => "1110111111110101", 55 => "0000001101101100", 56 => "1111011110100000", 
    57 => "1111111100001111", 58 => "0000000011111110", 59 => "0000001010100111", 
    60 => "0000001110101011", 61 => "1111111111010001", 62 => "1111100100111010", 
    63 => "0000001001101011", 64 => "0000010001010011", 65 => "0000011000100010", 
    66 => "0110010001111011", 67 => "0000000101111101", 68 => "0000010111000000", 
    69 => "1111101111101100", 70 => "1111110010111000", 71 => "0000000101101000", 
    72 => "1111011011100011", 73 => "0000000011001101", 74 => "1010101101001010", 
    75 => "0000000000000011", 76 => "1111110010100000", 77 => "0000000000000101", 
    78 => "1111011011001010", 79 => "0000000110101001", 80 => "0000001111010010", 
    81 => "0000100000010101", 82 => "0000000010111110", 83 => "0000000100010101", 
    84 => "1001011100000000", 85 => "0000110010010001", 86 => "0000000011100011", 
    87 => "0000000001011000", 88 => "1111110100111001", 89 => "0010011000101000", 
    90 => "1111111110110100", 91 => "1111110000011111", 92 => "1111111101110010", 
    93 => "1111110010111101", 94 => "0000000111111011", 95 => "1111111111001101", 
    96 => "1111111101001011", 97 => "0000100111110011", 98 => "0000000100100010", 
    99 => "1111111001011100", 100 => "0000010001001000", 101 => "1111111111110011", 
    102 => "1111101011100011", 103 => "1111110001010000", 104 => "0000000000111010", 
    105 => "0000010001011001", 106 => "1110011011000001", 107 => "0000000101101110", 
    108 => "0000001011111100", 109 => "0000101001101100", 110 => "0000000101000101", 
    111 => "1110111101011010", 112 => "0000001111100110", 113 => "1111111110010011", 
    114 => "1111100010011000", 115 => "0000010000011001", 116 => "1111111110110000", 
    117 => "0000000011101111", 118 => "1111101111011100", 119 => "0000000100111000", 
    120 => "0000000010001111", 121 => "1111010111001110", 122 => "0001100100000100", 
    123 => "1111101011111000", 124 => "1111111101110010", 125 => "0000011101111101", 
    126 => "0000101111010010", 127 => "0000010101100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActNgs is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActNgs is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActNgs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActNgs_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActNgs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


