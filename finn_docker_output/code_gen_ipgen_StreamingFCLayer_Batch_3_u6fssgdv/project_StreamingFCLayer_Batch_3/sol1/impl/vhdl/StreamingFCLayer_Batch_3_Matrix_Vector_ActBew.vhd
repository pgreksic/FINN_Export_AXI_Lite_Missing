-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActBew_rom is 
    generic(
             DWIDTH     : integer := 15; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActBew_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000001001000101", 1 => "111100000010100", 2 => "000001011000000", 
    3 => "000100010100111", 4 => "000011001110010", 5 => "000011010001001", 
    6 => "000010010100101", 7 => "111101011001111", 8 => "111111101110100", 
    9 => "000000100101000", 10 => "000100101010001", 11 => "000101101110011", 
    12 => "101100010010000", 13 => "100110011100100", 14 => "000001000100000", 
    15 => "000000110111000", 16 => "111111110000000", 17 => "011000111110010", 
    18 => "111100101011101", 19 => "000101001001010", 20 => "111101111001000", 
    21 => "111100010011101", 22 => "111110110100111", 23 => "110000110010111", 
    24 => "000000001000111", 25 => "000010001111101", 26 => "000000010001010", 
    27 => "111110111101011", 28 => "111101100011111", 29 => "111110100001000", 
    30 => "111110011001110", 31 => "111101110010000", 32 => "000001100101011", 
    33 => "000000011110111", 34 => "000001100100111", 35 => "111111110101011", 
    36 => "000110010110100", 37 => "000100000111110", 38 => "111111101001000", 
    39 => "000000010101011", 40 => "111111010110100", 41 => "000000001100001", 
    42 => "000001100110011", 43 => "111111101110101", 44 => "000001011000100", 
    45 => "000001001111000", 46 => "000000010100011", 47 => "111111111111011", 
    48 => "111101110101001", 49 => "111110000110110", 50 => "111010101011011", 
    51 => "111100011110101", 52 => "000000111100110", 53 => "000010100101001", 
    54 => "111011100111011", 55 => "000010011100000", 56 => "000000111111010", 
    57 => "000011000111110", 58 => "111101011010000", 59 => "001010000100101", 
    60 => "111101010000000", 61 => "111110110111101", 62 => "000010010110110", 
    63 => "111110010011101", 64 => "000111111000100", 65 => "000010001000011", 
    66 => "000000110000010", 67 => "000101101111111", 68 => "001110110111111", 
    69 => "000010011010101", 70 => "111111010101010", 71 => "111011010110110", 
    72 => "110111010001010", 73 => "111101010010000", 74 => "000001010100100", 
    75 => "000010011111100", 76 => "111101111101011", 77 => "001101101001001", 
    78 => "111000100100001", 79 => "111111010100101", 80 => "111100101110100", 
    81 => "111111100010100", 82 => "000011010101101", 83 => "000000100111000", 
    84 => "110111100010010", 85 => "111110000010001", 86 => "000010001111001", 
    87 => "000010000010010", 88 => "000001001001001", 89 => "000111001111011", 
    90 => "111111000001000", 91 => "000000110000000", 92 => "111011111110011", 
    93 => "000001101111000", 94 => "000100001110110", 95 => "000011100011111", 
    96 => "111111011001110", 97 => "111100100010101", 98 => "111101001100110", 
    99 => "111110100000101", 100 => "000001110010000", 101 => "000010000100000", 
    102 => "000001101011001", 103 => "111011111011010", 104 => "111110111011010", 
    105 => "111110100001101", 106 => "111111110001011", 107 => "000010101001101", 
    108 => "111111011100111", 109 => "111010011100100", 110 => "111110100000011", 
    111 => "111110001000001", 112 => "111111000100101", 113 => "111110010110001", 
    114 => "111111001011101", 115 => "111100011001111", 116 => "111011101101011", 
    117 => "000000101100001", 118 => "111110000001011", 119 => "000000110100010", 
    120 => "111101111100001", 121 => "111111000011011", 122 => "111101110011110", 
    123 => "111111101000011", 124 => "000110100000110", 125 => "111110000010100", 
    126 => "111111010000001", 127 => "000001001011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActBew is
    generic (
        DataWidth : INTEGER := 15;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActBew is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActBew_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActBew_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActBew_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


