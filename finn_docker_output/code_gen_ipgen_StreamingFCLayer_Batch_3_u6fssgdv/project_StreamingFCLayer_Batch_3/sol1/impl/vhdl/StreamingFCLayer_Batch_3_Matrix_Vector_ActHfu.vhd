-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActHfu_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActHfu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101000110010", 1 => "0000010000011100", 2 => "1111011110100010", 
    3 => "1111111001011001", 4 => "0000000001100111", 5 => "0000000101001111", 
    6 => "0000100001101001", 7 => "0000000010001000", 8 => "1111100100001010", 
    9 => "0000001110001011", 10 => "1111111110101000", 11 => "0010101111100111", 
    12 => "0000100011110001", 13 => "1111100000010011", 14 => "1111011010100100", 
    15 => "0000001111000100", 16 => "1111100001010101", 17 => "1111110011001001", 
    18 => "0000001011001110", 19 => "0000010101101111", 20 => "1111111100101100", 
    21 => "0000000000110010", 22 => "1111110100001001", 23 => "1111101011000111", 
    24 => "0000011010101001", 25 => "1111111111110100", 26 => "0000010110010011", 
    27 => "1111101110010001", 28 => "1111111001001110", 29 => "0000000101001011", 
    30 => "1111110111100001", 31 => "1111110001010111", 32 => "0000011010111010", 
    33 => "1111110001001110", 34 => "0000000110011000", 35 => "0000011111100111", 
    36 => "0000000101010110", 37 => "0000001110000010", 38 => "1111101110011000", 
    39 => "1111010001010110", 40 => "1111101011001000", 41 => "0000100100001000", 
    42 => "1001110101000010", 43 => "0000000110011011", 44 => "1110101001111000", 
    45 => "1111111000111011", 46 => "1111111010110100", 47 => "0000011010000101", 
    48 => "1111101011000001", 49 => "1101101011101011", 50 => "1111010100100010", 
    51 => "0000000110101000", 52 => "1111111001001110", 53 => "1011011101001010", 
    54 => "1110000100101010", 55 => "0000001101000011", 56 => "1111011100000101", 
    57 => "1111111011100010", 58 => "0000000011000111", 59 => "0000001001111000", 
    60 => "0000001101110011", 61 => "1111111110101011", 62 => "1111010111110110", 
    63 => "0000001000111110", 64 => "0000010000101111", 65 => "0000010101111001", 
    66 => "0101101000011110", 67 => "0000000100100111", 68 => "0000010101101101", 
    69 => "1111101110100110", 70 => "1111110010001010", 71 => "0000000101000111", 
    72 => "1111011001001100", 73 => "0000000010010110", 74 => "1010001110101000", 
    75 => "1111111111010001", 76 => "1111110001110001", 77 => "1111111111001110", 
    78 => "1111010011000011", 79 => "0000000101011101", 80 => "0000001110011011", 
    81 => "0000011101110111", 82 => "0000000010000010", 83 => "0000000011101010", 
    84 => "1001011100000000", 85 => "0000100111101100", 86 => "0000000010101000", 
    87 => "0000000000101011", 88 => "1111110100100110", 89 => "0010000001110011", 
    90 => "1111111101111011", 91 => "1111101111101000", 92 => "1111111100111011", 
    93 => "1111110010001101", 94 => "0000000110100101", 95 => "1111111110011000", 
    96 => "1111111100110000", 97 => "0000100101011001", 98 => "0000000011110000", 
    99 => "1111111000100100", 100 => "0000010000011001", 101 => "1111111110111110", 
    102 => "1111101010110011", 103 => "1111101111100000", 104 => "0000000000001011", 
    105 => "0000010000100010", 106 => "1110000100100000", 107 => "0000000100111010", 
    108 => "0000001011000100", 109 => "0000100011110001", 110 => "0000000100010010", 
    111 => "1110110101010001", 112 => "0000001110110001", 113 => "1111111101011100", 
    114 => "1111100000001111", 115 => "0000001111101011", 116 => "1111111110010101", 
    117 => "0000000010110001", 118 => "1111101110101011", 119 => "0000000011111001", 
    120 => "0000000001110000", 121 => "1111010010111001", 122 => "0001011001110000", 
    123 => "1111101011001101", 124 => "1111111011111011", 125 => "0000011101010000", 
    126 => "0000101100010110", 127 => "0000010100111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActHfu is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActHfu is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActHfu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActHfu_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActHfu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


