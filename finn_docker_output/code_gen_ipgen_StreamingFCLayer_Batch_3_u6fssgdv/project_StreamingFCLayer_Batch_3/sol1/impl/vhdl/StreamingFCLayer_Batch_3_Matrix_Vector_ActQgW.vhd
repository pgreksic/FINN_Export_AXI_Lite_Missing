-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActQgW_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActQgW_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101001110110", 1 => "0000010001110010", 2 => "1111100000000110", 
    3 => "1111111010001011", 4 => "0000000010101110", 5 => "0000000110011010", 
    6 => "0000101001010000", 7 => "0000000011010000", 8 => "1111100101011000", 
    9 => "0000001111010001", 10 => "1111111111010111", 11 => "0101001000111100", 
    12 => "0000101000000111", 13 => "1111110000001011", 14 => "1111011111111001", 
    15 => "0000010011111011", 16 => "1111100101111110", 17 => "1111110100000010", 
    18 => "0000001111010101", 19 => "0000010110110001", 20 => "1111111111010110", 
    21 => "0000000001110111", 22 => "1111111011011110", 23 => "1111101100110000", 
    24 => "0000011110101010", 25 => "0000000001000101", 26 => "0000010111100101", 
    27 => "1111101111111101", 28 => "1111111010101010", 29 => "0000000110011010", 
    30 => "1111111000101001", 31 => "1111110010011110", 32 => "0000011100010110", 
    33 => "1111110010001011", 34 => "0000000111100101", 35 => "0000110011101101", 
    36 => "0000000110101111", 37 => "0000001111101010", 38 => "1111101111011010", 
    39 => "1111100010011000", 40 => "1111101101001011", 41 => "0000101000010001", 
    42 => "1010111111000101", 43 => "0000000111101000", 44 => "1111011000101100", 
    45 => "1111111010011000", 46 => "1111111100000010", 47 => "0000011011010101", 
    48 => "1111101110010100", 49 => "1110110111001000", 50 => "1111011001000111", 
    51 => "0000001000001111", 52 => "1111111010000111", 53 => "1100000111110101", 
    54 => "1111011101011011", 55 => "0000001110000001", 56 => "1111011111101101", 
    57 => "1111111100100110", 58 => "0000000100011010", 59 => "0000001010111110", 
    60 => "0000001111000111", 61 => "1111111111100011", 62 => "1111101011011100", 
    63 => "0000001010000001", 64 => "0000010001100110", 65 => "0000011001110111", 
    66 => "0110100100000001", 67 => "0000000110101000", 68 => "0000010111101010", 
    69 => "1111110000001111", 70 => "1111110011001111", 71 => "0000000101111001", 
    72 => "1111011100101110", 73 => "0000000011101000", 74 => "1010111100011011", 
    75 => "0000000000011100", 76 => "1111110010111000", 77 => "0000000000100000", 
    78 => "1111011111001110", 79 => "0000000111010000", 80 => "0000001111101110", 
    81 => "0000100001100100", 82 => "0000000011011101", 83 => "0000000100101010", 
    84 => "1001011100000000", 85 => "0000110111100011", 86 => "0000000100000000", 
    87 => "0000000001101111", 88 => "1111110101000011", 89 => "0010100100000011", 
    90 => "1111111111010001", 91 => "1111110000111010", 92 => "1111111110001101", 
    93 => "1111110011010100", 94 => "0000001000100110", 95 => "1111111111100111", 
    96 => "1111111101011000", 97 => "0000101001000000", 98 => "0000000100111100", 
    99 => "1111111001111000", 100 => "0000010001011111", 101 => "0000000000001101", 
    102 => "1111101011111010", 103 => "1111110010001001", 104 => "0000000001010001", 
    105 => "0000010001110101", 106 => "1110100110010010", 107 => "0000000110001001", 
    108 => "0000001100010111", 109 => "0000101100101010", 110 => "0000000101011110", 
    111 => "1111000001011111", 112 => "0000010000000001", 113 => "1111111110101111", 
    114 => "1111100011011100", 115 => "0000010000110000", 116 => "1111111110111101", 
    117 => "0000000100001110", 118 => "1111101111110101", 119 => "0000000101011000", 
    120 => "0000000010011111", 121 => "1111011001011000", 122 => "0001101001001110", 
    123 => "1111101100001101", 124 => "1111111110101110", 125 => "0000011110010011", 
    126 => "0000110000110001", 127 => "0000010101110100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActQgW is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActQgW is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActQgW_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActQgW_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActQgW_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


