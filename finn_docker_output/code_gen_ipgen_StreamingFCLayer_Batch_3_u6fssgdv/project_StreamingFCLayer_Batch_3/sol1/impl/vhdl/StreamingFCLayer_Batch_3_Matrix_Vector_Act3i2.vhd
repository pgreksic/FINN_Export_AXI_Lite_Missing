-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Act3i2_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_Act3i2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111011110111", 1 => "1111111101011000", 2 => "1111110101101000", 
    3 => "0001000001101000", 4 => "1111111110010101", 5 => "0000001001011100", 
    6 => "1111100111000011", 7 => "0000011100100011", 8 => "0000000001011010", 
    9 => "0000111010100111", 10 => "0001000010101100", 11 => "0000001110011110", 
    12 => "1111111101011010", 13 => "1111110100111000", 14 => "0000010101010100", 
    15 => "1111111001001111", 16 => "0000111010111110", 17 => "0000001111110100", 
    18 => "1111111100111010", 19 => "0000101010000010", 20 => "1111110101110001", 
    21 => "1111110111110101", 22 => "1111101001001010", 23 => "1111011000100111", 
    24 => "1111100111000011", 25 => "0000010000101101", 26 => "1001011100000000", 
    27 => "0000000101110110", 28 => "1111110101001000", 29 => "1111010101101101", 
    30 => "0000010111001110", 31 => "1111110101000011", 32 => "0101001100000110", 
    33 => "1111101010110010", 34 => "0000011001010101", 35 => "0001010000100111", 
    36 => "1111101001011010", 37 => "1111110100101011", 38 => "0000011101100000", 
    39 => "0000000010100101", 40 => "1111110101101111", 41 => "0000010100010000", 
    42 => "0000001110011101", 43 => "1111111010000000", 44 => "0000010011110111", 
    45 => "0000100101001100", 46 => "1111110011111111", 47 => "1111110011011100", 
    48 => "0000110101110100", 49 => "1111100000011101", 50 => "0000100101001011", 
    51 => "0000010010001110", 52 => "1111110110101010", 53 => "1111001010111010", 
    54 => "0000111011100100", 55 => "0000011001000100", 56 => "0000010110001100", 
    57 => "1111111100101000", 58 => "1111100000001001", 59 => "0000000010110111", 
    60 => "1111101111110110", 61 => "0000000010000110", 62 => "0000010110001000", 
    63 => "0000010001011100", 64 => "0000011110001000", 65 => "0000000001010001", 
    66 => "1111101111000100", 67 => "1111110111011110", 68 => "1111111110100110", 
    69 => "1111101101110001", 70 => "0000100010110010", 71 => "0000000110001011", 
    72 => "0000101000100010", 73 => "1111101001001110", 74 => "0000100001100010", 
    75 => "0000011110111111", 76 => "0000001001110111", 77 => "0000001100000111", 
    78 => "1111011110110010", 79 => "1111110100111011", 80 => "1111101111001110", 
    81 => "0000010111100000", 82 => "0000001001110000", 83 => "0000000100111110", 
    84 => "0000000001100010", 85 => "1111110110100001", 86 => "1111110100000110", 
    87 => "1111110100011101", 88 => "1111110100001001", 89 => "1111111011010000", 
    90 => "1111011100110010", 91 => "0000111001011111", 92 => "1111011111001111", 
    93 => "1111111001000101", 94 => "0001011110011001", 95 => "0000111100110101", 
    96 => "1111110100001111", 97 => "1111110011000110", 98 => "0000000010101100", 
    99 => "0001000100000000", 100 => "0000101000011011", 101 => "0000001100101110", 
    102 => "1111110001100001", 103 => "1111010110001101", 104 => "0000001011110010", 
    105 => "0000001110011100", 106 => "0000001001101101", 107 => "0000000011000011", 
    108 => "0000000110111110", 109 => "0000000110010111", 110 => "0000000001011110", 
    111 => "0000110000101101", 112 => "0000001001011010", 113 => "0000000000010111", 
    114 => "0000001111101010", 115 => "0000011001000000", 116 => "1111111111101011", 
    117 => "0000110000101101", 118 => "0000010000010011", 119 => "1111011100000101", 
    120 => "1111101111000110", 121 => "0000010110000101", 122 => "0000001110000100", 
    123 => "0000000101010011", 124 => "0000001110000110", 125 => "1111101101011110", 
    126 => "0000000101010111", 127 => "0000000011011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_Act3i2 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_Act3i2 is
    component StreamingFCLayer_Batch_3_Matrix_Vector_Act3i2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_Act3i2_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_Act3i2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


