-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActwdI_rom is 
    generic(
             DWIDTH     : integer := 15; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_3_Matrix_Vector_ActwdI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000000110111110", 1 => "111011101101000", 2 => "000001010011001", 
    3 => "000011100000111", 4 => "000011001000001", 5 => "000010111001100", 
    6 => "000010000011001", 7 => "111101010101001", 8 => "111111101001010", 
    9 => "000000011111101", 10 => "000100010111101", 11 => "000100100011010", 
    12 => "101010001010000", 13 => "100010100010011", 14 => "000000111001000", 
    15 => "000000101111111", 16 => "111111101011110", 17 => "010110010000110", 
    18 => "111100100111101", 19 => "000100101101010", 20 => "111101110100001", 
    21 => "111011110110100", 22 => "111110101011011", 23 => "101100101101001", 
    24 => "000000000101000", 25 => "000010000110011", 26 => "000000001110000", 
    27 => "111110110001000", 28 => "111101011111000", 29 => "111110011100011", 
    30 => "111110001110111", 31 => "111101101100000", 32 => "000001100001001", 
    33 => "000000011010011", 34 => "000001100001101", 35 => "111111110001001", 
    36 => "000101110010000", 37 => "000011101000110", 38 => "111111100011001", 
    39 => "000000001111111", 40 => "111111010010001", 41 => "000000000111101", 
    42 => "000001011110101", 43 => "111111101010011", 44 => "000001010010110", 
    45 => "000001001011000", 46 => "000000000011011", 47 => "111111111000101", 
    48 => "111101110000000", 49 => "111110000010010", 50 => "111010010000110", 
    51 => "111100001001111", 52 => "000000110011101", 53 => "000010100001001", 
    54 => "111011011011001", 55 => "000010010110110", 56 => "000000111010000", 
    57 => "000010111111001", 58 => "111100000100110", 59 => "001000110111000", 
    60 => "111101001011000", 61 => "111110110001011", 62 => "000010010001110", 
    63 => "111110001110001", 64 => "000101100001100", 65 => "000010000011001", 
    66 => "000000101010100", 67 => "000101100000101", 68 => "001011010110101", 
    69 => "000010010101111", 70 => "111111001101110", 71 => "111010111010011", 
    72 => "110100101110110", 73 => "111101001100101", 74 => "000001001111011", 
    75 => "000010011011100", 76 => "111101011110100", 77 => "001010111011010", 
    78 => "110111011101111", 79 => "111111010000100", 80 => "111100101001111", 
    81 => "111111011101101", 82 => "000011000100001", 83 => "000000100001010", 
    84 => "110011000110011", 85 => "111101111100100", 86 => "000010001001111", 
    87 => "000001111101000", 88 => "000001000011110", 89 => "000110111011110", 
    90 => "111110111011111", 91 => "000000101011111", 92 => "111011111000010", 
    93 => "000001101010110", 94 => "000100001000101", 95 => "000011011111001", 
    96 => "111111010100101", 97 => "111001111100001", 98 => "111101000111011", 
    99 => "111110011100000", 100 => "000001101101101", 101 => "000001111110110", 
    102 => "000001101000011", 103 => "111011100000000", 104 => "111110110011000", 
    105 => "111110011100111", 106 => "111111101010111", 107 => "000010100011011", 
    108 => "111111010101100", 109 => "111001110100000", 110 => "111110010111111", 
    111 => "111110000001000", 112 => "111110111110001", 113 => "111110001001000", 
    114 => "111111000101100", 115 => "111100001101011", 116 => "110111100011111", 
    117 => "000000100011000", 118 => "111101111011001", 119 => "000000101111111", 
    120 => "111101110111011", 121 => "111110111100110", 122 => "111101101110001", 
    123 => "111111100011010", 124 => "000101101001100", 125 => "111101111101101", 
    126 => "111111001011111", 127 => "000001000101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_3_Matrix_Vector_ActwdI is
    generic (
        DataWidth : INTEGER := 15;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_3_Matrix_Vector_ActwdI is
    component StreamingFCLayer_Batch_3_Matrix_Vector_ActwdI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_3_Matrix_Vector_ActwdI_rom_U :  component StreamingFCLayer_Batch_3_Matrix_Vector_ActwdI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


