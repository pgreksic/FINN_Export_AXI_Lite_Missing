-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actcud_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Actcud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000111010001101", 1 => "1110100011001000", 2 => "1111101001010000", 
    3 => "1111110111001001", 4 => "1111100101101001", 5 => "1111110100001011", 
    6 => "1111111001001100", 7 => "0001001010101101", 8 => "0101000000100010", 
    9 => "1111111101001100", 10 => "1111001100101011", 11 => "0000001101011100", 
    12 => "1110101111010000", 13 => "0000000111011111", 14 => "0010001101100010", 
    15 => "1011010000011101", 16 => "1111110110010001", 17 => "1111101011100000", 
    18 => "0000101111111001", 19 => "1111010101101010", 20 => "0000000001001000", 
    21 => "1111111100110010", 22 => "1110111101110110", 23 => "1111110111101100", 
    24 => "0000001111010101", 25 => "1101111000111011", 26 => "1111010110110001", 
    27 => "1111101111010100", 28 => "1111010011101000", 29 => "1111100011101001", 
    30 => "0101111110011110", 31 => "1111110100010011", 32 => "1111001011100111", 
    33 => "0000000101110000", 34 => "1111101110010010", 35 => "1111111101000110", 
    36 => "1111110100011110", 37 => "0000111100000010", 38 => "1111010011010010", 
    39 => "0000010001010100", 40 => "0000011011111100", 41 => "1111111101111111", 
    42 => "1111110001110011", 43 => "0000001000100110", 44 => "0000001010011001", 
    45 => "0001001010011011", 46 => "0000010101010000", 47 => "1111111100010111", 
    48 => "0000010001010000", 49 => "1111111101001000", 50 => "0000000001101100", 
    51 => "1110111111101000", 52 => "0000101110100101", 53 => "1111100110001011", 
    54 => "0000001011011110", 55 => "1111111101000010", 56 => "1111110011001001", 
    57 => "0000010001011010", 58 => "0000000101010000", 59 => "1110010010101111", 
    60 => "0000010110001000", 61 => "1110101111110101", 62 => "1111110110110101", 
    63 => "1110010110101001", 64 => "1111111000001110", 65 => "1111011000110110", 
    66 => "0000000011000000", 67 => "0000100011110001", 68 => "0000101000111000", 
    69 => "0000000011101110", 70 => "0010001101011011", 71 => "1110101000000001", 
    72 => "0000000111101010", 73 => "1111101100000001", 74 => "0000000100001011", 
    75 => "0000000101111000", 76 => "0000000111001111", 77 => "1111111100101000", 
    78 => "1111101110101110", 79 => "0000000111111011", 80 => "1111111001000010", 
    81 => "0000000101011001", 82 => "0000110101100000", 83 => "1101110010110100", 
    84 => "0011011111111010", 85 => "0000010000010100", 86 => "0000001011101000", 
    87 => "1111010110100110", 88 => "0000111110001100", 89 => "0000001110010100", 
    90 => "0000000111110111", 91 => "1111110100100011", 92 => "0000010011111001", 
    93 => "0000000100000100", 94 => "0000100001011101", 95 => "0000000011010000", 
    96 => "1111110110100010", 97 => "1111111101101011", 98 => "1111111101001001", 
    99 => "1111111001001111", 100 => "0000001010101101", 101 => "0010100010111010", 
    102 => "0000000010000011", 103 => "0000001000111101", 104 => "1111011100001000", 
    105 => "1111110010111100", 106 => "1111110110111000", 107 => "1110101001011111", 
    108 => "1111110000001110", 109 => "0000000101101100", 110 => "1111111100100110", 
    111 => "1111100100010001", 112 => "1101011110010101", 113 => "1111111110110010", 
    114 => "1111111110101001", 115 => "0000110100110001", 116 => "1111100010010110", 
    117 => "0000001010001011", 118 => "1111110111110011", 119 => "0000000001010100", 
    120 => "0000001101100011", 121 => "1111101110000010", 122 => "0000000101011000", 
    123 => "1111110101010100", 124 => "0001111111100011", 125 => "1111111010011100", 
    126 => "0000111100001001", 127 => "1110011100111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actcud is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Actcud is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Actcud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Actcud_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Actcud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


