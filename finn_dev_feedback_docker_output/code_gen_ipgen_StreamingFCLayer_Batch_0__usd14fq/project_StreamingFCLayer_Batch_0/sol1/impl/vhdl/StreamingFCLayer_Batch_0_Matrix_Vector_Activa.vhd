-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity StreamingFCLayer_Batch_0_Matrix_Vector_Activa is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_TVALID : IN STD_LOGIC;
    in_V_V_TREADY : OUT STD_LOGIC;
    out_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_V_TVALID : OUT STD_LOGIC;
    out_V_V_TREADY : IN STD_LOGIC;
    weight_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_V_V_TVALID : IN STD_LOGIC;
    weight_V_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of StreamingFCLayer_Batch_0_Matrix_Vector_Activa is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv20_BDD80 : STD_LOGIC_VECTOR (19 downto 0) := "10111101110110000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal threshs_m_thresholds_27_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_27_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_27_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_26_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_26_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_26_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_21_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_21_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_21_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_20_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_20_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_20_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_19_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_19_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_19_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_18_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_18_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_18_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_17_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_17_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_17_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_16_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_16_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_16_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_15_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_15_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_15_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_14_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_14_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_14_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_25_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_25_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_25_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_24_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_24_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_24_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_23_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_23_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_23_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_22_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_22_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_22_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_13_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_13_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_13_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_12_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_12_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_12_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_7_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_7_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_7_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_6_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_6_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_5_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_5_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_4_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_4_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_3_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_2_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_1_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_11_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_11_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_11_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_10_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_10_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_10_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_9_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_9_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_9_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal threshs_m_thresholds_8_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshs_m_thresholds_8_ce0 : STD_LOGIC;
    signal threshs_m_thresholds_8_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln248_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln252_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln289_reg_2167 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_reg_2167_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_V_TDATA_blk_n : STD_LOGIC;
    signal i_0_reg_687 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_predicate_op85_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_775_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal inElem_V_1_fu_878_p29 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln321_fu_938_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln647_fu_1080_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln647_reg_2151 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_m_weights_1_V_reg_2156 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln271_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln271_reg_2161 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln271_reg_2161_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_fu_1106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_reg_2167_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1352_fu_1124_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1352_reg_2171 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1352_1_fu_1133_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1352_1_reg_2176 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln899_fu_1247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_reg_2321 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_fu_1253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_reg_2326 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_2_fu_1259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_2_reg_2331 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_3_fu_1265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_3_reg_2336 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_4_fu_1271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_4_reg_2341 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_5_fu_1277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_5_reg_2346 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_6_fu_1283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_6_reg_2351 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_10_fu_1337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_10_reg_2356 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_11_fu_1343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_11_reg_2361 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_12_fu_1349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_12_reg_2366 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_13_fu_1355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_13_reg_2371 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_7_fu_1367_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_7_reg_2376 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln899_14_fu_1373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_14_reg_2381 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_15_fu_1379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_15_reg_2386 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_16_fu_1385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_16_reg_2391 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_17_fu_1391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_17_reg_2396 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_18_fu_1397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_18_reg_2401 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_19_fu_1403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_19_reg_2406 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_20_fu_1409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_20_reg_2411 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_24_fu_1463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_24_reg_2416 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_25_fu_1469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_25_reg_2421 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_26_fu_1475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_26_reg_2426 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_27_fu_1481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_27_reg_2431 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_20_fu_1493_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_20_reg_2436 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_reg_pp0_iter0_p_Val2_s_reg_698 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_Val2_s_reg_698 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln186_fu_1142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal accu_V_0_0_0_fu_180 : STD_LOGIC_VECTOR (15 downto 0);
    signal accu_0_0_V_fu_1222_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal accu_V_0_1_0_fu_184 : STD_LOGIC_VECTOR (15 downto 0);
    signal accu_0_1_V_fu_1231_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sf_1_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal sf_fu_1100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_192 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_2_fu_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_4_fu_204 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_5_fu_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_6_fu_212 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_7_fu_216 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_8_fu_220 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_9_fu_224 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_10_fu_228 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_11_fu_232 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_12_fu_236 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_13_fu_240 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_14_fu_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_15_fu_248 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_16_fu_252 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_17_fu_256 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_18_fu_260 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_19_fu_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_20_fu_268 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_21_fu_272 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_22_fu_276 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_23_fu_280 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_24_fu_284 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_25_fu_288 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_26_fu_292 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_27_fu_296 : STD_LOGIC_VECTOR (7 downto 0);
    signal nf_assign_fu_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln301_fu_1186_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_nf_assign_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal inElem_V_1_fu_878_p28 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1352_fu_1124_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln215_1_fu_1120_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1352_1_fu_1133_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal nf_fu_1174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln301_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln700_fu_1219_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln271_1_fu_1212_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln700_1_fu_1228_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln271_fu_1205_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln899_7_fu_1289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_7_fu_1295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_8_fu_1305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_8_fu_1311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_9_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_9_fu_1327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln186_8_fu_1317_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_9_fu_1333_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_6_fu_1361_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_7_fu_1301_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln899_21_fu_1415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_21_fu_1421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_22_fu_1431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_22_fu_1437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_23_fu_1447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_23_fu_1453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln186_20_fu_1443_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_21_fu_1459_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_19_fu_1487_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_19_fu_1427_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln899_fu_1499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_1_fu_1512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_2_fu_1521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_3_fu_1530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_4_fu_1539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_5_fu_1548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_6_fu_1557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_10_fu_1566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_11_fu_1575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_12_fu_1584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_13_fu_1593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln186_1_fu_1517_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_2_fu_1526_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_fu_1602_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln700_1_fu_1608_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln700_fu_1504_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln186_3_fu_1535_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_4_fu_1544_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_2_fu_1618_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_5_fu_1553_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_6_fu_1562_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_3_fu_1628_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln700_3_fu_1634_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_2_fu_1624_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln700_4_fu_1638_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_4_fu_1644_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_1_fu_1612_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln186_10_fu_1571_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_11_fu_1580_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_8_fu_1657_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_12_fu_1589_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln700_fu_1598_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_9_fu_1667_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln700_7_fu_1673_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_6_fu_1663_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln700_10_fu_1677_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_5_fu_1654_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln700_11_fu_1683_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_8_fu_1689_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_5_fu_1648_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln899_14_fu_1699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_15_fu_1712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_16_fu_1721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_17_fu_1730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_18_fu_1739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_19_fu_1748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_20_fu_1757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_24_fu_1766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_25_fu_1775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_26_fu_1784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_27_fu_1793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln186_13_fu_1717_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_14_fu_1726_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_13_fu_1802_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln700_10_fu_1808_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln700_1_fu_1704_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln186_15_fu_1735_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_16_fu_1744_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_15_fu_1818_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_17_fu_1753_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_18_fu_1762_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_16_fu_1828_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln700_12_fu_1834_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_11_fu_1824_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln700_17_fu_1838_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_13_fu_1844_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_14_fu_1812_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln186_22_fu_1771_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_23_fu_1780_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_21_fu_1857_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln186_24_fu_1789_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln700_9_fu_1798_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln700_22_fu_1867_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln700_16_fu_1873_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_15_fu_1863_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln700_23_fu_1877_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_14_fu_1854_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln700_24_fu_1883_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln700_17_fu_1889_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_18_fu_1848_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_25_fu_1893_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_12_fu_1693_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component StreamingFCLayer_Batch_0_StreamingFCLayer_DeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (7 downto 0);
        din26 : IN STD_LOGIC_VECTOR (7 downto 0);
        din27 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_StreamingFCLayer_Ee0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Actbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Actcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Actg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Acthbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Actibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActkbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Actmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Actncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Actocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActpcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActrcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Actsc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Acttde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Actudo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Actvdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActwdI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActxdS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Actyd2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_Actzec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActAem IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActBew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component StreamingFCLayer_Batch_0_Matrix_Vector_ActCeG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    threshs_m_thresholds_27_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Actbkb
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_27_address0,
        ce0 => threshs_m_thresholds_27_ce0,
        q0 => threshs_m_thresholds_27_q0);

    threshs_m_thresholds_26_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Actcud
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_26_address0,
        ce0 => threshs_m_thresholds_26_ce0,
        q0 => threshs_m_thresholds_26_q0);

    threshs_m_thresholds_21_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActdEe
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_21_address0,
        ce0 => threshs_m_thresholds_21_ce0,
        q0 => threshs_m_thresholds_21_q0);

    threshs_m_thresholds_20_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActeOg
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_20_address0,
        ce0 => threshs_m_thresholds_20_ce0,
        q0 => threshs_m_thresholds_20_q0);

    threshs_m_thresholds_19_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActfYi
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_19_address0,
        ce0 => threshs_m_thresholds_19_ce0,
        q0 => threshs_m_thresholds_19_q0);

    threshs_m_thresholds_18_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Actg8j
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_18_address0,
        ce0 => threshs_m_thresholds_18_ce0,
        q0 => threshs_m_thresholds_18_q0);

    threshs_m_thresholds_17_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Acthbi
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_17_address0,
        ce0 => threshs_m_thresholds_17_ce0,
        q0 => threshs_m_thresholds_17_q0);

    threshs_m_thresholds_16_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Actibs
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_16_address0,
        ce0 => threshs_m_thresholds_16_ce0,
        q0 => threshs_m_thresholds_16_q0);

    threshs_m_thresholds_15_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActjbC
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_15_address0,
        ce0 => threshs_m_thresholds_15_ce0,
        q0 => threshs_m_thresholds_15_q0);

    threshs_m_thresholds_14_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActkbM
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_14_address0,
        ce0 => threshs_m_thresholds_14_ce0,
        q0 => threshs_m_thresholds_14_q0);

    threshs_m_thresholds_25_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActlbW
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_25_address0,
        ce0 => threshs_m_thresholds_25_ce0,
        q0 => threshs_m_thresholds_25_q0);

    threshs_m_thresholds_24_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Actmb6
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_24_address0,
        ce0 => threshs_m_thresholds_24_ce0,
        q0 => threshs_m_thresholds_24_q0);

    threshs_m_thresholds_23_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Actncg
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_23_address0,
        ce0 => threshs_m_thresholds_23_ce0,
        q0 => threshs_m_thresholds_23_q0);

    threshs_m_thresholds_22_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Actocq
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_22_address0,
        ce0 => threshs_m_thresholds_22_ce0,
        q0 => threshs_m_thresholds_22_q0);

    threshs_m_thresholds_13_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActpcA
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_13_address0,
        ce0 => threshs_m_thresholds_13_ce0,
        q0 => threshs_m_thresholds_13_q0);

    threshs_m_thresholds_12_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActqcK
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_12_address0,
        ce0 => threshs_m_thresholds_12_ce0,
        q0 => threshs_m_thresholds_12_q0);

    threshs_m_thresholds_7_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActrcU
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_7_address0,
        ce0 => threshs_m_thresholds_7_ce0,
        q0 => threshs_m_thresholds_7_q0);

    threshs_m_thresholds_6_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Actsc4
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_6_address0,
        ce0 => threshs_m_thresholds_6_ce0,
        q0 => threshs_m_thresholds_6_q0);

    threshs_m_thresholds_5_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Acttde
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_5_address0,
        ce0 => threshs_m_thresholds_5_ce0,
        q0 => threshs_m_thresholds_5_q0);

    threshs_m_thresholds_4_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Actudo
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_4_address0,
        ce0 => threshs_m_thresholds_4_ce0,
        q0 => threshs_m_thresholds_4_q0);

    threshs_m_thresholds_3_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Actvdy
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_3_address0,
        ce0 => threshs_m_thresholds_3_ce0,
        q0 => threshs_m_thresholds_3_q0);

    threshs_m_thresholds_2_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActwdI
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_2_address0,
        ce0 => threshs_m_thresholds_2_ce0,
        q0 => threshs_m_thresholds_2_q0);

    threshs_m_thresholds_1_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActxdS
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_1_address0,
        ce0 => threshs_m_thresholds_1_ce0,
        q0 => threshs_m_thresholds_1_q0);

    threshs_m_thresholds_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Actyd2
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_address0,
        ce0 => threshs_m_thresholds_ce0,
        q0 => threshs_m_thresholds_q0);

    threshs_m_thresholds_11_U : component StreamingFCLayer_Batch_0_Matrix_Vector_Actzec
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_11_address0,
        ce0 => threshs_m_thresholds_11_ce0,
        q0 => threshs_m_thresholds_11_q0);

    threshs_m_thresholds_10_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActAem
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_10_address0,
        ce0 => threshs_m_thresholds_10_ce0,
        q0 => threshs_m_thresholds_10_q0);

    threshs_m_thresholds_9_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActBew
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_9_address0,
        ce0 => threshs_m_thresholds_9_ce0,
        q0 => threshs_m_thresholds_9_q0);

    threshs_m_thresholds_8_U : component StreamingFCLayer_Batch_0_Matrix_Vector_ActCeG
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshs_m_thresholds_8_address0,
        ce0 => threshs_m_thresholds_8_ce0,
        q0 => threshs_m_thresholds_8_q0);

    StreamingFCLayer_DeQ_U1 : component StreamingFCLayer_Batch_0_StreamingFCLayer_DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_V_fu_192,
        din1 => tmp_V_1_fu_196,
        din2 => tmp_V_2_fu_200,
        din3 => tmp_V_4_fu_204,
        din4 => tmp_V_5_fu_208,
        din5 => tmp_V_6_fu_212,
        din6 => tmp_V_7_fu_216,
        din7 => tmp_V_8_fu_220,
        din8 => tmp_V_9_fu_224,
        din9 => tmp_V_10_fu_228,
        din10 => tmp_V_11_fu_232,
        din11 => tmp_V_12_fu_236,
        din12 => tmp_V_13_fu_240,
        din13 => tmp_V_14_fu_244,
        din14 => tmp_V_15_fu_248,
        din15 => tmp_V_16_fu_252,
        din16 => tmp_V_17_fu_256,
        din17 => tmp_V_18_fu_260,
        din18 => tmp_V_19_fu_264,
        din19 => tmp_V_20_fu_268,
        din20 => tmp_V_21_fu_272,
        din21 => tmp_V_22_fu_276,
        din22 => tmp_V_23_fu_280,
        din23 => tmp_V_24_fu_284,
        din24 => tmp_V_25_fu_288,
        din25 => tmp_V_26_fu_292,
        din26 => tmp_V_27_fu_296,
        din27 => inElem_V_1_fu_878_p28,
        dout => inElem_V_1_fu_878_p29);

    StreamingFCLayer_Ee0_U2 : component StreamingFCLayer_Batch_0_StreamingFCLayer_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln1352_fu_1124_p0,
        din1 => trunc_ln647_reg_2151,
        dout => mul_ln1352_fu_1124_p2);

    StreamingFCLayer_Ee0_U3 : component StreamingFCLayer_Batch_0_StreamingFCLayer_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln1352_1_fu_1133_p0,
        din1 => w_m_weights_1_V_reg_2156,
        dout => mul_ln1352_1_fu_1133_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_p_Val2_s_reg_698_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_0) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter1_p_Val2_s_reg_698 <= inElem_V_1_fu_878_p29;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (((((((trunc_ln321_fu_938_p1 = ap_const_lv5_1E) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_1F) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0))) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_1D) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0))) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_1C) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0))) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_1B) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0))) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_1A) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0)))) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_10) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_11) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_12) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_13) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_14) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_15) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_16) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_17) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_18) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_19) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                ap_phi_reg_pp0_iter1_p_Val2_s_reg_698 <= in_V_V_TDATA;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter1_p_Val2_s_reg_698 <= ap_phi_reg_pp0_iter0_p_Val2_s_reg_698;
            end if; 
        end if;
    end process;

    i_0_reg_687_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_687 <= i_fu_775_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_687 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    nf_assign_fu_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln289_reg_2167 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                nf_assign_fu_300 <= select_ln301_fu_1186_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                nf_assign_fu_300 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sf_1_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln289_fu_1106_p2 = ap_const_lv1_0) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                sf_1_fu_188 <= sf_fu_1100_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln289_fu_1106_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                sf_1_fu_188 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                accu_V_0_0_0_fu_180 <= accu_0_0_V_fu_1222_p2;
                accu_V_0_1_0_fu_184 <= accu_0_1_V_fu_1231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln289_reg_2167_pp0_iter1_reg = ap_const_lv1_1))) then
                add_ln700_20_reg_2436 <= add_ln700_20_fu_1493_p2;
                add_ln700_7_reg_2376 <= add_ln700_7_fu_1367_p2;
                icmp_ln899_10_reg_2356 <= icmp_ln899_10_fu_1337_p2;
                icmp_ln899_11_reg_2361 <= icmp_ln899_11_fu_1343_p2;
                icmp_ln899_12_reg_2366 <= icmp_ln899_12_fu_1349_p2;
                icmp_ln899_13_reg_2371 <= icmp_ln899_13_fu_1355_p2;
                icmp_ln899_14_reg_2381 <= icmp_ln899_14_fu_1373_p2;
                icmp_ln899_15_reg_2386 <= icmp_ln899_15_fu_1379_p2;
                icmp_ln899_16_reg_2391 <= icmp_ln899_16_fu_1385_p2;
                icmp_ln899_17_reg_2396 <= icmp_ln899_17_fu_1391_p2;
                icmp_ln899_18_reg_2401 <= icmp_ln899_18_fu_1397_p2;
                icmp_ln899_19_reg_2406 <= icmp_ln899_19_fu_1403_p2;
                icmp_ln899_1_reg_2326 <= icmp_ln899_1_fu_1253_p2;
                icmp_ln899_20_reg_2411 <= icmp_ln899_20_fu_1409_p2;
                icmp_ln899_24_reg_2416 <= icmp_ln899_24_fu_1463_p2;
                icmp_ln899_25_reg_2421 <= icmp_ln899_25_fu_1469_p2;
                icmp_ln899_26_reg_2426 <= icmp_ln899_26_fu_1475_p2;
                icmp_ln899_27_reg_2431 <= icmp_ln899_27_fu_1481_p2;
                icmp_ln899_2_reg_2331 <= icmp_ln899_2_fu_1259_p2;
                icmp_ln899_3_reg_2336 <= icmp_ln899_3_fu_1265_p2;
                icmp_ln899_4_reg_2341 <= icmp_ln899_4_fu_1271_p2;
                icmp_ln899_5_reg_2346 <= icmp_ln899_5_fu_1277_p2;
                icmp_ln899_6_reg_2351 <= icmp_ln899_6_fu_1283_p2;
                icmp_ln899_reg_2321 <= icmp_ln899_fu_1247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln271_reg_2161 <= icmp_ln271_fu_1094_p2;
                icmp_ln289_reg_2167 <= icmp_ln289_fu_1106_p2;
                trunc_ln647_reg_2151 <= trunc_ln647_fu_1080_p1;
                w_m_weights_1_V_reg_2156 <= weight_V_V_TDATA(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln271_reg_2161_pp0_iter1_reg <= icmp_ln271_reg_2161;
                icmp_ln289_reg_2167_pp0_iter1_reg <= icmp_ln289_reg_2167;
                mul_ln1352_1_reg_2176 <= mul_ln1352_1_fu_1133_p2;
                mul_ln1352_reg_2171 <= mul_ln1352_fu_1124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln289_reg_2167_pp0_iter2_reg <= icmp_ln289_reg_2167_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_10_fu_228 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_11_fu_232 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_12_fu_236 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_13_fu_240 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_14_fu_244 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_15_fu_248 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_16_fu_252 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_10) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_17_fu_256 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_11) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_18_fu_260 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_12) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_19_fu_264 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_1_fu_196 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_13) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_20_fu_268 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_14) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_21_fu_272 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_15) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_22_fu_276 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_16) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_23_fu_280 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_17) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_24_fu_284 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_18) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_25_fu_288 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_19) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_26_fu_292 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (((((((trunc_ln321_fu_938_p1 = ap_const_lv5_1E) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0)) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_1F) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0))) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_1D) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0))) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_1C) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0))) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_1B) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0))) or ((trunc_ln321_fu_938_p1 = ap_const_lv5_1A) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0))))) then
                tmp_V_27_fu_296 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_2_fu_200 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_4_fu_204 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_5_fu_208 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_6_fu_212 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_7_fu_216 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_8_fu_220 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_9_fu_224 <= in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln321_fu_938_p1 = ap_const_lv5_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_fu_192 <= in_V_V_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln248_fu_769_p2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln248_fu_769_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln248_fu_769_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    accu_0_0_V_fu_1222_p2 <= std_logic_vector(signed(sext_ln700_fu_1219_p1) + signed(select_ln271_1_fu_1212_p3));
    accu_0_1_V_fu_1231_p2 <= std_logic_vector(signed(sext_ln700_1_fu_1228_p1) + signed(select_ln271_fu_1205_p3));
    add_ln700_10_fu_1677_p2 <= std_logic_vector(unsigned(zext_ln700_7_fu_1673_p1) + unsigned(zext_ln700_6_fu_1663_p1));
    add_ln700_11_fu_1683_p2 <= std_logic_vector(unsigned(add_ln700_10_fu_1677_p2) + unsigned(zext_ln700_5_fu_1654_p1));
    add_ln700_12_fu_1693_p2 <= std_logic_vector(unsigned(zext_ln700_8_fu_1689_p1) + unsigned(add_ln700_5_fu_1648_p2));
    add_ln700_13_fu_1802_p2 <= std_logic_vector(unsigned(zext_ln186_13_fu_1717_p1) + unsigned(zext_ln186_14_fu_1726_p1));
    add_ln700_14_fu_1812_p2 <= std_logic_vector(unsigned(zext_ln700_10_fu_1808_p1) + unsigned(select_ln700_1_fu_1704_p3));
    add_ln700_15_fu_1818_p2 <= std_logic_vector(unsigned(zext_ln186_15_fu_1735_p1) + unsigned(zext_ln186_16_fu_1744_p1));
    add_ln700_16_fu_1828_p2 <= std_logic_vector(unsigned(zext_ln186_17_fu_1753_p1) + unsigned(zext_ln186_18_fu_1762_p1));
    add_ln700_17_fu_1838_p2 <= std_logic_vector(unsigned(zext_ln700_12_fu_1834_p1) + unsigned(zext_ln700_11_fu_1824_p1));
    add_ln700_18_fu_1848_p2 <= std_logic_vector(unsigned(zext_ln700_13_fu_1844_p1) + unsigned(add_ln700_14_fu_1812_p2));
    add_ln700_19_fu_1487_p2 <= std_logic_vector(unsigned(zext_ln186_20_fu_1443_p1) + unsigned(zext_ln186_21_fu_1459_p1));
    add_ln700_1_fu_1612_p2 <= std_logic_vector(unsigned(zext_ln700_1_fu_1608_p1) + unsigned(select_ln700_fu_1504_p3));
    add_ln700_20_fu_1493_p2 <= std_logic_vector(unsigned(add_ln700_19_fu_1487_p2) + unsigned(zext_ln186_19_fu_1427_p1));
    add_ln700_21_fu_1857_p2 <= std_logic_vector(unsigned(zext_ln186_22_fu_1771_p1) + unsigned(zext_ln186_23_fu_1780_p1));
    add_ln700_22_fu_1867_p2 <= std_logic_vector(unsigned(zext_ln186_24_fu_1789_p1) + unsigned(zext_ln700_9_fu_1798_p1));
    add_ln700_23_fu_1877_p2 <= std_logic_vector(unsigned(zext_ln700_16_fu_1873_p1) + unsigned(zext_ln700_15_fu_1863_p1));
    add_ln700_24_fu_1883_p2 <= std_logic_vector(unsigned(add_ln700_23_fu_1877_p2) + unsigned(zext_ln700_14_fu_1854_p1));
    add_ln700_25_fu_1893_p2 <= std_logic_vector(unsigned(zext_ln700_17_fu_1889_p1) + unsigned(add_ln700_18_fu_1848_p2));
    add_ln700_2_fu_1618_p2 <= std_logic_vector(unsigned(zext_ln186_3_fu_1535_p1) + unsigned(zext_ln186_4_fu_1544_p1));
    add_ln700_3_fu_1628_p2 <= std_logic_vector(unsigned(zext_ln186_5_fu_1553_p1) + unsigned(zext_ln186_6_fu_1562_p1));
    add_ln700_4_fu_1638_p2 <= std_logic_vector(unsigned(zext_ln700_3_fu_1634_p1) + unsigned(zext_ln700_2_fu_1624_p1));
    add_ln700_5_fu_1648_p2 <= std_logic_vector(unsigned(zext_ln700_4_fu_1644_p1) + unsigned(add_ln700_1_fu_1612_p2));
    add_ln700_6_fu_1361_p2 <= std_logic_vector(unsigned(zext_ln186_8_fu_1317_p1) + unsigned(zext_ln186_9_fu_1333_p1));
    add_ln700_7_fu_1367_p2 <= std_logic_vector(unsigned(add_ln700_6_fu_1361_p2) + unsigned(zext_ln186_7_fu_1301_p1));
    add_ln700_8_fu_1657_p2 <= std_logic_vector(unsigned(zext_ln186_10_fu_1571_p1) + unsigned(zext_ln186_11_fu_1580_p1));
    add_ln700_9_fu_1667_p2 <= std_logic_vector(unsigned(zext_ln186_12_fu_1589_p1) + unsigned(zext_ln700_fu_1598_p1));
    add_ln700_fu_1602_p2 <= std_logic_vector(unsigned(zext_ln186_1_fu_1517_p1) + unsigned(zext_ln186_2_fu_1526_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_TVALID, weight_V_V_TVALID, ap_enable_reg_pp0_iter0, icmp_ln248_fu_769_p2, ap_predicate_op85_read_state2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((in_V_V_TVALID = ap_const_logic_0) and (ap_predicate_op85_read_state2 = ap_const_boolean_1)) or ((weight_V_V_TVALID = ap_const_logic_0) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_TVALID, weight_V_V_TVALID, ap_enable_reg_pp0_iter0, icmp_ln248_fu_769_p2, ap_enable_reg_pp0_iter3, ap_predicate_op85_read_state2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((in_V_V_TVALID = ap_const_logic_0) and (ap_predicate_op85_read_state2 = ap_const_boolean_1)) or ((weight_V_V_TVALID = ap_const_logic_0) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_TVALID, weight_V_V_TVALID, ap_enable_reg_pp0_iter0, icmp_ln248_fu_769_p2, ap_enable_reg_pp0_iter3, ap_predicate_op85_read_state2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((in_V_V_TVALID = ap_const_logic_0) and (ap_predicate_op85_read_state2 = ap_const_boolean_1)) or ((weight_V_V_TVALID = ap_const_logic_0) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0)))));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(in_V_V_TVALID, weight_V_V_TVALID, icmp_ln248_fu_769_p2, ap_predicate_op85_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (((in_V_V_TVALID = ap_const_logic_0) and (ap_predicate_op85_read_state2 = ap_const_boolean_1)) or ((weight_V_V_TVALID = ap_const_logic_0) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0)));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(out_V_V_TREADY, icmp_ln289_reg_2167_pp0_iter2_reg)
    begin
                ap_block_state5_io <= ((out_V_V_TREADY = ap_const_logic_0) and (icmp_ln289_reg_2167_pp0_iter2_reg = ap_const_lv1_1));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln248_fu_769_p2)
    begin
        if ((icmp_ln248_fu_769_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_s_reg_698 <= "XXXXXXXX";

    ap_predicate_op85_read_state2_assign_proc : process(icmp_ln248_fu_769_p2, icmp_ln252_fu_784_p2)
    begin
                ap_predicate_op85_read_state2 <= ((icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_nf_assign_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln289_reg_2167, ap_enable_reg_pp0_iter1, nf_assign_fu_300, select_ln301_fu_1186_p3)
    begin
        if (((icmp_ln289_reg_2167 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_nf_assign_load_1 <= select_ln301_fu_1186_p3;
        else 
            ap_sig_allocacmp_nf_assign_load_1 <= nf_assign_fu_300;
        end if; 
    end process;

    i_fu_775_p2 <= std_logic_vector(unsigned(i_0_reg_687) + unsigned(ap_const_lv20_1));
    icmp_ln248_fu_769_p2 <= "1" when (i_0_reg_687 = ap_const_lv20_BDD80) else "0";
    icmp_ln252_fu_784_p2 <= "1" when (ap_sig_allocacmp_nf_assign_load_1 = ap_const_lv32_0) else "0";
    icmp_ln271_fu_1094_p2 <= "1" when (sf_1_fu_188 = ap_const_lv32_0) else "0";
    icmp_ln289_fu_1106_p2 <= "1" when (sf_fu_1100_p2 = ap_const_lv32_1B) else "0";
    icmp_ln301_fu_1180_p2 <= "1" when (nf_fu_1174_p2 = ap_const_lv32_20) else "0";
    icmp_ln899_10_fu_1337_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_25_q0)) else "0";
    icmp_ln899_11_fu_1343_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_24_q0)) else "0";
    icmp_ln899_12_fu_1349_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_23_q0)) else "0";
    icmp_ln899_13_fu_1355_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_22_q0)) else "0";
    icmp_ln899_14_fu_1373_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_13_q0)) else "0";
    icmp_ln899_15_fu_1379_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_12_q0)) else "0";
    icmp_ln899_16_fu_1385_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_7_q0)) else "0";
    icmp_ln899_17_fu_1391_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_6_q0)) else "0";
    icmp_ln899_18_fu_1397_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_5_q0)) else "0";
    icmp_ln899_19_fu_1403_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_4_q0)) else "0";
    icmp_ln899_1_fu_1253_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_26_q0)) else "0";
    icmp_ln899_20_fu_1409_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_3_q0)) else "0";
    icmp_ln899_21_fu_1415_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_2_q0)) else "0";
    icmp_ln899_22_fu_1431_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_1_q0)) else "0";
    icmp_ln899_23_fu_1447_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_q0)) else "0";
    icmp_ln899_24_fu_1463_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_11_q0)) else "0";
    icmp_ln899_25_fu_1469_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_10_q0)) else "0";
    icmp_ln899_26_fu_1475_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_9_q0)) else "0";
    icmp_ln899_27_fu_1481_p2 <= "1" when (signed(accu_0_1_V_fu_1231_p2) < signed(threshs_m_thresholds_8_q0)) else "0";
    icmp_ln899_2_fu_1259_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_21_q0)) else "0";
    icmp_ln899_3_fu_1265_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_20_q0)) else "0";
    icmp_ln899_4_fu_1271_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_19_q0)) else "0";
    icmp_ln899_5_fu_1277_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_18_q0)) else "0";
    icmp_ln899_6_fu_1283_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_17_q0)) else "0";
    icmp_ln899_7_fu_1289_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_16_q0)) else "0";
    icmp_ln899_8_fu_1305_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_15_q0)) else "0";
    icmp_ln899_9_fu_1321_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_14_q0)) else "0";
    icmp_ln899_fu_1247_p2 <= "1" when (signed(accu_0_0_V_fu_1222_p2) < signed(threshs_m_thresholds_27_q0)) else "0";
    inElem_V_1_fu_878_p28 <= sf_1_fu_188(5 - 1 downto 0);

    in_V_V_TDATA_blk_n_assign_proc : process(in_V_V_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln248_fu_769_p2, icmp_ln252_fu_784_p2)
    begin
        if (((icmp_ln252_fu_784_p2 = ap_const_lv1_1) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_TDATA_blk_n <= in_V_V_TVALID;
        else 
            in_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op85_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op85_read_state2 = ap_const_boolean_1))) then 
            in_V_V_TREADY <= ap_const_logic_1;
        else 
            in_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1352_1_fu_1133_p0 <= sext_ln215_1_fu_1120_p1(8 - 1 downto 0);
    mul_ln1352_fu_1124_p0 <= sext_ln215_1_fu_1120_p1(8 - 1 downto 0);
    nf_fu_1174_p2 <= std_logic_vector(unsigned(nf_assign_fu_300) + unsigned(ap_const_lv32_1));
    out_V_V_TDATA <= (add_ln700_25_fu_1893_p2 & add_ln700_12_fu_1693_p2);

    out_V_V_TDATA_blk_n_assign_proc : process(out_V_V_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln289_reg_2167_pp0_iter2_reg)
    begin
        if (((icmp_ln289_reg_2167_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_V_V_TDATA_blk_n <= out_V_V_TREADY;
        else 
            out_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_V_TVALID_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln289_reg_2167_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln289_reg_2167_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_V_V_TVALID <= ap_const_logic_1;
        else 
            out_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    select_ln271_1_fu_1212_p3 <= 
        ap_const_lv16_0 when (icmp_ln271_reg_2161_pp0_iter1_reg(0) = '1') else 
        accu_V_0_0_0_fu_180;
    select_ln271_fu_1205_p3 <= 
        ap_const_lv16_0 when (icmp_ln271_reg_2161_pp0_iter1_reg(0) = '1') else 
        accu_V_0_1_0_fu_184;
    select_ln301_fu_1186_p3 <= 
        ap_const_lv32_0 when (icmp_ln301_fu_1180_p2(0) = '1') else 
        nf_fu_1174_p2;
    select_ln700_1_fu_1704_p3 <= 
        ap_const_lv4_A when (xor_ln899_14_fu_1699_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln700_fu_1504_p3 <= 
        ap_const_lv4_A when (xor_ln899_fu_1499_p2(0) = '1') else 
        ap_const_lv4_9;
        sext_ln215_1_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_reg_pp0_iter1_p_Val2_s_reg_698),12));

        sext_ln700_1_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1352_1_reg_2176),16));

        sext_ln700_fu_1219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1352_reg_2171),16));

    sf_fu_1100_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(sf_1_fu_188));
    threshs_m_thresholds_10_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_10_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_11_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_11_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_12_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_12_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_13_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_13_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_14_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_14_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_15_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_15_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_16_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_16_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_17_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_17_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_17_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_18_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_18_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_19_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_19_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_19_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_1_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_1_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_20_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_20_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_20_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_21_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_21_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_21_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_22_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_22_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_22_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_23_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_23_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_23_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_24_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_24_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_24_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_25_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_25_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_25_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_26_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_26_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_26_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_27_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_27_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_27_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_2_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_2_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_3_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_3_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_4_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_4_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_5_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_5_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_6_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_6_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_7_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_7_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_8_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_8_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_9_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_9_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    threshs_m_thresholds_address0 <= zext_ln186_fu_1142_p1(5 - 1 downto 0);

    threshs_m_thresholds_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            threshs_m_thresholds_ce0 <= ap_const_logic_1;
        else 
            threshs_m_thresholds_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln321_fu_938_p1 <= sf_1_fu_188(5 - 1 downto 0);
    trunc_ln647_fu_1080_p1 <= weight_V_V_TDATA(4 - 1 downto 0);

    weight_V_V_TDATA_blk_n_assign_proc : process(weight_V_V_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln248_fu_769_p2)
    begin
        if (((icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weight_V_V_TDATA_blk_n <= weight_V_V_TVALID;
        else 
            weight_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    weight_V_V_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln248_fu_769_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln248_fu_769_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weight_V_V_TREADY <= ap_const_logic_1;
        else 
            weight_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln899_10_fu_1566_p2 <= (icmp_ln899_10_reg_2356 xor ap_const_lv1_1);
    xor_ln899_11_fu_1575_p2 <= (icmp_ln899_11_reg_2361 xor ap_const_lv1_1);
    xor_ln899_12_fu_1584_p2 <= (icmp_ln899_12_reg_2366 xor ap_const_lv1_1);
    xor_ln899_13_fu_1593_p2 <= (icmp_ln899_13_reg_2371 xor ap_const_lv1_1);
    xor_ln899_14_fu_1699_p2 <= (icmp_ln899_14_reg_2381 xor ap_const_lv1_1);
    xor_ln899_15_fu_1712_p2 <= (icmp_ln899_15_reg_2386 xor ap_const_lv1_1);
    xor_ln899_16_fu_1721_p2 <= (icmp_ln899_16_reg_2391 xor ap_const_lv1_1);
    xor_ln899_17_fu_1730_p2 <= (icmp_ln899_17_reg_2396 xor ap_const_lv1_1);
    xor_ln899_18_fu_1739_p2 <= (icmp_ln899_18_reg_2401 xor ap_const_lv1_1);
    xor_ln899_19_fu_1748_p2 <= (icmp_ln899_19_reg_2406 xor ap_const_lv1_1);
    xor_ln899_1_fu_1512_p2 <= (icmp_ln899_1_reg_2326 xor ap_const_lv1_1);
    xor_ln899_20_fu_1757_p2 <= (icmp_ln899_20_reg_2411 xor ap_const_lv1_1);
    xor_ln899_21_fu_1421_p2 <= (icmp_ln899_21_fu_1415_p2 xor ap_const_lv1_1);
    xor_ln899_22_fu_1437_p2 <= (icmp_ln899_22_fu_1431_p2 xor ap_const_lv1_1);
    xor_ln899_23_fu_1453_p2 <= (icmp_ln899_23_fu_1447_p2 xor ap_const_lv1_1);
    xor_ln899_24_fu_1766_p2 <= (icmp_ln899_24_reg_2416 xor ap_const_lv1_1);
    xor_ln899_25_fu_1775_p2 <= (icmp_ln899_25_reg_2421 xor ap_const_lv1_1);
    xor_ln899_26_fu_1784_p2 <= (icmp_ln899_26_reg_2426 xor ap_const_lv1_1);
    xor_ln899_27_fu_1793_p2 <= (icmp_ln899_27_reg_2431 xor ap_const_lv1_1);
    xor_ln899_2_fu_1521_p2 <= (icmp_ln899_2_reg_2331 xor ap_const_lv1_1);
    xor_ln899_3_fu_1530_p2 <= (icmp_ln899_3_reg_2336 xor ap_const_lv1_1);
    xor_ln899_4_fu_1539_p2 <= (icmp_ln899_4_reg_2341 xor ap_const_lv1_1);
    xor_ln899_5_fu_1548_p2 <= (icmp_ln899_5_reg_2346 xor ap_const_lv1_1);
    xor_ln899_6_fu_1557_p2 <= (icmp_ln899_6_reg_2351 xor ap_const_lv1_1);
    xor_ln899_7_fu_1295_p2 <= (icmp_ln899_7_fu_1289_p2 xor ap_const_lv1_1);
    xor_ln899_8_fu_1311_p2 <= (icmp_ln899_8_fu_1305_p2 xor ap_const_lv1_1);
    xor_ln899_9_fu_1327_p2 <= (icmp_ln899_9_fu_1321_p2 xor ap_const_lv1_1);
    xor_ln899_fu_1499_p2 <= (icmp_ln899_reg_2321 xor ap_const_lv1_1);
    zext_ln186_10_fu_1571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_10_fu_1566_p2),2));
    zext_ln186_11_fu_1580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_11_fu_1575_p2),2));
    zext_ln186_12_fu_1589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_12_fu_1584_p2),2));
    zext_ln186_13_fu_1717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_15_fu_1712_p2),2));
    zext_ln186_14_fu_1726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_16_fu_1721_p2),2));
    zext_ln186_15_fu_1735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_17_fu_1730_p2),2));
    zext_ln186_16_fu_1744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_18_fu_1739_p2),2));
    zext_ln186_17_fu_1753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_19_fu_1748_p2),2));
    zext_ln186_18_fu_1762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_20_fu_1757_p2),2));
    zext_ln186_19_fu_1427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_21_fu_1421_p2),2));
    zext_ln186_1_fu_1517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_1_fu_1512_p2),2));
    zext_ln186_20_fu_1443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_22_fu_1437_p2),2));
    zext_ln186_21_fu_1459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_23_fu_1453_p2),2));
    zext_ln186_22_fu_1771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_24_fu_1766_p2),2));
    zext_ln186_23_fu_1780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_25_fu_1775_p2),2));
    zext_ln186_24_fu_1789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_26_fu_1784_p2),2));
    zext_ln186_2_fu_1526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_2_fu_1521_p2),2));
    zext_ln186_3_fu_1535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_3_fu_1530_p2),2));
    zext_ln186_4_fu_1544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_4_fu_1539_p2),2));
    zext_ln186_5_fu_1553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_5_fu_1548_p2),2));
    zext_ln186_6_fu_1562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_6_fu_1557_p2),2));
    zext_ln186_7_fu_1301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_7_fu_1295_p2),2));
    zext_ln186_8_fu_1317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_8_fu_1311_p2),2));
    zext_ln186_9_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_9_fu_1327_p2),2));
    zext_ln186_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nf_assign_fu_300),64));
    zext_ln700_10_fu_1808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_13_fu_1802_p2),4));
    zext_ln700_11_fu_1824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_15_fu_1818_p2),3));
    zext_ln700_12_fu_1834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_16_fu_1828_p2),3));
    zext_ln700_13_fu_1844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_17_fu_1838_p2),4));
    zext_ln700_14_fu_1854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_20_reg_2436),3));
    zext_ln700_15_fu_1863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_21_fu_1857_p2),3));
    zext_ln700_16_fu_1873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_22_fu_1867_p2),3));
    zext_ln700_17_fu_1889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_24_fu_1883_p2),4));
    zext_ln700_1_fu_1608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_fu_1602_p2),4));
    zext_ln700_2_fu_1624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_2_fu_1618_p2),3));
    zext_ln700_3_fu_1634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_3_fu_1628_p2),3));
    zext_ln700_4_fu_1644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_4_fu_1638_p2),4));
    zext_ln700_5_fu_1654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_7_reg_2376),3));
    zext_ln700_6_fu_1663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_8_fu_1657_p2),3));
    zext_ln700_7_fu_1673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_9_fu_1667_p2),3));
    zext_ln700_8_fu_1689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_11_fu_1683_p2),4));
    zext_ln700_9_fu_1798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_27_fu_1793_p2),2));
    zext_ln700_fu_1598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln899_13_fu_1593_p2),2));
end behav;
