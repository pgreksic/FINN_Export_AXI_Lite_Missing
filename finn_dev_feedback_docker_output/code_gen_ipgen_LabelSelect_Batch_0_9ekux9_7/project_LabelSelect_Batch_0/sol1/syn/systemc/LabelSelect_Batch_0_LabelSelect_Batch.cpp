// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "LabelSelect_Batch_0_LabelSelect_Batch.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic LabelSelect_Batch_0_LabelSelect_Batch::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic LabelSelect_Batch_0_LabelSelect_Batch::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> LabelSelect_Batch_0_LabelSelect_Batch::ap_ST_fsm_state1 = "1";
const sc_lv<3> LabelSelect_Batch_0_LabelSelect_Batch::ap_ST_fsm_state2 = "10";
const sc_lv<3> LabelSelect_Batch_0_LabelSelect_Batch::ap_ST_fsm_state3 = "100";
const sc_lv<32> LabelSelect_Batch_0_LabelSelect_Batch::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> LabelSelect_Batch_0_LabelSelect_Batch::ap_const_lv32_1 = "1";
const sc_lv<1> LabelSelect_Batch_0_LabelSelect_Batch::ap_const_lv1_0 = "0";
const sc_lv<32> LabelSelect_Batch_0_LabelSelect_Batch::ap_const_lv32_2 = "10";
const sc_lv<16> LabelSelect_Batch_0_LabelSelect_Batch::ap_const_lv16_8000 = "1000000000000000";
const sc_lv<3> LabelSelect_Batch_0_LabelSelect_Batch::ap_const_lv3_0 = "000";
const sc_lv<3> LabelSelect_Batch_0_LabelSelect_Batch::ap_const_lv3_7 = "111";
const sc_lv<3> LabelSelect_Batch_0_LabelSelect_Batch::ap_const_lv3_1 = "1";
const sc_lv<1> LabelSelect_Batch_0_LabelSelect_Batch::ap_const_lv1_1 = "1";
const bool LabelSelect_Batch_0_LabelSelect_Batch::ap_const_boolean_1 = true;

LabelSelect_Batch_0_LabelSelect_Batch::LabelSelect_Batch_0_LabelSelect_Batch(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln397_fu_89_p2);
    sensitive << ( idx_0_0_reg_68 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( in_V_V_TVALID );
    sensitive << ( icmp_ln374_fu_83_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_icmp_ln374_fu_83_p2);
    sensitive << ( in_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln374_fu_83_p2 );
    sensitive << ( idx_0_0_reg_68 );

    SC_METHOD(thread_icmp_ln895_fu_95_p2);
    sensitive << ( in_V_V_TDATA );
    sensitive << ( in_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln374_fu_83_p2 );
    sensitive << ( topval_V_0_0_reg_57 );

    SC_METHOD(thread_in_V_V_TDATA_blk_n);
    sensitive << ( in_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln374_fu_83_p2 );

    SC_METHOD(thread_in_V_V_TREADY);
    sensitive << ( in_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln374_fu_83_p2 );

    SC_METHOD(thread_out_V_V_TDATA);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_V_fu_40 );

    SC_METHOD(thread_out_V_V_TDATA_blk_n);
    sensitive << ( out_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_V_V_TVALID);
    sensitive << ( out_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_toplabels_0_V_1_fu_113_p3);
    sensitive << ( tmp_V_fu_40 );
    sensitive << ( icmp_ln895_fu_95_p2 );
    sensitive << ( toplabels_0_V_fu_101_p1 );

    SC_METHOD(thread_toplabels_0_V_fu_101_p1);
    sensitive << ( idx_0_0_reg_68 );

    SC_METHOD(thread_topval_0_V_1_fu_105_p3);
    sensitive << ( in_V_V_TDATA );
    sensitive << ( topval_V_0_0_reg_57 );
    sensitive << ( icmp_ln895_fu_95_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_V_TVALID );
    sensitive << ( out_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln374_fu_83_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "LabelSelect_Batch_0_LabelSelect_Batch_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V_V_TDATA, "(port)in_V_V_TDATA");
    sc_trace(mVcdFile, in_V_V_TVALID, "(port)in_V_V_TVALID");
    sc_trace(mVcdFile, in_V_V_TREADY, "(port)in_V_V_TREADY");
    sc_trace(mVcdFile, out_V_V_TDATA, "(port)out_V_V_TDATA");
    sc_trace(mVcdFile, out_V_V_TVALID, "(port)out_V_V_TVALID");
    sc_trace(mVcdFile, out_V_V_TREADY, "(port)out_V_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_V_V_TDATA_blk_n, "in_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln374_fu_83_p2, "icmp_ln374_fu_83_p2");
    sc_trace(mVcdFile, out_V_V_TDATA_blk_n, "out_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, add_ln397_fu_89_p2, "add_ln397_fu_89_p2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, topval_0_V_1_fu_105_p3, "topval_0_V_1_fu_105_p3");
    sc_trace(mVcdFile, topval_V_0_0_reg_57, "topval_V_0_0_reg_57");
    sc_trace(mVcdFile, idx_0_0_reg_68, "idx_0_0_reg_68");
    sc_trace(mVcdFile, tmp_V_fu_40, "tmp_V_fu_40");
    sc_trace(mVcdFile, toplabels_0_V_1_fu_113_p3, "toplabels_0_V_1_fu_113_p3");
    sc_trace(mVcdFile, icmp_ln895_fu_95_p2, "icmp_ln895_fu_95_p2");
    sc_trace(mVcdFile, toplabels_0_V_fu_101_p1, "toplabels_0_V_fu_101_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

LabelSelect_Batch_0_LabelSelect_Batch::~LabelSelect_Batch_0_LabelSelect_Batch() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read())))) {
        idx_0_0_reg_68 = add_ln397_fu_89_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        idx_0_0_reg_68 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read())))) {
        topval_V_0_0_reg_57 = topval_0_V_1_fu_105_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        topval_V_0_0_reg_57 = ap_const_lv16_8000;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read())))) {
        tmp_V_fu_40 = toplabels_0_V_1_fu_113_p3.read();
    }
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_add_ln397_fu_89_p2() {
    add_ln397_fu_89_p2 = (!idx_0_0_reg_68.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(idx_0_0_reg_68.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read()));
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(out_V_V_TREADY.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_V_V_TREADY.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_icmp_ln374_fu_83_p2() {
    icmp_ln374_fu_83_p2 = (!idx_0_0_reg_68.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(idx_0_0_reg_68.read() == ap_const_lv3_7);
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_icmp_ln895_fu_95_p2() {
    icmp_ln895_fu_95_p2 = (!in_V_V_TDATA.read().is_01() || !topval_V_0_0_reg_57.read().is_01())? sc_lv<1>(): (sc_bigint<16>(in_V_V_TDATA.read()) > sc_bigint<16>(topval_V_0_0_reg_57.read()));
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_in_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_0))) {
        in_V_V_TDATA_blk_n = in_V_V_TVALID.read();
    } else {
        in_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_in_V_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read())))) {
        in_V_V_TREADY = ap_const_logic_1;
    } else {
        in_V_V_TREADY = ap_const_logic_0;
    }
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_out_V_V_TDATA() {
    out_V_V_TDATA = tmp_V_fu_40.read();
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_out_V_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        out_V_V_TDATA_blk_n = out_V_V_TREADY.read();
    } else {
        out_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_out_V_V_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_V_V_TREADY.read(), ap_const_logic_1))) {
        out_V_V_TVALID = ap_const_logic_1;
    } else {
        out_V_V_TVALID = ap_const_logic_0;
    }
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_toplabels_0_V_1_fu_113_p3() {
    toplabels_0_V_1_fu_113_p3 = (!icmp_ln895_fu_95_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln895_fu_95_p2.read()[0].to_bool())? toplabels_0_V_fu_101_p1.read(): tmp_V_fu_40.read());
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_toplabels_0_V_fu_101_p1() {
    toplabels_0_V_fu_101_p1 = esl_zext<8,3>(idx_0_0_reg_68.read());
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_topval_0_V_1_fu_105_p3() {
    topval_0_V_1_fu_105_p3 = (!icmp_ln895_fu_95_p2.read()[0].is_01())? sc_lv<16>(): ((icmp_ln895_fu_95_p2.read()[0].to_bool())? in_V_V_TDATA.read(): topval_V_0_0_reg_57.read());
}

void LabelSelect_Batch_0_LabelSelect_Batch::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read())) && esl_seteq<1,1,1>(icmp_ln374_fu_83_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(out_V_V_TREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

