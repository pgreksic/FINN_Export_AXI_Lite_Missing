-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LabelSelect_Batch_0_LabelSelect_Batch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in_V_V_TVALID : IN STD_LOGIC;
    in_V_V_TREADY : OUT STD_LOGIC;
    out_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_V_TVALID : OUT STD_LOGIC;
    out_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of LabelSelect_Batch_0_LabelSelect_Batch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln374_fu_83_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln397_fu_89_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal topval_0_V_1_fu_105_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal topval_V_0_0_reg_57 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx_0_0_reg_68 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_V_fu_40 : STD_LOGIC_VECTOR (7 downto 0);
    signal toplabels_0_V_1_fu_113_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln895_fu_95_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal toplabels_0_V_fu_101_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    idx_0_0_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln374_fu_83_p2 = ap_const_lv1_0) and (in_V_V_TVALID = ap_const_logic_0))) and (icmp_ln374_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idx_0_0_reg_68 <= add_ln397_fu_89_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idx_0_0_reg_68 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    topval_V_0_0_reg_57_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln374_fu_83_p2 = ap_const_lv1_0) and (in_V_V_TVALID = ap_const_logic_0))) and (icmp_ln374_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                topval_V_0_0_reg_57 <= topval_0_V_1_fu_105_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                topval_V_0_0_reg_57 <= ap_const_lv16_8000;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln374_fu_83_p2 = ap_const_lv1_0) and (in_V_V_TVALID = ap_const_logic_0))) and (icmp_ln374_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_V_fu_40 <= toplabels_0_V_1_fu_113_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in_V_V_TVALID, out_V_V_TREADY, ap_CS_fsm_state2, icmp_ln374_fu_83_p2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln374_fu_83_p2 = ap_const_lv1_0) and (in_V_V_TVALID = ap_const_logic_0))) and (icmp_ln374_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln374_fu_83_p2 = ap_const_lv1_0) and (in_V_V_TVALID = ap_const_logic_0))) and (icmp_ln374_fu_83_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((out_V_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln397_fu_89_p2 <= std_logic_vector(unsigned(idx_0_0_reg_68) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state2_assign_proc : process(in_V_V_TVALID, icmp_ln374_fu_83_p2)
    begin
                ap_block_state2 <= ((icmp_ln374_fu_83_p2 = ap_const_lv1_0) and (in_V_V_TVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, out_V_V_TREADY, ap_CS_fsm_state3)
    begin
        if ((((out_V_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_V_V_TREADY, ap_CS_fsm_state3)
    begin
        if (((out_V_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln374_fu_83_p2 <= "1" when (idx_0_0_reg_68 = ap_const_lv3_7) else "0";
    icmp_ln895_fu_95_p2 <= "1" when (signed(in_V_V_TDATA) > signed(topval_V_0_0_reg_57)) else "0";

    in_V_V_TDATA_blk_n_assign_proc : process(in_V_V_TVALID, ap_CS_fsm_state2, icmp_ln374_fu_83_p2)
    begin
        if (((icmp_ln374_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_V_TDATA_blk_n <= in_V_V_TVALID;
        else 
            in_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_TREADY_assign_proc : process(in_V_V_TVALID, ap_CS_fsm_state2, icmp_ln374_fu_83_p2)
    begin
        if ((not(((icmp_ln374_fu_83_p2 = ap_const_lv1_0) and (in_V_V_TVALID = ap_const_logic_0))) and (icmp_ln374_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_V_V_TREADY <= ap_const_logic_1;
        else 
            in_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    out_V_V_TDATA <= tmp_V_fu_40;

    out_V_V_TDATA_blk_n_assign_proc : process(out_V_V_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_V_V_TDATA_blk_n <= out_V_V_TREADY;
        else 
            out_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_V_TVALID_assign_proc : process(out_V_V_TREADY, ap_CS_fsm_state3)
    begin
        if (((out_V_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_V_V_TVALID <= ap_const_logic_1;
        else 
            out_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    toplabels_0_V_1_fu_113_p3 <= 
        toplabels_0_V_fu_101_p1 when (icmp_ln895_fu_95_p2(0) = '1') else 
        tmp_V_fu_40;
    toplabels_0_V_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_0_0_reg_68),8));
    topval_0_V_1_fu_105_p3 <= 
        in_V_V_TDATA when (icmp_ln895_fu_95_p2(0) = '1') else 
        topval_V_0_0_reg_57;
end behav;
