-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000111001111011", 1 => "1110100010110110", 2 => "1111101000111100", 
    3 => "1111110111000000", 4 => "1111100100100000", 5 => "1111110100000101", 
    6 => "1111111001000011", 7 => "0001001010011000", 8 => "0100100111100001", 
    9 => "1111111101000001", 10 => "1111001011110010", 11 => "0000001101001111", 
    12 => "1110101110110000", 13 => "0000000111010011", 14 => "0010001010101110", 
    15 => "1011001001100110", 16 => "1111110110001000", 17 => "1111101011001100", 
    18 => "0000101111000101", 19 => "1111010101011000", 20 => "0000000000110110", 
    21 => "1111111100010111", 22 => "1110111101011011", 23 => "1111110111100100", 
    24 => "0000001110011101", 25 => "1101110110101001", 26 => "1111010110001100", 
    27 => "1111101110111111", 28 => "1111010011010110", 29 => "1111100010001011", 
    30 => "0100100101001000", 31 => "1111110100000111", 32 => "1111001000001001", 
    33 => "0000000101101001", 34 => "1111101110000011", 35 => "1111111100110101", 
    36 => "1111110100010111", 37 => "0000111011101011", 38 => "1111010000100010", 
    39 => "0000010001000110", 40 => "0000010111001000", 41 => "1111111101110000", 
    42 => "1111110001101001", 43 => "0000001000011100", 44 => "0000001010000101", 
    45 => "0001001001110001", 46 => "0000010101000111", 47 => "1111111100001101", 
    48 => "0000010001001000", 49 => "1111111100111100", 50 => "0000000000111000", 
    51 => "1110111101111111", 52 => "0000101010000100", 53 => "1111100110000010", 
    54 => "0000001011010101", 55 => "1111111100101001", 56 => "1111110010111110", 
    57 => "0000010001001100", 58 => "0000000101001000", 59 => "1110001110101100", 
    60 => "0000010100100011", 61 => "1110101110100001", 62 => "1111110110101001", 
    63 => "1110010110010011", 64 => "1111111000000101", 65 => "1111010111111001", 
    66 => "0000000010101011", 67 => "0000100011100101", 68 => "0000101000100010", 
    69 => "0000000011100110", 70 => "0010001010001100", 71 => "1110100010101011", 
    72 => "0000000111100100", 73 => "1111101011110000", 74 => "0000000010111100", 
    75 => "0000000101010111", 76 => "0000000111000110", 77 => "1111111100100000", 
    78 => "1111101101101111", 79 => "0000000111101011", 80 => "1111111000110011", 
    81 => "0000000101010000", 82 => "0000110100000010", 83 => "1101110000011100", 
    84 => "0011001100101111", 85 => "0000010000001010", 86 => "0000001011011011", 
    87 => "1111010100111100", 88 => "0000111101011111", 89 => "0000001110001101", 
    90 => "0000000111101100", 91 => "1111110100011101", 92 => "0000010011101111", 
    93 => "0000000011111100", 94 => "0000011111111011", 95 => "0000000011000100", 
    96 => "1111110110011010", 97 => "1111111101100011", 98 => "1111111100111110", 
    99 => "1111111001000100", 100 => "0000001010011101", 101 => "0010011100011010", 
    102 => "0000000001111011", 103 => "0000001000110100", 104 => "1111011011101100", 
    105 => "1111110010110011", 106 => "1111110110101011", 107 => "1110101001001100", 
    108 => "1111110000000011", 109 => "0000000101011100", 110 => "1111111100011101", 
    111 => "1111100011111111", 112 => "1101010111001000", 113 => "1111111110101010", 
    114 => "1111111110100001", 115 => "0000110100011011", 116 => "1111100010000111", 
    117 => "0000001001111111", 118 => "1111110110010011", 119 => "0000000001001000", 
    120 => "0000001101010000", 121 => "1111101101110111", 122 => "0000000101010000", 
    123 => "1111110101001101", 124 => "0001111101100011", 125 => "1111111010001110", 
    126 => "0000110111101101", 127 => "1110011100010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb is
    component StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_Actbkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


