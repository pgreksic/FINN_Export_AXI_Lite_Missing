-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActdEe_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of StreamingFCLayer_Batch_4_Matrix_Vector_ActdEe_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000111010011111", 1 => "1110100011011011", 2 => "1111101001100011", 
    3 => "1111110111010010", 4 => "1111100110110010", 5 => "1111110100010001", 
    6 => "1111111001010101", 7 => "0001001011000010", 8 => "0101011001100010", 
    9 => "1111111101011000", 10 => "1111001101100011", 11 => "0000001101101001", 
    12 => "1110101111110000", 13 => "0000000111101010", 14 => "0010010000010101", 
    15 => "1011010111010011", 16 => "1111110110011011", 17 => "1111101011110100", 
    18 => "0000110000101100", 19 => "1111010101111100", 20 => "0000000001011011", 
    21 => "1111111101001100", 22 => "1110111110010001", 23 => "1111110111110100", 
    24 => "0000010000001110", 25 => "1101111011001101", 26 => "1111010111010110", 
    27 => "1111101111101001", 28 => "1111010011111010", 29 => "1111100101000111", 
    30 => "0111010111110100", 31 => "1111110100011111", 32 => "1111001111000101", 
    33 => "0000000101111000", 34 => "1111101110100001", 35 => "1111111101011000", 
    36 => "1111110100100100", 37 => "0000111100011000", 38 => "1111010110000011", 
    39 => "0000010001100001", 40 => "0000100000110000", 41 => "1111111110001111", 
    42 => "1111110001111101", 43 => "0000001000101111", 44 => "0000001010101101", 
    45 => "0001001011000110", 46 => "0000010101011001", 47 => "1111111100100001", 
    48 => "0000010001011000", 49 => "1111111101010100", 50 => "0000000010100000", 
    51 => "1111000001010001", 52 => "0000110011000110", 53 => "1111100110010100", 
    54 => "0000001011100111", 55 => "1111111101011011", 56 => "1111110011010100", 
    57 => "0000010001101000", 58 => "0000000101010111", 59 => "1110010110110011", 
    60 => "0000010111101101", 61 => "1110110001001000", 62 => "1111110111000001", 
    63 => "1110010110111111", 64 => "1111111000010111", 65 => "1111011001110010", 
    66 => "0000000011010101", 67 => "0000100011111110", 68 => "0000101001001111", 
    69 => "0000000011110101", 70 => "0010010000101010", 71 => "1110101101010111", 
    72 => "0000000111110001", 73 => "1111101100010010", 74 => "0000000101011011", 
    75 => "0000000110011001", 76 => "0000000111011000", 77 => "1111111100110000", 
    78 => "1111101111101101", 79 => "0000001000001011", 80 => "1111111001010001", 
    81 => "0000000101100010", 82 => "0000110110111110", 83 => "1101110101001101", 
    84 => "0011110011000100", 85 => "0000010000011111", 86 => "0000001011110100", 
    87 => "1111011000001111", 88 => "0000111110111001", 89 => "0000001110011100", 
    90 => "0000001000000010", 91 => "1111110100101000", 92 => "0000010100000011", 
    93 => "0000000100001101", 94 => "0000100010111111", 95 => "0000000011011101", 
    96 => "1111110110101011", 97 => "1111111101110011", 98 => "1111111101010100", 
    99 => "1111111001011010", 100 => "0000001010111110", 101 => "0010101001011001", 
    102 => "0000000010001100", 103 => "0000001001000101", 104 => "1111011100100101", 
    105 => "1111110011000101", 106 => "1111110111000101", 107 => "1110101001110001", 
    108 => "1111110000011001", 109 => "0000000101111101", 110 => "1111111100110000", 
    111 => "1111100100100011", 112 => "1101100101100010", 113 => "1111111110111010", 
    114 => "1111111110110000", 115 => "0000110101000110", 116 => "1111100010100110", 
    117 => "0000001010011000", 118 => "1111111001010010", 119 => "0000000001100000", 
    120 => "0000001101110110", 121 => "1111101110001101", 122 => "0000000101011111", 
    123 => "1111110101011100", 124 => "0010000001100011", 125 => "1111111010101010", 
    126 => "0001000000100101", 127 => "1110011101100111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity StreamingFCLayer_Batch_4_Matrix_Vector_ActdEe is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of StreamingFCLayer_Batch_4_Matrix_Vector_ActdEe is
    component StreamingFCLayer_Batch_4_Matrix_Vector_ActdEe_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    StreamingFCLayer_Batch_4_Matrix_Vector_ActdEe_rom_U :  component StreamingFCLayer_Batch_4_Matrix_Vector_ActdEe_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


