// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _StreamingDataflowPartition_0_IODMA_0_StreamingDataWidthCo_HH_
#define _StreamingDataflowPartition_0_IODMA_0_StreamingDataWidthCo_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct StreamingDataflowPartition_0_IODMA_0_StreamingDataWidthCo : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<8> > out_V_V_TDATA;
    sc_out< sc_logic > out_V_V_TVALID;
    sc_in< sc_logic > out_V_V_TREADY;
    sc_in< sc_lv<32> > numReps_dout;
    sc_in< sc_logic > numReps_empty_n;
    sc_out< sc_logic > numReps_read;


    // Module declarations
    StreamingDataflowPartition_0_IODMA_0_StreamingDataWidthCo(sc_module_name name);
    SC_HAS_PROCESS(StreamingDataflowPartition_0_IODMA_0_StreamingDataWidthCo);

    ~StreamingDataflowPartition_0_IODMA_0_StreamingDataWidthCo();

    sc_trace_file* mVcdFile;

    StreamingDataflowPartition_0_IODMA_0_regslice_both<8>* regslice_both_out_V_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln476_reg_217;
    sc_signal< sc_lv<1> > icmp_ln479_reg_226;
    sc_signal< sc_logic > out_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln476_reg_217_pp0_iter1_reg;
    sc_signal< sc_logic > numReps_blk_n;
    sc_signal< sc_lv<56> > p_025_0_i_reg_93;
    sc_signal< sc_lv<32> > o_0_i_reg_105;
    sc_signal< sc_lv<32> > t_0_i_reg_116;
    sc_signal< sc_lv<32> > totalIters_fu_149_p2;
    sc_signal< sc_lv<32> > totalIters_reg_212;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln476_fu_155_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_predicate_op26_read_state3;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > t_fu_160_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln479_fu_166_p2;
    sc_signal< sc_lv<32> > select_ln490_fu_184_p3;
    sc_signal< sc_lv<56> > trunc_ln_reg_240;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<56> > ap_phi_mux_p_025_0_i_phi_fu_97_p4;
    sc_signal< sc_lv<64> > ap_phi_mux_p_Val2_s_phi_fu_130_p4;
    sc_signal< sc_lv<64> > ap_phi_reg_pp0_iter1_p_Val2_s_reg_127;
    sc_signal< sc_lv<64> > zext_ln476_fu_192_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > shl_ln473_fu_137_p2;
    sc_signal< sc_lv<32> > shl_ln473_1_fu_143_p2;
    sc_signal< sc_lv<32> > o_fu_172_p2;
    sc_signal< sc_lv<1> > icmp_ln490_fu_178_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > regslice_both_out_V_V_U_apdone_blk;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<8> > out_V_V_TDATA_int;
    sc_signal< sc_logic > out_V_V_TVALID_int;
    sc_signal< sc_logic > out_V_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_out_V_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<56> ap_const_lv56_0;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_p_025_0_i_phi_fu_97_p4();
    void thread_ap_phi_mux_p_Val2_s_phi_fu_130_p4();
    void thread_ap_phi_reg_pp0_iter1_p_Val2_s_reg_127();
    void thread_ap_predicate_op26_read_state3();
    void thread_ap_ready();
    void thread_icmp_ln476_fu_155_p2();
    void thread_icmp_ln479_fu_166_p2();
    void thread_icmp_ln490_fu_178_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_numReps_blk_n();
    void thread_numReps_read();
    void thread_o_fu_172_p2();
    void thread_out_V_V_TDATA_blk_n();
    void thread_out_V_V_TDATA_int();
    void thread_out_V_V_TVALID();
    void thread_out_V_V_TVALID_int();
    void thread_select_ln490_fu_184_p3();
    void thread_shl_ln473_1_fu_143_p2();
    void thread_shl_ln473_fu_137_p2();
    void thread_t_fu_160_p2();
    void thread_totalIters_fu_149_p2();
    void thread_zext_ln476_fu_192_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
